void
read_from_buffer (DESCRIPTOR_DATA * d)
{
  int i, j, k;			/*, changed; */
  char fix_inbuf[STD_LENGTH];
  int ct;
  char *t;
  char *cmd;
  char *cc2;
  char *ll;
  /*
   * Hold horses if pending command already.
   */
  if (d->incomm[0] != '\0')
    return;
  /*
   * Look for at least one new line.
   */
  if (strlen(d->inbuf)>398)
  {
    char buf[STD_LENGTH];
    d->incomm[0]='\0';
    d->inbuf[0]='\0';
    //fprintf(stderr,"Debug: Strlen>398\n");
    sprintf (buf, "Char input spamming (strlen>398), %s on %s, %s.",
        (d->character && IS_PLAYER (d->character) && !MAG_ALLES (NAME (d->character))) ? NAME (d->character) :
        "(Unknown)", d->host, state_name (d->connected));
    log_string (buf);
    return;
  }
  for (i = 0; i < 400 && d->inbuf[i] != '\n' && d->inbuf[i] != '\r'; i++)
  {
    if (d->inbuf[i] == '\0')
      return;
  }
  /*
  if (i > 990)
  {
    fprintf (stderr, "Over 990 chars on the line in read_from_buffer.\n");
    close_socket (d);
    return;
  }
  */
  if (0 && d->host[29] == 1)
  {
    ct = 0;
    for (t = d->inbuf; *t != '\0'; t++)
    {
      /*	  while (*t == '\b' || *t == 16 || *t == 127)
            {
            if (ct > 0)
            ct--;
            t++;
            if (*t == '\0')
            goto dn;
            }*/
      if (d->connected == CON_STATE_ONE && *t != '\0' && *t != 32 && *t != 13 && (*t < 'A' || *t > 'z'))
        continue;
      fix_inbuf[ct] = *t;
      ct++;
      fix_inbuf[ct] = '\0';
    }
dn:
    fix_inbuf[ct] = '\0';
    strcpy (d->inbuf, fix_inbuf);
  }

  if (d->character && d->connected <= CON_PLAYING)
  {
    if (strlen(d->inbuf)>4 && d->inbuf[0] == '#' && d->inbuf[1] >= '1' && d->inbuf[1] <= '9' && d->inbuf[2] == ' ')
    {
      char nib[STD_LENGTH];
      char *zt;
      char *t2 = nib;
      int times = (d->inbuf[1] - '1') + 1;
      for (zt = d->inbuf + 3; *zt != '\0' && *zt != '~' && *zt != '\n'; zt++)
      {
        if (*zt == '#')
        {
          d->inbuf[0] = '\0';
          return;
        }
        *t2 = *zt;
        t2++;
        *t2 = '\0';
      }
      strcat (nib, "\n\r");
      for (; times > 1; times--)
      {
        strcat (d->inbuf, nib);
      }
      strcpy (nib, d->inbuf);
      sprintf (d->inbuf, "%s", nib + 3);
    }
  }
  if (d->character && IS_PLAYER (d->character) &&
      d->connected <= CON_PLAYING && d->pString == NULL && d->inbuf[0] != '.' &&
      d->inbuf[0] != ']' && d->inbuf[0] != '[' && d->inbuf[0] != ';' &&
      d->inbuf[0] != ':' && d->inbuf[0] != '\'' && d->inbuf[0] != ',')
  {
    //one_argy (d->inbuf, cmd);
    for (k = 0; k < MAXALIAS; k++)
    {
      if (d->character->pcdata->aliasname[k] &&
          d->character->pcdata->aliasname[k][0] != '\0' &&
          d->character->pcdata->alias[k] &&
          d->character->pcdata->alias[k][0] != '\0')
      {
  		  cmd = first (d->inbuf);
        if (d->character->pcdata->aliasname[k] && cmd
            && !str_cmp (cmd, d->character->pcdata->aliasname[k]))
        {
          int ii;
          int ii2;
          char *c;
          bool fon = FALSE;
          char tx[STD_LENGTH];
          char repl[STD_LENGTH];
          int rct = 0;
          int ict = 0;
            repl[0]='\0';
            tx[0]='\0';
          ii = strlen (d->inbuf);
          cc2 = d->inbuf + strlen (cmd);
          for (; *cc2 != '\n' && *cc2 != '\r' && *cc2 != '\0'; cc2++)
          {
            repl[ict] = *cc2;
            ict++;
            repl[ict] = '\0';
          }
          ii2 = strlen (repl);
          if (repl[ii2 - 1] == '\n' || repl[ii2 - 1] == '\r')
            repl[ii2 - 1] = '\0';
          if (repl[ii2 - 2] == '\n' || repl[ii2 - 2] == '\r')
            repl[ii2 - 2] = '\0';
          strsub (d->inbuf, cmd, d->character->pcdata->alias[k]);
          for (c = d->inbuf; *c != '\0'; c++)
          {
            if (*c == '%' || *c == '@')
            {
              fon = TRUE;
              goto ttk;
            }
          }
ttk:
          if (fon)
          {
            ict = 0;
            for (c = d->inbuf; *c != '\0'; c++)
            {
              if (!str_prefix (repl, c))
                goto duni;
              if (*c == '%' || *c == '@')
              {
                tx[ict] = '\0';
                strcat (tx, repl);
                ict += strlen (repl);
                continue;
              }
              tx[ict] = *c;
              ict++;
              tx[ict] = '\0';
            }
duni:
            tx[ict] = '\0';
            strcpy (d->inbuf, tx);
            ii = strlen (d->inbuf);
            if (d->inbuf[ii - 1] != '\n' && d->inbuf[ii - 1] != '\r')
            {
              d->inbuf[ii] = '\n';
              d->inbuf[ii + 1] = '\0';
            }
          }
          break;
        }
      }
    }
  }
  for (ll = d->inbuf; *ll != '\0'; ll++)
    if (*ll == '~')
      *ll = '\n';
  for (i = 0, k = 0; d->inbuf[i] != '\n' && d->inbuf[i] != '\r'; i++)
  {
    if (i >= 450)
    {
      write_to_descriptor (d->descriptor, "Line too long.\n\r", 0);
      fprintf (stderr, "Line too long!");
      /* skip the rest of the line */
      for (; d->inbuf[i] != '\0'; i++)
      {
        if (d->inbuf[i] == '\n' || d->inbuf[i] == '\r')
          break;
      }
      d->inbuf[i] = '\n';
      d->inbuf[i + 1] = '\0';
      break;
    }
    if (find_connection_num (d) >= 0)
    {
      d->incomm[k++] = d->inbuf[i];
    }
    else if (d->inbuf[i] == '\b' && k > 0)
      --k;
    else if ((isascii (d->inbuf[i]) && isprint (d->inbuf[i])))
      /*|| (d->connected!=CON_PLAYING && d->inbuf[i]>0 && d->inbuf[i]<5) */
      d->incomm[k++] = d->inbuf[i];
  }
  /*
   * Finish off the line.
   */
  if (k == 0)
    d->incomm[k++] = ' ';
  d->incomm[k] = '\0';
  if (k > 1 || d->incomm[0] == '!')
  {
    if (d->incomm[0] != '!' && strcmp (d->incomm, d->inlast))
    {
      d->repeat = 0;
    }
    else
    {
      if (d->incomm[0] == '!')
      {
        if (!str_prefix ("gos", d->inlast))
          d->repeat += 8;	/* gossip */
        if (!str_prefix ("te", d->inlast))
          d->repeat += 8;	/* tell */
        if (!str_prefix ("ye", d->inlast))
          d->repeat += 8;	/* yell */
        if (!str_prefix ("cha", d->inlast))
          d->repeat += 8;	/* chat */
        if (!str_prefix ("pray", d->inlast))
          d->repeat += 8;	/* pray */
        if (!str_prefix ("rai", d->inlast))
          d->repeat += 8;	/* raid */
        if (!str_prefix ("clant", d->inlast))
          d->repeat += 8;   /* clantalk */
      }
      if (++d->repeat >= 25)
      {
        if (!str_prefix ("gos", d->inlast))
          d->repeat += 100;
        if (!str_prefix ("te", d->inlast))
          d->repeat += 100;
        if (!str_prefix ("ye", d->inlast))
          d->repeat += 100;
        if (!str_prefix ("cha", d->inlast))
          d->repeat += 100;
        if (!str_prefix ("pray", d->inlast))
          d->repeat += 100;
        if (!str_prefix ("rai", d->inlast))
          d->repeat += 100;
        if (!str_prefix ("clant", d->inlast))
          d->repeat += 100;
        if (d->character != NULL && IS_PLAYER (d->character))
        {
          if (d->repeat > 100)
          {
            send_to_char ("Don't SPAM the channels!!  You have been silenced!", d->character);
            sprintf (log_buf, "%s channel-input spamming! Player silenced.", NAME (d->character));
            log_string (log_buf);
            SET_BIT (d->character->pcdata->act2, PLR_SILENCE);
          }
          d->repeat = 15;
          //send_to_char ("You have been delayed for 3 seconds for spamming so much.\n\r", d->character);
          //d->character->wait = 75;
        }
      }
    }
  }
  /*
   * Do '!' substitution.
   */
  if (d->incomm[0] == '!' && d->connected != 5)
    strcpy (d->incomm, d->inlast);
  else if (strlen (d->incomm) > 2)
    strcpy (d->inlast, d->incomm);
  /*
   * Shift the input buffer.
   */
  while (d->inbuf[i] == '\n' || d->inbuf[i] == '\r')
    i++;
  for (j = 0; (d->inbuf[j] = d->inbuf[i + j]) != '\0'; j++)
    ;
  return;
}
