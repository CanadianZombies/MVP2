alien.c:  if (gold_cost[num] * 100 > ch->pcdata->bank)
alien.c:  ch->pcdata->bank -= (gold_cost[num] * 100);
alien.c:      SET_BIT (ch->pcdata->implants_1, IMPLANT_ARMS);
alien.c:      SET_BIT (ch->pcdata->implants_1, IMPLANT_LEGS);
alien.c:      SET_BIT (ch->pcdata->implants_1, IMPLANT_HANDS);
alien.c:      SET_BIT (ch->pcdata->implants_1, IMPLANT_BODY);
alien.c:      SET_BIT (ch->pcdata->implants_2, IMPLANT_ARMS);
alien.c:      SET_BIT (ch->pcdata->implants_2, IMPLANT_LEGS);
alien.c:      SET_BIT (ch->pcdata->implants_2, IMPLANT_HEAD);
alien.c:      SET_BIT (ch->pcdata->implants_2, IMPLANT_FEET);
alien.c:      SET_BIT (ch->pcdata->implants_2, IMPLANT_HANDS);
alien.c:      SET_BIT (ch->pcdata->implants_2, IMPLANT_BODY);
alien.c:  switch (ch->pcdata->remort_times)	// Kenor '03
alien.c:  if (ch->pcdata->warpoints < reqwps)
alien.c:  if (pow.max_remorts == 1 && ch->pcdata->remort_times > 0)
alien.c:  if (ch->pcdata->remort_times >= pow.max_remorts)
alien.c:  if (pow.add_to_stats && ch->pcdata->remort_times < 5)
alien.c:      if (ch->pcdata->remort_times < 5)
alien.c:      if (ch->pcdata->remort_times < 5)
alien.c:	  race_info[ch->pcdata->race].limits[STR_I]
alien.c:	  race_info[ch->pcdata->race].limits[INT_I]
alien.c:	  race_info[ch->pcdata->race].limits[CON_I]
alien.c:	  race_info[ch->pcdata->race].limits[WIS_I]
alien.c:	  race_info[ch->pcdata->race].limits[DEX_I])
alien.c:      ch->pcdata->perm_stat[STR_I] += tmp_str;
alien.c:      ch->pcdata->perm_stat[INT_I] += tmp_int;
alien.c:      ch->pcdata->perm_stat[CON_I] += tmp_con;
alien.c:      ch->pcdata->perm_stat[WIS_I] += tmp_wis;
alien.c:      ch->pcdata->perm_stat[DEX_I] += tmp_dex;
alien.c:  ch->pcdata->level = 1;
alien.c:  ch->pcdata->remort_times++;
alien.c:  ch->pcdata->tps = 0;
alien.c:  ch->pcdata->practice = 15;
alien.c:  ch->pcdata->learn = 6;
alien.c:      ch->pcdata->remort[REMORT_PRAC]++;
alien.c:      ch->pcdata->practice +=
alien.c:	REMORT_PRAC_AMOUNT * ch->pcdata->remort[REMORT_PRAC];
alien.c:      ch->pcdata->remort[REMORT_HP]++;
alien.c:      ch->max_hit += REMORT_HP_AMOUNT * ch->pcdata->remort[REMORT_HP];
alien.c:      ch->pcdata->remort[REMORT_MOVE]++;
alien.c:      ch->max_move += REMORT_MOVE_AMOUNT * ch->pcdata->remort[REMORT_MOVE];
alien.c:      ch->pcdata->remort[REMORT_DAM]++;
alien.c:      ch->pcdata->remort[REMORT_MANA]++;
alien.c:  ch->pcdata->profession_flag = 0;
alien.c:      ch->pcdata->learned[k] = -100;
alien.c:      ch->pcdata->race = pow.race_change;
alien.c:      ch->pcdata->warpoints = 0;
alien.c:      ch->pcdata->alignment = -1000;
alien.c:  ch->pcdata->alignment = -1000;
alien.c:      ch->pcdata->alignment = -1000;
alien.c:    sprintf (workstr, "\x1B[37;1mThis is remort number \x1B[31;1m%d\x1B[37;1m for your character!\x1B[37;0m\n\r", ch->pcdata->remort_times);
alien.c:      if (ch->pcdata->remort_times == 2)
alien.c:      if (ch->pcdata->remort_times == 3)
alien.c:  if (IS_EVIL (ch) && ch->pcdata->profession_flag != 0
alien.c:      && ch->pcdata->level < 45)
alien.c:  if (!IS_EVIL (ch) && ch->pcdata->profession_flag != 0
alien.c:      && ch->pcdata->level < 35)
alien.c:  ch->pcdata->learn = 0;
alien.c:  ch->pcdata->practice = 0;
alien.c:    ch->pcdata->learned[i] = -100;
alien.c:  if (IS_EVIL (ch) && ch->pcdata->profession_flag != 0)
alien.c:      int oldlev = ch->pcdata->level;
alien.c:      ch->pcdata->practice += 8;
alien.c:      ch->pcdata->learn += 3;
alien.c:      ch->pcdata->level = 1;
alien.c:	  ch->pcdata->level++;
alien.c:      ch->pcdata->tps = FIND_TPS ((ch->pcdata->level - 1), 0);
alien.c:      ch->exp = FIND_EXP ((ch->pcdata->level - 1), 0);
alien.c:  if (!IS_EVIL (ch) && ch->pcdata->profession_flag != 0)
alien.c:      int oldlev = ch->pcdata->level;
alien.c:      ch->pcdata->level = 1;
alien.c:	  ch->pcdata->level++;
alien.c:      ch->pcdata->tps = FIND_TPS ((ch->pcdata->level - 1), 0);
alien.c:      ch->exp = FIND_EXP ((ch->pcdata->level - 1), 0);
alien.c:  if (ch->pcdata->level > 3)
alien.c:    ch->pcdata->learn += 6 + (ch->pcdata->level - 3);
alien.c:    ch->pcdata->learn += (ch->pcdata->level * 2);
alien.c:  ch->pcdata->practice = (wis_app[get_curr_wis (ch)].practice) * (LEVEL (ch));
alien.c:	  || (number_range (1, 100) < ch->pcdata->learned[gsn_headbutt]))
alien.c:  if (ch->pcdata->learned[gsn_bodyslam] < 1)
alien.c:	  || (number_range (1, 100) < ch->pcdata->learned[gsn_bodyslam]))
alien.c:  if (ch->pcdata->learned[gsn_disembowel] < 1)
alien.c:	  || (number_range (1, 100) < ch->pcdata->learned[gsn_disembowel]))
alien.c:  if (ch->pcdata->learned[gsn_elbow] < 1)
alien.c:	  || (number_range (1, 100) < ch->pcdata->learned[gsn_elbow]))
ansi_out.c:      if (!IS_SET (ch->pcdata->act2, PLR_ANSI)
ansi_out.c:	  && !IS_SET (ch->pcdata->act2, PLR_VT100))
ansi_out.c:      else if (IS_SET (ch->pcdata->act2, PLR_VT100)
ansi_out.c:	       && !IS_SET (ch->pcdata->act2, PLR_ANSI))
ansi_out.c:      if (type == TO_CHAR_SPAM && (to != ch || to->pcdata->no_spam == 1))
ansi_out.c:	  && (to != vch || to == ch || to->pcdata->no_spam == 1))
ansi_out.c:      if (type == TO_ROOM_SPAM && (to == ch || to->pcdata->no_spam == 1))
ansi_out.c:	  && (to == ch || to == vch || to->pcdata->no_spam == 1))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI)
ansi_out.c:		      || IS_SET (to->pcdata->act2, PLR_VT100))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI)
ansi_out.c:		      || IS_SET (to->pcdata->act2, PLR_VT100))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI)
ansi_out.c:		      || IS_SET (to->pcdata->act2, PLR_VT100))
ansi_out.c:		  if (IS_SET (to->pcdata->act2, PLR_ANSI)
ansi_out.c:		      || IS_SET (to->pcdata->act2, PLR_VT100))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI)
ansi_out.c:		  || IS_SET (to->pcdata->act2, PLR_VT100))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI)
ansi_out.c:		  || IS_SET (to->pcdata->act2, PLR_VT100))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI)
ansi_out.c:		  || IS_SET (to->pcdata->act2, PLR_VT100))
ansi_out.c:	      if (IS_SET (to->pcdata->act2, PLR_ANSI)
ansi_out.c:		  || IS_SET (to->pcdata->act2, PLR_VT100))
ar.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_track] < 3
ar.c:      ch->pcdata->voting_on = 0;
ar.c:      ch->pcdata->voting_on = 0;
ar.c:          ch->pcdata->voting_on = 0;
ar.c:          ch->pcdata->voting_on = 0;
ar.c:         ch->pcdata->tickcounts = 9;
ar.c:         ch->pcdata->voting_on = 999;
ar.c:        ch->pcdata->voting_on = 0;
ar.c:        ch->pcdata->voting_on = 0;
ar.c:        ch->pcdata->voting_on = 0;
ar.c:              ch->pcdata->voting_on=0;
ar.c:    ch->pcdata->tickcounts = 9;
ar.c:    ch->pcdata->voting_on = 999;
ar.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_track] < 3
ar.c:        ch->pcdata->tickcounts = 9;
ar.c:        ch->pcdata->voting_on = 999;
ar.c:      (ch->pcdata->learned[gsn_track] < number_range (0, 50)
ar.c:            ch->pcdata->voting_on=0;
ar.c:          ch->pcdata->voting_on = 0;
ar.c:        ch->pcdata->voting_on=0;
ar.c:        ch->pcdata->voting_on=0;
ar.c:          (ch->pcdata->learned[gsn_track]<number_range(0,90) && !is_member(ch,GUILD_RANGER)))
ar.c:          && !IS_SET (ch->pcdata->act3, ACT3_MUTE) && !is_safe (ch, vict))
arena.c:  if (ch->pcdata->bgf)
arena.c:      ch->pcdata->bgf = FALSE;
arena.c:if (ch->pcdata->no_quit_pk != 0)
arena.c:        ch->pcdata->no_quit_pk);
arena.c:  ch->pcdata->bgf = TRUE;
arena.c:      victim->pcdata->bank += biddata.bids[k];
arena.c:    winner->pcdata->no_quit = 0;
arena.c:    loser->pcdata->no_quit = 0;
arena.c:    winner->pcdata->challenge_time = 12;
arena.c:    loser->pcdata->challenge_time = 12;
arena.c:      /*temp->pcdata->bank-=biddata.bids[k]; */
arena.c:	  temp->pcdata->bank += share;
arena.c:      ch->pcdata->arena_msg = TRUE;
arena.c:      ch->pcdata->arena_msg = FALSE;
arena.c:      ch->pcdata->bank += biddata.bids[kkkk];
arena.c:  if (bet < 1 || (unsigned long) bet > ch->pcdata->bank)
arena.c:      ch->pcdata->bank += biddata.bids[kkkk];
arena.c:  ch->pcdata->bank -= bet;
arena.c:  if (!ch->pcdata->challenged_by)
arena.c:  strcpy (tempstr, ch->pcdata->challenged_by);
arena.c:	       ch->pcdata->challenged_by);
arena.c:      if (ch->pcdata->challenged_by)
arena.c:	free_string (ch->pcdata->challenged_by);
arena.c:      ch->pcdata->challenged_by = NULL;
arena.c:  if (ch->pcdata->challenged_by)
arena.c:      free_string (ch->pcdata->challenged_by);
arena.c:      ch->pcdata->challenged_by = NULL;
arena.c:  victim->pcdata->challenge_time = 0;
arena.c:  if (!ch->pcdata->challenged_by)
arena.c:  strcpy (tempstr, ch->pcdata->challenged_by);
arena.c:	       ch->pcdata->challenged_by);
arena.c:      if (ch->pcdata->challenged_by)
arena.c:	free_string (ch->pcdata->challenged_by);
arena.c:      ch->pcdata->challenged_by = NULL;
arena.c:  if (ch->pcdata->challenged_by)
arena.c:    free_string (ch->pcdata->challenged_by);
arena.c:  ch->pcdata->challenged_by = NULL;
arena.c:  victim->pcdata->challenge_time = 0;
arena.c:      /* if (ch->pcdata->challenge_on) 
arena.c:         ch->pcdata->challenge_on=FALSE; 
arena.c:         ch->pcdata->challenge_on=TRUE;
arena.c:      ch->pcdata->challenge_on = TRUE;
arena.c:      ch->pcdata->challenge_on = FALSE;
arena.c:  if (ch->pcdata->challenge_on == FALSE)
arena.c:  if (ch->pcdata->bounty != 0)
arena.c:  if (victim->pcdata->bounty != 0)
arena.c:  if (victim->pcdata->challenge_on == FALSE)
arena.c:  if (victim->pcdata->challenged_by && argy != "" && argy[0] != '\0'
arena.c:      && !str_cmp (NAME (ch), victim->pcdata->challenged_by))
arena.c:      if (victim->pcdata->challenged_by)
arena.c:	  free_string (victim->pcdata->challenged_by);
arena.c:	  victim->pcdata->challenged_by = NULL;
arena.c:      ch->pcdata->challenge_time = 0;
arena.c:  if (ch->pcdata->challenge_time > 0)
arena.c:  ch->pcdata->challenge_time = 5;
arena.c:  if (victim->pcdata->challenged_by)
arena.c:      free_string (victim->pcdata->challenged_by);
arena.c:      victim->pcdata->challenged_by = NULL;
arena.c:  victim->pcdata->challenged_by = str_dup (NAME (ch));
armor.c:      && (ch->pcdata->implants_1 != 0 || ch->pcdata->implants_2 != 0))
auction.c:  if (!ch->pcdata->listen_auction)
auction.c:      ch->pcdata->listen_auction = TRUE;
auction.c:      if ((tally_coins (ch) + ch->pcdata->bank) < (unsigned long) obid)
auction.c:      if (ch->pcdata->bank < (unsigned long) obid)
auction.c:  if (IS_SET (ch->pcdata->raceflag, RC_EVILRACE))
auction.c:  if (!ch->pcdata->listen_auction)
auction.c:      ch->pcdata->listen_auction = TRUE;
auction.c:      if ((tally_coins (ch) + ch->pcdata->bank) < (unsigned long) obid)
auction.c:      if (ch->pcdata->bank < (unsigned long) obid)
auction.c:  if (pow.auction_lag && ch->pcdata->no_quit_pk)
auction.c:	      ch->pcdata->bank += e_auction_item_e->cost / 7;
auction.c:      if (ch->pcdata->bank < i)
auction.c:      ch->pcdata->bank -= i;
auction.c:  ch->pcdata->listen_auction = TRUE;
auction.c:    if (IS_SET (ch->pcdata->deaf, CHANNEL_AUCTION))
auction.c:  if (pow.auction_lag && ch->pcdata->no_quit_pk)
auction.c:  if (IS_SET (ch->pcdata->raceflag, RC_EVILRACE))
auction.c:	      ch->pcdata->bank += auction_item_g->cost / 7;
auction.c:      if (ch->pcdata->bank < i)
auction.c:      ch->pcdata->bank -= i;
auction.c:  ch->pcdata->listen_auction = TRUE;
auction.c:      if (IS_SET (dd->character->pcdata->deaf, CHANNEL_AUCTION))
auction.c:      if (!to_all && !dd->character->pcdata->listen_auction)
auction.c:      if (IS_EVIL (dd->character) && dd->character->pcdata->listen_auction)
auction.c:	dd->character->pcdata->listen_auction = FALSE;
auction.c:      if (!IS_EVIL (dd->character) && dd->character->pcdata->listen_auction)
auction.c:	dd->character->pcdata->listen_auction = FALSE;
auction.c:	      e_auction_char->pcdata->bank += e_auction_item_e->cost / 7;
auction.c:				e_auction_char->pcdata->bank += e_auction_item_e->cost / 7;
auction.c:	  e_auction_char->pcdata->bank += e_auction_bid;
auction.c:	  e_auction_tochar->pcdata->bank -= e_auction_bid;
auction.c:	      auction_char->pcdata->bank += auction_item_g->cost / 7;
auction.c:				auction_char->pcdata->bank += auction_item_g->cost / 7;
auction.c:	  auction_char->pcdata->bank += auction_bid;
auction.c:	  auction_tochar->pcdata->bank -= auction_bid;
aw.c:    if (!vict->pcdata->script_flags[i]
aw.c:        || vict->pcdata->script_flags[i][0] == '\0')
aw.c:        vict->pcdata->script_flags[i]);
aw.c:  if (ch->pcdata->learned[spell->gsn] == -100)
aw.c:    if (ch->pcdata->learned[i] < 0)
aw.c:  ch->pcdata->learned[spell->gsn] = -100;
aw.c:    ch->pcdata->learned[i] = -100;
aw.c:  ch->pcdata->practice = 1 + ((LEVEL (ch) - 1) *
aw.c:    ch->pcdata->learn = (LEVEL (ch) * 2);
aw.c:    ch->pcdata->learn = 6 + (LEVEL (ch) - 3);
aw.c:    victim->pcdata->learned[i] = -100;
aw.c:  victim->pcdata->practice = 10 + ((LEVEL (victim) - 1) *
aw.c:  victim->pcdata->practice = 1 + ((LEVEL (victim) - 1) *
aw.c:    victim->pcdata->learn = (LEVEL (victim) * 2);
aw.c:    victim->pcdata->learn = 6 + (LEVEL (victim) - 3);
aw.c:      if (ch->pcdata->beamin)
aw.c:        free_string (ch->pcdata->beamin);
aw.c:      ch->pcdata->beamin = str_dup (argy);
aw.c:      if (ch->pcdata->beamout)
aw.c:        free_string (ch->pcdata->beamout);
aw.c:      ch->pcdata->beamout = str_dup (argy);
aw.c:    if (d->character && d->character->pcdata->arena_msg == 0)
aw.c:    if (d->character && d->character->pcdata->arena_msg == 2
aw.c:        if (bground && d->character->pcdata->level > 99)
aw.c:          if (!d->character->pcdata->bgf)
aw.c:              ch->pcdata->no_quit_pk == 0)
aw.c:         /* else if (ch->pcdata->no_quit_pk > 0)
aw.c:          d->character->pcdata->bgf = FALSE;
aw.c:      && victim->pcdata->beamout
aw.c:      && (victim->pcdata->beamout[0] !=
aw.c:        '\0')) act (victim->pcdata->beamout, victim, NULL,
aw.c:      && victim->pcdata->beamin) act (victim->pcdata->beamin,
aw.c:  if (IS_PLAYER (victim) && victim->pcdata->resist_summon == -10)
aw.c:    noibm = victim->pcdata->noibm;
aw.c:    kk = victim->pcdata->kk;
aw.c:    mb = victim->pcdata->mb;
aw.c:    dbs = victim->pcdata->dbs;
aw.c:    dbs = FALSE; gotoxy (victim, 1, victim->pcdata->pagelen);
aw.c:  gotoxy (ch, 1, ch->pcdata->pagelen);
aw.c:      race_info[victim->pcdata->race].name,
aw.c:      victim->pcdata->race,
aw.c:      victim->pcdata->email); 
aw.c:    sprintf (buf, "Rp: %s\n", victim->pcdata->rpwd);
aw.c:      (int) victim->pcdata->played,
aw.c:      victim->pcdata->carry_number,
aw.c:      (int) victim->pcdata->carry_weight,
aw.c:      victim->pcdata->bank);
aw.c:      victim->pcdata->condition[COND_THIRST],
aw.c:      victim->pcdata->condition[COND_FULL],
aw.c:      victim->pcdata->condition[COND_DRUNK],
aw.c:      victim->pcdata->saving_throw);
aw.c:      victim->pcdata->learn, victim->pcdata->practice,
aw.c:      victim->pcdata->security); 
aw.c:      victim->pcdata->alignment, GET_HITROLL (victim));
aw.c:      victim->pcdata->warpoints,
aw.c:      victim->pcdata->totalkills);
aw.c:      victim->pcdata->remort_times,
aw.c:      victim->pcdata->deaths,
aw.c:      victim->pcdata->killpoints);
aw.c:  show_guilds (ch, victim->pcdata->guilds);
aw.c:      victim->pcdata->nat_armor, GET_AC (victim));
aw.c:  if (victim->pcdata->nat_abilities != 0)
aw.c:        natural_abilities (victim->pcdata->nat_abilities));
aw.c:    if (victim->pcdata->beamin)
aw.c:      sprintf (buf, "Beamin : %s\n\r", victim->pcdata->beamin);
aw.c:    if (victim->pcdata->beamout)
aw.c:      sprintf (buf, "Beamout: %s\n\r", victim->pcdata->beamout);
aw.c:        victim->pcdata->level = 1;
aw.c:            sn++) victim->pcdata->
aw.c:          learned[sn] = -100; victim->pcdata->practice = 0;
aw.c:        victim->pcdata->level += 1; advance_level (victim);
aw.c:  if (IS_SET (victim->pcdata->act2, PLR_SILENCE))
aw.c:    REMOVE_BIT (victim->pcdata->act2, PLR_SILENCE);
aw.c:    SET_BIT (victim->pcdata->act2, PLR_SILENCE);
aw.c:  if (dd->character->pcdata->learned[spl->gsn] < 0)
aw.c:    dd->character->pcdata->learned[spl->gsn] = 1;
aw.c:  if (dd->character->pcdata->learned[spl->gsn] > 80)
aw.c:    if (dd->character->pcdata->learned[spl->gsn] > 65)
aw.c:      if (dd->character->pcdata->learned[spl->gsn] > 50)
aw.c:        if (dd->character->pcdata->learned[spl->gsn] > 35)
aw.c:  dd->character->pcdata->learned[spl->gsn] =
aw.c:        (dd->character->pcdata->learned[spl->gsn] + amount));
aw.c:        victim->pcdata->learned[sn] = (value == 0 ? -100 : value);
aw.c:    victim->pcdata->learned[spell->gsn] =
aw.c:    victim->pcdata->practice = value; return;
aw.c:      victim->pcdata->cool_skills ^= COOL_SKILL_VIEW_MOBS;
aw.c:    victim->pcdata->cool_skills |= COOL_SKILL_VIEW_MOBS; return;
aw.c:        if (victim->pcdata->script_flags[ik]
aw.c:            && victim->pcdata->script_flags[ik][0] != '\0'
aw.c:            && !str_cmp (victim->pcdata->script_flags[ik], arg3))
aw.c:          free_string (victim->pcdata->script_flags[ik]);
aw.c:          victim->pcdata->script_flags[ik] = NULL; return;
aw.c:        if (!victim->pcdata->script_flags[ik])
aw.c:        if (!str_cmp (victim->pcdata->script_flags[ik], arg3))
aw.c:        if (victim->pcdata->script_flags[ik]
aw.c:            && victim->pcdata->script_flags[ik][0] !=
aw.c:        victim->pcdata->script_flags[ik] = str_dup (arg3); return;
aw.c:      victim->pcdata->profession_flag ^= bit;
aw.c:    if (IS_SET (victim->pcdata->nat_abilities, AFF_FLYING))
aw.c:      victim->pcdata->nat_abilities -= AFF_FLYING;
aw.c:      victim->pcdata->nat_abilities += AFF_FLYING;
aw.c:    victim->pcdata->remort[REMORT_DAM] = value;
aw.c:    victim->pcdata->remort[REMORT_PRAC] = value;
aw.c:    victim->pcdata->remort[REMORT_HP] = value;
aw.c:    victim->pcdata->remort[REMORT_MOVE] = value;
aw.c:    victim->pcdata->remort[REMORT_MANA] = value;
aw.c:          victim, TO_CHAR); victim->pcdata->remort_times++;
aw.c:      if (victim->pcdata->remort_times)
aw.c:            victim, TO_CHAR); victim->pcdata->remort_times--;
aw.c:        && (victim->pcdata->perm_stat[STR_I] < 35))
aw.c:      victim->pcdata->perm_stat[STR_I]++;
aw.c:      if (victim->pcdata->perm_stat[STR_I] > 3)
aw.c:        victim->pcdata->perm_stat[STR_I]--;
aw.c:        && (victim->pcdata->perm_stat[CON_I] < 35))
aw.c:      victim->pcdata->perm_stat[CON_I]++;
aw.c:      if (victim->pcdata->perm_stat[CON_I] > 3)
aw.c:        victim->pcdata->perm_stat[CON_I]--;
aw.c:        && (victim->pcdata->perm_stat[DEX_I] < 35))
aw.c:      victim->pcdata->perm_stat[DEX_I]++;
aw.c:      if (victim->pcdata->perm_stat[DEX_I] > 3)
aw.c:        victim->pcdata->perm_stat[DEX_I]--;
aw.c:        && (victim->pcdata->perm_stat[INT_I] < 35))
aw.c:      victim->pcdata->perm_stat[INT_I]++;
aw.c:      if (victim->pcdata->perm_stat[INT_I] > 3)
aw.c:        victim->pcdata->perm_stat[INT_I]--;
aw.c:        && (victim->pcdata->perm_stat[WIS_I] < 35))
aw.c:      victim->pcdata->perm_stat[WIS_I]++;
aw.c:      if (victim->pcdata->perm_stat[WIS_I] > 3)
aw.c:            victim, TO_CHAR); victim->pcdata->perm_stat[WIS_I]--;
aw.c:    if (IS_SET (victim->pcdata->nat_abilities, AFF_INFRARED))
aw.c:      victim->pcdata->nat_abilities -= AFF_INFRARED;
aw.c:      victim->pcdata->nat_abilities += AFF_INFRARED;
aw.c:        (victim->pcdata->nat_abilities, AFF_DETECT_HIDDEN))
aw.c:      victim->pcdata->nat_abilities -= AFF_DETECT_HIDDEN;
aw.c:      victim->pcdata->nat_abilities += AFF_DETECT_HIDDEN;
aw.c:        (victim->pcdata->nat_abilities, AFF_DETECT_INVIS))
aw.c:      victim->pcdata->nat_abilities -= AFF_DETECT_INVIS;
aw.c:      victim->pcdata->nat_abilities += AFF_DETECT_INVIS;
aw.c:        (victim->pcdata->nat_abilities, AFF_BREATH_WATER))
aw.c:      victim->pcdata->nat_abilities -= AFF_BREATH_WATER;
aw.c:      victim->pcdata->nat_abilities += AFF_BREATH_WATER;
aw.c:    if (victim->pcdata->complete[i])
aw.c:      victim->pcdata->complete[i] = FALSE;
aw.c:    if (!victim->pcdata->complete[i])
aw.c:      victim->pcdata->complete[i] = TRUE;
aw.c:    if (victim->pcdata->in_progress[i])
aw.c:      victim->pcdata->in_progress[i] = FALSE;
aw.c:    if (!victim->pcdata->in_progress[i])
aw.c:      victim->pcdata->in_progress[i] = TRUE;
aw.c:    if (victim->pcdata->temp_flag[i])
aw.c:      victim->pcdata->temp_flag[i] = FALSE;
aw.c:    if (!victim->pcdata->temp_flag[i])
aw.c:      victim->pcdata->temp_flag[i] = TRUE;
aw.c:    victim->pcdata->complete[i] = TRUE;
aw.c:    victim->pcdata->in_progress[i] = TRUE;
aw.c:    victim->pcdata->temp_flag[i] = TRUE;
aw.c:    victim->pcdata->complete[i] = FALSE;
aw.c:    victim->pcdata->in_progress[i] = FALSE;
aw.c:    victim->pcdata->temp_flag[i] = FALSE;
aw.c:    victim->pcdata->tps = value;
aw.c:    victim->pcdata->tps += value;
aw.c:    victim->pcdata->tps -= value;
aw.c:    victim->pcdata->bank = value;
aw.c:    victim->pcdata->nat_armor = value;
aw.c:    int wp; if (ad) wp = victim->pcdata->warpoints + value;
aw.c:      if (sb) wp = victim->pcdata->warpoints + value;
aw.c:    victim->pcdata->warpoints = wp;
aw.c:    victim->pcdata->deaths = wp;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_TINKER))
aw.c:        victim->pcdata->guilds ^= ACT3_TINKER;
aw.c:        victim->pcdata->guilds ^= ACT3_TINKER;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_WARRIOR))
aw.c:        victim->pcdata->guilds ^= ACT3_WARRIOR;
aw.c:        victim->pcdata->guilds ^= ACT3_WARRIOR;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_HEALER))
aw.c:        victim->pcdata->guilds ^= ACT3_HEALER;
aw.c:        victim->pcdata->guilds ^= ACT3_HEALER;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_WIZARD))
aw.c:        victim->pcdata->guilds ^= ACT3_WIZARD;
aw.c:        victim->pcdata->guilds ^= ACT3_WIZARD;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_THIEFG))
aw.c:        victim->pcdata->guilds ^= ACT3_THIEFG;
aw.c:        victim->pcdata->guilds ^= ACT3_THIEFG;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_RANGER))
aw.c:        victim->pcdata->guilds ^= ACT3_RANGER;
aw.c:        victim->pcdata->guilds ^= ACT3_RANGER;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_ASSASSIN))
aw.c:        victim->pcdata->guilds ^= ACT3_ASSASSIN;
aw.c:        victim->pcdata->guilds ^= ACT3_ASSASSIN;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_PALADIN))
aw.c:        victim->pcdata->guilds ^= ACT3_PALADIN;
aw.c:        victim->pcdata->guilds ^= ACT3_PALADIN;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_ELEMENTAL))
aw.c:        victim->pcdata->guilds ^= ACT3_ELEMENTAL;
aw.c:        victim->pcdata->guilds ^= ACT3_ELEMENTAL;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_BATTLEMAGE))
aw.c:        victim->pcdata->guilds ^= ACT3_BATTLEMAGE;
aw.c:        victim->pcdata->guilds ^= ACT3_BATTLEMAGE;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_MARAUDER))
aw.c:        victim->pcdata->guilds ^= ACT3_MARAUDER;
aw.c:        victim->pcdata->guilds ^= ACT3_MARAUDER;
aw.c:      if (IS_SET (victim->pcdata->guilds, ACT3_NECROMANCER))
aw.c:        victim->pcdata->guilds ^= ACT3_NECROMANCER;
aw.c:        victim->pcdata->guilds ^= ACT3_NECROMANCER;
aw.c:    victim->pcdata->perm_stat[STR_I] = value; return;
aw.c:    victim->pcdata->perm_stat[CON_I] = value; return;
aw.c:    victim->pcdata->perm_stat[DEX_I] = value; return;
aw.c:    victim->pcdata->perm_stat[INT_I] = value; return;
aw.c:    victim->pcdata->perm_stat[WIS_I] = value; return;
aw.c:    victim->pcdata->killpoints = value; return;
aw.c:    victim->pcdata->sex = value; return;
aw.c:    victim->pcdata->race = value; return;
aw.c:    victim->pcdata->practice = value; return;
aw.c:    victim->pcdata->learn = value; return;
aw.c:    victim->pcdata->alignment = value;
aw.c:    victim->pcdata->condition[COND_THIRST] = value; return;
aw.c:    victim->pcdata->condition[COND_DRUNK] = value; return;
aw.c:    victim->pcdata->condition[COND_FULL] = value; return;
aw.c:    if (victim->pcdata->short_descr
aw.c:        && victim->pcdata->short_descr !=
aw.c:        NULL) free_string (victim->pcdata->short_descr);
aw.c:    victim->pcdata->short_descr = str_dup (arg3); return;
aw.c:    ch->desc->pString = &victim->pcdata->long_descr; return;
aw.c:      victim->pcdata->complete[value] = 1;
aw.c:      victim->pcdata->complete[value] = 0;
aw.c:                      ((CHAR_DATA *) d->pEdit)->pcdata->name);
aw.c:  if (ch->pcdata->level > 111) ch->pcdata->level = 111;
aw.c:    ch->pcdata->level = 111;
aw.c:  oldinvis = ch->pcdata->wizinvis; if (arg[0] == '\0')
aw.c:    ch->pcdata->wizinvis =
aw.c:      ch->pcdata->wizinvis == 0 ? LEVEL (ch) : 0;
aw.c:    ch->pcdata->wizinvis = atoi (arg);
aw.c:  ch->pcdata->wizinvis =
aw.c:    ch->pcdata->wizinvis <=
aw.c:    LEVEL (ch) ? ch->pcdata->wizinvis : LEVEL (ch);
aw.c:  if (ch->pcdata->wizinvis <= LEVEL_IMMORTAL
aw.c:      && ch->pcdata->wizinvis != 0) ch->pcdata->wizinvis = 0;
aw.c:  if (ch->pcdata->wizinvis == oldinvis
aw.c:      || (ch->pcdata->wizinvis >= LEVEL_IMMORTAL
aw.c:  if (ch->pcdata->wizinvis < oldinvis
aw.c:      && ch->pcdata->wizinvis == 0)
aw.c:    if (ch->pcdata->wizinvis >= LEVEL_IMMORTAL
aw.c:        && ch->pcdata->wizinvis > oldinvis)
aw.c:      if (IS_SET (ch->pcdata->act2, PLR_HOLYLAG))
aw.c:        REMOVE_BIT (ch->pcdata->act2, PLR_HOLYLAG);
aw.c:        SET_BIT (ch->pcdata->act2, PLR_HOLYLAG);
bank.c:	   ch->pcdata->bank);
bank.c:	  if (ch->pcdata->storage[k] != NULL)
bank.c:					 (ch->pcdata->storage[k],
bank.c:		       ch->pcdata->storage[k]->cost / STOREDIV);
bank.c:   if (ch->pcdata->storage[k]->pIndexData->vnum==obj->pIndexData->vnum) 
bank.c:  ch->pcdata->storage[k] = obj;
bank.c:	  if (ch->pcdata->storage[k] != NULL)
bank.c:					 (ch->pcdata->storage[k],
bank.c:		       ch->pcdata->storage[k]->cost / STOREDIV);
bank.c:      if (ch->pcdata->storage[itemnum] == NULL)
bank.c:      obj = ch->pcdata->storage[itemnum];
bank.c:	  if (ch->pcdata->storage[k] != NULL
bank.c:	      && is_name (arg1, ch->pcdata->storage[k]->pIndexData->name))
bank.c:	      obj = ch->pcdata->storage[k];
bank.c:      && ch->pcdata->bank < (unsigned long) remove_cost)
bank.c:    ch->pcdata->bank -= remove_cost;
bank.c:  ch->pcdata->storage[k] = NULL;
bank.c:      ch->pcdata->bank += amount;
bank.c:      sprintf (buf, "Your new balance is: %ld copper.\n\r", ch->pcdata->bank);
bank.c:  ch->pcdata->bank += amount;
bank.c:  sprintf (buf, "Your new balance is: %ld copper.\n\r", ch->pcdata->bank);
bank.c:      amount = ch->pcdata->bank;
bank.c:      ch->pcdata->bank -= amount;
bank.c:	       ch->pcdata->bank);
bank.c:  if (amount < 1 || (unsigned long) amount > ch->pcdata->bank)
bank.c:  ch->pcdata->bank -= amount;
bank.c:	   ch->pcdata->bank);
bank.c:      ch->pcdata->bank += amount;
bank.c:      ch->pcdata->bank -= amount;
bank.c:      ch->pcdata->bank -= amount;
bank.c:      ch->pcdata->bank -= amount;
bank.c:      ch->pcdata->bank += amount;
buysell.c:	if (ch->pcdata->number_pets > 1)
buysell.c:	if (ch->pcdata->number_pets > 2)
buysell.c:	if (ch->pcdata->number_pets > 3)
buysell.c:      if (ch->pcdata->number_pets > 4)
buysell.c:      ch->pcdata->number_pets++;
channels.c:	   ch->pcdata->wizinvis > 10 ? "I" : "V", to, LEVEL (ch), NAME (ch),
channels.c:  if (ch->pcdata->wizinvis > lvl)
channels.c:	   color_table[ch->pcdata->colors[COLOR_TELL]].act_code, name, input);
channels.c:      if (ch->pcdata->last_tells[ch->pcdata->tell_counter])
channels.c:	  free (ch->pcdata->last_tells[ch->pcdata->tell_counter]);
channels.c:      ch->pcdata->last_tells[ch->pcdata->tell_counter] =
channels.c:      strcpy (ch->pcdata->last_tells[ch->pcdata->tell_counter], buf);
channels.c:      ch->pcdata->tell_counter++;
channels.c:      if (ch->pcdata->tell_counter > 14)
channels.c:	ch->pcdata->tell_counter = 0;
channels.c:	       (ch->pcdata->wizinvis > 10 ? "I" : "V"), showto, LEVEL (ch),
channels.c:		   (dd->character->pcdata->wizinvis > 10 ? "I" : "V"), showto,
channels.c:		   (dd->character->pcdata->wizinvis > 10 ? "I" : "V"), showto,
channels.c:		   (dd->character->pcdata->wizinvis > 10 ? "I" : "V"), showto,
channels.c:		       ch->pcdata->chan_color[channel], argy);
channels.c:		       ch->pcdata->chan_color[channel], can_see (ch,
channels.c:	  if (ch->pcdata->clan_talks[ch->pcdata->clan_counter])
channels.c:	      free_string (ch->pcdata->clan_talks[ch->pcdata->clan_counter]);
channels.c:	  ch->pcdata->clan_talks[ch->pcdata->clan_counter] =
channels.c:	  strcpy (ch->pcdata->clan_talks[ch->pcdata->clan_counter], buf);
channels.c:	  ch->pcdata->clan_counter++;
channels.c:	  if (ch->pcdata->clan_counter > 14)
channels.c:	    ch->pcdata->clan_counter = 0;
channels.c:  for (i = ch->pcdata->clan_counter + 1; i != ch->pcdata->clan_counter; i++)
channels.c:      if (ch->pcdata->clan_talks[i])
channels.c:	act (ch->pcdata->clan_talks[i], ch, NULL, ch, TO_CHAR);
channels.c:      if (IS_PLAYER (to) && to->pcdata->quiet > 0)
channels.c:      if (IS_PLAYER (to) && IS_SET (to->pcdata->chan_ignore, (1 << channel)))
channels.c:	       to->pcdata->chan_color[channel], capitalize (name),
channels.c:	       argy, to->pcdata->chan_color[channel], (is_al ? "'" : ""));
channels.c:  if (IS_PLAYER (ch) && ch->pcdata->quiet > 0)
channels.c:  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_SILENCE))
channels.c:      if (!IS_SET (ch->pcdata->chan_ignore, (1 << channel)))
channels.c:	ch->pcdata->chan_ignore ^= (1 << channel);
channels.c:      if (IS_SET (ch->pcdata->chan_ignore, (1 << channel)))
channels.c:	ch->pcdata->chan_ignore ^= (1 << channel);
channels.c:  if (IS_SET (ch->pcdata->chan_ignore, (1 << channel)))
channels.c:      ch->pcdata->chan_ignore ^= (1 << channel);
channels.c:	       (LEVEL (ch) > 100 ? ind : ""), ch->pcdata->chan_color[channel],
channels.c:	       ch->pcdata->chan_color[channel], (is_al ? "'" : ""));
channels.c:      /* strcpy(bb,java_color(ch->pcdata->chan_color[channel]));
channels.c:	       (LEVEL (ch) > 100 ? ind : ""), ch->pcdata->chan_color[channel],
channels.c:	       ch->pcdata->chan_color[channel], (is_al ? "'" : ""));
channels.c:		(ch->pcdata->wizinvis >= LEVEL_IMMORTAL
channels.c:	       ch->pcdata->chan_color[channel], argy);
channels.c:      if ((IS_SET (to->pcdata->act3, ACT3_TAP)) && LEVEL (ch) < 100
channels.c:      if (IS_PLAYER (to) && to->pcdata->quiet > 0)
channels.c:      if (IS_PLAYER (to) && IS_SET (to->pcdata->chan_ignore, (1 << channel)))
channels.c:		   to->pcdata->chan_color[channel], TPERS (ch, to),
channels.c:		   to->pcdata->chan_color[channel], (is_al ? "'" : ""));
channels.c:	  /*        strcpy(bb,java_color(to->pcdata->chan_color[channel]));
channels.c:		   to->pcdata->chan_color[channel], TPERS (ch, to),
channels.c:		   to->pcdata->chan_color[channel], (is_al ? "'" : ""));
channels.c:	  && !d->character->pcdata->quiet)
channels.c:	  if (ch->pcdata->ignore[k])
channels.c:	      sprintf (general_use, "+= %s =+\n\r", ch->pcdata->ignore[k]);
channels.c:      if (ch->pcdata->ignore[k] && !str_cmp (ch->pcdata->ignore[k], argy))
channels.c:	  free_string (ch->pcdata->ignore[k]);
channels.c:	  ch->pcdata->ignore[k] = NULL;
channels.c:      if (!ch->pcdata->ignore[k])
channels.c:	  ch->pcdata->ignore[k] = str_dup (capitalize (argy));
channels.c:      if (!ch->pcdata->ignore[k])
channels.c:      if (!str_prefix (ch->pcdata->ignore[k], NAME (victim)))
channels.c:      if (IS_SET (dd->character->pcdata->deaf, CHANNEL_NOTIFY))
channels.c:      if (IS_SET (ch->pcdata->deaf, CHANNEL_YELL))
channels.c:  /*if ( IS_PLAYER(ch) && IS_SET(ch->pcdata->act2, PLR_SILENCE) ) {
channels.c:	       color_table[ch->pcdata->colors[COLOR_SAY]].code, verb, conv,
channels.c:		color_table[ch->pcdata->colors[COLOR_SAY]].code), verb, conv);
channels.c:		color_table[mob->pcdata->colors[COLOR_SAY]].code), verb,
channels.c:		       color_table[mob->pcdata->colors[COLOR_SAY]].code, verb,
channels.c:      for (i = ch->pcdata->tell_counter + 1; i != ch->pcdata->tell_counter;
channels.c:	  if (ch->pcdata->last_tells[i])
channels.c:	    act (ch->pcdata->last_tells[i], ch, NULL, ch, TO_CHAR);
channels.c:  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_SILENCE))
channels.c:  if (IS_PLAYER (ch) && ch->pcdata->quiet)
channels.c:  if (IS_PLAYER (victim) && victim->pcdata->quiet == 2)
channels.c:	       color_table[ch->pcdata->colors[COLOR_TELL]].code,
channels.c:		color_table[ch->pcdata->colors[COLOR_TELL]].act_code), argy);
channels.c:	       color_table[victim->pcdata->colors[COLOR_TELL]].code, name,
channels.c:		color_table[victim->pcdata->colors[COLOR_TELL]].act_code),
channels.c:		color_table[victim->pcdata->colors[COLOR_TELL]].act_code),
channels.c:      if (ch->pcdata->last_tells[ch->pcdata->tell_counter])
channels.c:	  free (ch->pcdata->last_tells[ch->pcdata->tell_counter]);
channels.c:      ch->pcdata->last_tells[ch->pcdata->tell_counter] =
channels.c:      strcpy (ch->pcdata->last_tells[ch->pcdata->tell_counter], buf);
channels.c:      ch->pcdata->tell_counter++;
channels.c:      if (ch->pcdata->tell_counter > 14)
channels.c:	ch->pcdata->tell_counter = 0;
channels.c:  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_SILENCE))
channels.c:  if (IS_PLAYER (victim) && victim->pcdata->quiet == 2)
channels.c:	   (IS_MOB (ch) ? "$7" : color_table[ch->pcdata->colors[COLOR_TELL]].
channels.c:      if (ch->pcdata->last_tells[ch->pcdata->tell_counter])
channels.c:	  free (ch->pcdata->last_tells[ch->pcdata->tell_counter]);
channels.c:      ch->pcdata->last_tells[ch->pcdata->tell_counter] =
channels.c:      strcpy (ch->pcdata->last_tells[ch->pcdata->tell_counter], buf);
channels.c:      ch->pcdata->tell_counter++;
channels.c:      if (ch->pcdata->tell_counter > 14)
channels.c:	ch->pcdata->tell_counter = 0;
channels.c:  if (!ch->pcdata->quiet)
channels.c:      ch->pcdata->quiet = 1;
channels.c:      ch->pcdata->quiet = 0;
channels.c:  for (i = ch->pcdata->glog_count + 1; i != ch->pcdata->glog_count; i++)
channels.c:      if (ch->pcdata->glog[i])
channels.c:	  sprintf (buffy, "\x1b[32;1m%s", ch->pcdata->glog[i]);
channels.c:       color_table[ch->pcdata->colors[COLOR_TELL]].code), new);
channels.c:         color_table[gch->pcdata->colors[COLOR_TELL]].code), NAME (ch),
channels.c:      if (gch->pcdata->glog[gch->pcdata->glog_count])
channels.c:        free_string (gch->pcdata->glog[gch->pcdata->glog_count]);
channels.c:      gch->pcdata->glog[gch->pcdata->glog_count] = malloc (strlen (buffy) + 1);
channels.c:      strcpy (gch->pcdata->glog[gch->pcdata->glog_count], buffy);
channels.c:      gch->pcdata->glog_count++;
channels.c:      if (gch->pcdata->glog_count >= MAX_SCROLLBACK)
channels.c:        gch->pcdata->glog_count = 0;
channels.c:  if (IS_SET (ch->pcdata->act3, ACT3_TAP))
channels.c:      REMOVE_BIT (ch->pcdata->act3, ACT3_TAP);
channels.c:  if (number_range (1, 100) < ch->pcdata->learned[gsn_tap])
channels.c:      SET_BIT (ch->pcdata->act3, ACT3_TAP);
char.c:  bzero (&pcdata->glog, sizeof (pcdata->glog));
char.c:  bzero (&pcdata->glog_count, sizeof (pcdata->glog_count));
char.c:  pcdata->data_type = K_PC;
char.c:      pcdata->convo[k] = 0;
char.c:      pcdata->pet_temp[k] = 0;
char.c:      pcdata->pet_move[k] = 0;
char.c:      pcdata->pet_hps[k] = 0;
char.c:    pcdata->show_lev = TRUE;
char.c:    free_string (pcdata->name);
char.c:    pcdata->name = NULL;
char.c:    if (pcdata->oldgrep != NULL)
char.c:      free_string (pcdata->oldgrep);
char.c:      pcdata->oldgrep = NULL;
char.c:    free_string (pcdata->short_descr);
char.c:    pcdata->short_descr = &str_empty[0];
char.c:    free_string (pcdata->long_descr);
char.c:    pcdata->long_descr = &str_empty[0];
char.c:    free_string (pcdata->description);
char.c:    pcdata->description = &str_empty[0];
char.c:    pcdata->chan_ignore = 0;
char.c:    pcdata->implants_1 = 0;
char.c:    pcdata->implants_2 = 0;
char.c:      strcpy (pcdata->chan_color[k], c->color);
char.c:    pcdata->bounty = 0;
char.c:    pcdata->transport_quest = 0;
char.c:    pcdata->cool_skills = 0;
char.c:    pcdata->security = 9;
char.c:    pcdata->learn = 1;
char.c:    pcdata->pray_points = 0;
char.c:    pcdata->practice = 1;
char.c:    pcdata->logon = current_time;
char.c:    pcdata->played = 0;
char.c:    pcdata->wizinvis = 0;
char.c:    pcdata->hours_expired = FALSE;
char.c:    pcdata->just_investigated = 0;
char.c:    pcdata->prompt = 0;
char.c:    pcdata->hours_purchased = 0;
char.c:    pcdata->profession_flag = 0;
char.c:    pcdata->colors[COLOR_CHAT] = 14;
char.c:    pcdata->colors[COLOR_YELL] = 12;
char.c:    pcdata->colors[COLOR_CLANTALK] = 10;
char.c:    pcdata->colors[COLOR_IMMTALK] = 11;
char.c:    pcdata->colors[COLOR_GODTALK] = 12;
char.c:    pcdata->colors[COLOR_SAY] = 15;
char.c:    pcdata->colors[COLOR_TELL] = 10;
char.c:    pcdata->rprompt = NULL;
char.c:    pcdata->raceflag = 0;
char.c:    pcdata->pwd = &str_empty[0];
char.c:    pcdata->rpwd = &str_empty[0];
char.c:    pcdata->beamin = &str_empty[0];
char.c:    pcdata->beamout = &str_empty[0];
char.c:    pcdata->title = &str_empty[0];
char.c:      pcdata->perm_stat[k] = 12;
char.c:      pcdata->tmp_stat[k] = 0;
char.c:      pcdata->mod_stat[k] = 0;
char.c:    pcdata->temp = NULL;
char.c:    pcdata->totalkills = 0;
char.c:    pcdata->killpoints = 0;
char.c:    pcdata->deaths = 0;
char.c:    pcdata->resist_summon = 0;
char.c:    pcdata->plus_hide = 0;
char.c:    pcdata->plus_sneak = 0;
char.c:    pcdata->plus_kick = 0;
char.c:    pcdata->n_mana = 0;
char.c:    pcdata->n_max_mana = 0;
char.c:    pcdata->warpoints = 0;
char.c:    pcdata->challenge_on = TRUE;
char.c:    pcdata->remort_times = 0;
char.c:      pcdata->remort[k] = 0;
char.c:    pcdata->arena_msg = TRUE;
char.c:    pcdata->challenged = FALSE;
char.c:    pcdata->challenge_time = 0;
char.c:    pcdata->challenged_by = NULL;
char.c:    pcdata->tickcounts = 0;
char.c:    pcdata->email[0] = '\0';
char.c:    pcdata->new_exp = FALSE;
char.c:    pcdata->tps = 0;
char.c:    pcdata->no_spam = 0;
char.c:    pcdata->bgf = FALSE;
char.c:    pcdata->questflag = 0;
char.c:    pcdata->nat_armor = 100;
char.c:    pcdata->nat_abilities = 0;
char.c:    pcdata->guilds = 0;
char.c:    pcdata->no_quit = 0;
char.c:    pcdata->jail_served = 0;
char.c:    pcdata->warned = 0;
char.c:    pcdata->number_pets = 0;
char.c:    pcdata->pagelen = 24;
char.c:    pcdata->condition[COND_THIRST] = 48;
char.c:    pcdata->condition[COND_FULL] = 48;
char.c:    pcdata->condition[COND_DRUNK] = 0;
char.c:    pcdata->bank = 0;
char.c:    pcdata->quiet = 0;
char.c:    pcdata->read_notes = NULL;
char.c:    pcdata->read_polls = NULL;
char.c:      pcdata->storage[k] = NULL;
char.c:      pcdata->ignore[k] = NULL;
char.c:      pcdata->complete[k] = 0;
char.c:      pcdata->in_progress[k] = 0;
char.c:      pcdata->temp_flag[k] = 0;
char.c:      if (pcdata->script_flags[k])
char.c:        free_string (pcdata->script_flags[k]);
char.c:        pcdata->script_flags[k] = NULL;
char.c:      pcdata->killed_mobs[k] = 0;
char.c:      pcdata->trophy_name[k][0] = '\0';
char.c:      pcdata->trophy_times[k] = 0;
char.c:      pcdata->trophy_level[k] = 0;
char.c:      pcdata->alias[k] = NULL;
char.c:      pcdata->aliasname[k] = NULL;
char.c:      pcdata->learned[k] = -100;
char.c:           this->npcdata->next = npcdata_free;
char.c:    if (pcdata->challenged_by != NULL)
char.c:      free_string (pcdata->challenged_by);
char.c:      pcdata->challenged_by = NULL;
char.c:      if (pcdata->ignore[i])
char.c:        free_string (pcdata->ignore[i]);
char.c:      pcdata->ignore[i] = NULL;
char.c:    pcdata->prompt = 0;
char.c:    pcdata->bank = 0;
char.c:      if (pcdata->storage[i] != NULL)
char.c:        free_it (pcdata->storage[i]);
char.c:      pcdata->storage[i] = NULL;
char.c:    if (pcdata->challenged_by != NULL)
char.c:      free_string (pcdata->challenged_by);
char.c:    pcdata->challenged_by = NULL;
char.c:    if (pcdata->rprompt != NULL)
char.c:      free_string (pcdata->rprompt);
char.c:    pcdata->rprompt = NULL;
char.c:    if (pcdata->rpwd != NULL)
char.c:      free_string (pcdata->rpwd);
char.c:    pcdata->rpwd = NULL;
char.c:    if (pcdata->pwd != NULL)
char.c:      free_string (pcdata->pwd);
char.c:    pcdata->pwd = NULL;
char.c:    if (pcdata->beamin != NULL)
char.c:      free_string (pcdata->beamin);
char.c:    pcdata->beamin = NULL;
char.c:    if (pcdata->beamout != NULL)
char.c:      free_string (pcdata->beamout);
char.c:    pcdata->beamout = NULL;
char.c:    if (pcdata->title != NULL)
char.c:      free_string (pcdata->title);
char.c:    pcdata->title = NULL;
char.c:      if (pcdata->last_tells[i])
char.c:        free (pcdata->last_tells[i]);
char.c:        pcdata->last_tells[i] = NULL;
char.c:      if (pcdata->clan_talks[i])
char.c:        free (pcdata->clan_talks[i]);
char.c:        pcdata->clan_talks[i] = NULL;
char.c:    pcdata->tell_counter = 0;
char.c:    pcdata->clan_counter = 0;
char.c:      if (pcdata->action[i] != NULL && pcdata->actionname[i] != NULL)
char.c:        free_string (pcdata->action[i]);
char.c:        free_string (pcdata->actionname[i]);
char.c:        pcdata->action[i] = NULL;
char.c:        pcdata->actionname[i] = NULL;
char.c:      if (pcdata->alias[i] != NULL && pcdata->aliasname[i] != NULL)
char.c:        free_string (pcdata->alias[i]);
char.c:        free_string (pcdata->aliasname[i]);
char.c:        pcdata->alias[i] = NULL;
char.c:        pcdata->aliasname[i] = NULL;
char.c:    pcdata->next = pcdata_free;
char.c: return ch->pcdata->guildstats[num];
clan.c:  if (str_cmp (ch->pcdata->name, ClanData->leader))
clan.c:  if (str_cmp (ch->pcdata->name, ClanData->leader))
clan.c:  if (str_cmp (ch->pcdata->name, ClanData->leader))
clan.c:     ((IS_SET (victim->pcdata->raceflag, RC_EVILRACE)
clan.c:       && !IS_SET (ch->pcdata->raceflag, RC_EVILRACE))
clan.c:      || (!IS_SET (victim->pcdata->raceflag, RC_EVILRACE)
clan.c:	  && IS_SET (ch->pcdata->raceflag, RC_EVILRACE))));
climb.c:      move -= ch->pcdata->carry_number - get_curr_str (ch);
climb.c:  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act3, ACT3_MAPPING) &&
climb.c:      !IS_SET (ch->pcdata->act3, ACT3_DISABLED))
climb.c:      REMOVE_BIT (ch->pcdata->act3, ACT3_MAPPING);
comm.c:        && !str_cmp (d->character->pcdata->name, tch->pcdata->name))
comm.c:        ch->pcdata->storage[i] = NULL;
comm.c:        ch->pcdata->learned[i] = -100;
comm.c:          if (d->character->pcdata->tickcounts > 0)
comm.c:            d->character->pcdata->tickcounts--;
comm.c:          if (d->character->pcdata->tickcounts < 0)
comm.c:            d->character->pcdata->tickcounts = 0;
comm.c:              d->character->pcdata && !IS_SET (d->character->pcdata->act2, PLR_HOLYLAG))
comm.c:          if (d->character && d->character->in_room && d->character->pcdata && ch->pcdata->tickcounts < 1)
comm.c:            if (ch->position == POSITION_INVEST && ch->pcdata->temp)
comm.c:              do_actual_investigate (ch, ch->pcdata->temp->temp_string);
comm.c:            if (ch->position == POSITION_BACKSTAB && ch->pcdata->temp)
comm.c:              do_actual_backstab (ch, ch->pcdata->temp->temp_string);
comm.c:            if (ch->position == POSITION_SEARCHING && ch->pcdata->temp)
comm.c:              do_actual_search (ch, ch->pcdata->temp->temp_string);
comm.c:            if (ch->pcdata->voting_on == 999)
comm.c:              ch->pcdata->voting_on = 10;
comm.c:            if (ch->position == POSITION_CASTING && ch->pcdata->temp)
comm.c:              do_actual_cast (ch, ch->pcdata->temp->temp_string);
comm.c:        if (d->character && d->character->pcdata && d->character->pcdata->tickcounts > 0)
comm.c:              d->character->pcdata->tickcounts = 0;
comm.c:              d->character->pcdata->tickcounts = 0;
comm.c:              d->character->pcdata->tickcounts = 0;
comm.c:              d->character->pcdata->tickcounts = 0;
comm.c:              d->character->pcdata->tickcounts = 0;
comm.c:    sprintf (log_buf, "Closing link to %s.", ch->pcdata->name);
comm.c:      if (d->character->pcdata->aliasname[k] &&
comm.c:          d->character->pcdata->aliasname[k][0] != '\0' &&
comm.c:          d->character->pcdata->alias[k] &&
comm.c:          d->character->pcdata->alias[k][0] != '\0')
comm.c:        if (d->character->pcdata->aliasname[k] && cmd
comm.c:            && !str_cmp (cmd, d->character->pcdata->aliasname[k]))
comm.c:          strsub (d->inbuf, cmd, d->character->pcdata->alias[k]);
comm.c:            SET_BIT (d->character->pcdata->act2, PLR_SILENCE);
comm.c:  signed short ts = race_info[ch->pcdata->race].bonus[STR_I];
comm.c:  signed short tc = race_info[ch->pcdata->race].bonus[CON_I];
comm.c:  signed short td = race_info[ch->pcdata->race].bonus[DEX_I];
comm.c:  signed short tz = race_info[ch->pcdata->race].bonus[INT_I];
comm.c:  signed short tw = race_info[ch->pcdata->race].bonus[WIS_I];
comm.c:	   ch->pcdata->perm_stat[STR_I], ch->pcdata->perm_stat[CON_I],
comm.c:	   ch->pcdata->perm_stat[DEX_I], ch->pcdata->perm_stat[INT_I],
comm.c:	   ch->pcdata->perm_stat[WIS_I]);
comm.c:	   race_info[ch->pcdata->race].limits[0],
comm.c:	   race_info[ch->pcdata->race].limits[4],
comm.c:	   race_info[ch->pcdata->race].limits[3],
comm.c:	   race_info[ch->pcdata->race].limits[1],
comm.c:	   race_info[ch->pcdata->race].limits[2], ch->pcdata->pray_points);
comm.c:	  if (!d->java && d->connected != CON_RWHO && (!ch || (IS_SET (ch->pcdata->act2, PLR_BLANK)	
comm.c:       && ( !IS_SET(ch->pcdata->act3,ACT3_MAPPING) || IS_SET(ch->pcdata->act3,ACT3_DISABLED)) )))
comm.c:	  if (ch && !IS_JAVA (ch) && IS_SET (ch->pcdata->act2, PLR_PROMPT)
comm.c:	      && IS_SET (d->character->pcdata->act2, PLR_TELNET_GA)
comm.c:      sprintf (minbuf, "\x1B[%d;1f\x1B[K", d->character->pcdata->pagelen);
comm.c:      if (IS_SET (d->character->pcdata->act2, PLR_BLANKPROMPT)
comm.c:	  && IS_SET (d->character->pcdata->act2, PLR_ANSI))
comm.c:	  REMOVE_BIT (d->snoop_by->character->pcdata->act2, PLR_ANSI);
comm.c:	SET_BIT (d->snoop_by->character->pcdata->act2, PLR_ANSI);
comm.c:      && !IS_SET (d->character->pcdata->act2, PLR_ANSI))
comm.c:   if (d->character->pcdata->actionname[i] &&
comm.c:   d->character->pcdata->actionname[i][0]!='\0' &&
comm.c:   d->character->pcdata->action[i]) {
comm.c:   check_action(d,d->character->pcdata->actionname[i],
comm.c:   d->character->pcdata->action[i],
comm.c:                           (race_info[(ch)->pcdata->race].bonus[STR_I]>2) + \
comm.c:                                race_info[(ch)->pcdata->race].bonus[STR_I]))
comm.c:                           (race_info[(ch)->pcdata->race].bonus[CON_I]>2) + \
comm.c:                               race_info[(ch)->pcdata->race].bonus[CON_I]))
comm.c:                           (race_info[(ch)->pcdata->race].bonus[DEX_I]>2) + \
comm.c:                               race_info[(ch)->pcdata->race].bonus[DEX_I]))
comm.c:                           (race_info[(ch)->pcdata->race].bonus[INT_I]>2) + \
comm.c:                               race_info[(ch)->pcdata->race].bonus[INT_I]))
comm.c:                           (race_info[(ch)->pcdata->race].bonus[WIS_I]>2) + \
comm.c:                               race_info[(ch)->pcdata->race].bonus[WIS_I]))
comm.c:      ch->pcdata->perm_stat[i] = 0;
comm.c:      ch->pcdata->tmp_stat[i] = 0;
comm.c:  switch (ch->pcdata->q[0])
comm.c:	ch->pcdata->tmp_stat[STR_I] = 5;
comm.c:	ch->pcdata->tmp_stat[INT_I] = 3;
comm.c:	ch->pcdata->tmp_stat[WIS_I] = 2;
comm.c:	ch->pcdata->tmp_stat[DEX_I] = number_range (3, 5);
comm.c:	ch->pcdata->tmp_stat[CON_I] = number_range (6, 7);
comm.c:	ch->pcdata->tmp_stat[STR_I] = 2;
comm.c:	ch->pcdata->tmp_stat[INT_I] = 5;
comm.c:	ch->pcdata->tmp_stat[WIS_I] = 4;
comm.c:	ch->pcdata->tmp_stat[DEX_I] = number_range (4, 6);
comm.c:	ch->pcdata->tmp_stat[CON_I] = number_range (4, 7);
comm.c:	ch->pcdata->tmp_stat[STR_I] = 3;
comm.c:	ch->pcdata->tmp_stat[INT_I] = 4;
comm.c:	ch->pcdata->tmp_stat[WIS_I] = 5;
comm.c:	ch->pcdata->tmp_stat[DEX_I] = number_range (3, 6);
comm.c:	ch->pcdata->tmp_stat[CON_I] = number_range (3, 7);
comm.c:	ch->pcdata->tmp_stat[STR_I] = 3;
comm.c:	ch->pcdata->tmp_stat[INT_I] = 3;
comm.c:	ch->pcdata->tmp_stat[WIS_I] = 3;
comm.c:	ch->pcdata->tmp_stat[DEX_I] = number_range (5, 6);
comm.c:	ch->pcdata->tmp_stat[CON_I] = number_range (4, 7);
comm.c:	ch->pcdata->tmp_stat[STR_I] = 4;
comm.c:	ch->pcdata->tmp_stat[INT_I] = number_range (2, 4);
comm.c:	ch->pcdata->tmp_stat[WIS_I] = 4;
comm.c:	ch->pcdata->tmp_stat[DEX_I] = number_range (4, 7);
comm.c:	ch->pcdata->tmp_stat[CON_I] = number_range (4, 6);
comm.c:	ch->pcdata->tmp_stat[STR_I] = 4;
comm.c:	ch->pcdata->tmp_stat[INT_I] = 3;
comm.c:	ch->pcdata->tmp_stat[WIS_I] = 3;
comm.c:	ch->pcdata->tmp_stat[DEX_I] = number_range (4, 5);
comm.c:	ch->pcdata->tmp_stat[CON_I] = number_range (4, 6);
comm.c:    }				// end switch ch->pcdata->q[0]
comm.c:  switch (ch->pcdata->q[1])
comm.c:	ch->pcdata->tmp_stat[STR_I] += 2;
comm.c:	ch->pcdata->tmp_stat[INT_I] += 2;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 2;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[CON_I] += 2;
comm.c:	ch->pcdata->tmp_stat[STR_I] += 3;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[CON_I] += 4;
comm.c:	ch->pcdata->tmp_stat[STR_I] += 2;
comm.c:	ch->pcdata->tmp_stat[INT_I] += 2;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 3;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[INT_I] += 4;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 2;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 3;
comm.c:	ch->pcdata->tmp_stat[STR_I] += 2;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 2;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[CON_I] += 3;
comm.c:	ch->pcdata->tmp_stat[STR_I] += 2;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 1;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[CON_I] += 3;
comm.c:	ch->pcdata->tmp_stat[INT_I] += 1;
comm.c:    }				// end switch ch->pcdata->q[1]
comm.c:  switch (ch->pcdata->q[2])
comm.c:	ch->pcdata->tmp_stat[STR_I] += 2;
comm.c:	ch->pcdata->tmp_stat[INT_I] += 2;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 2;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[CON_I] += 2;
comm.c:	ch->pcdata->tmp_stat[STR_I] += 3;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 3;
comm.c:	ch->pcdata->tmp_stat[CON_I] += 4;
comm.c:	ch->pcdata->tmp_stat[STR_I] += 1;
comm.c:	ch->pcdata->tmp_stat[INT_I] += 3;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 4;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[INT_I] += 3;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 3;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 3;
comm.c:	ch->pcdata->tmp_stat[STR_I] += 2;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 1;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[CON_I] += 3;
comm.c:	ch->pcdata->tmp_stat[STR_I] += 1;
comm.c:	ch->pcdata->tmp_stat[WIS_I] += 3;
comm.c:	ch->pcdata->tmp_stat[DEX_I] += 2;
comm.c:	ch->pcdata->tmp_stat[CON_I] += number_range (2, 3);
comm.c:	ch->pcdata->tmp_stat[INT_I] += 1;
comm.c:    }				// end switch ch->pcdata->q[2]
comm.c:  switch (ch->pcdata->q[3])
comm.c:	ch->pcdata->tmp_stat[STR_I] += number_range (7, 11);
comm.c:	ch->pcdata->tmp_stat[INT_I] += number_range (3, 5);
comm.c:	ch->pcdata->tmp_stat[WIS_I] += number_range (4, 8);
comm.c:	ch->pcdata->tmp_stat[DEX_I] += number_range (7, 10);
comm.c:	ch->pcdata->tmp_stat[CON_I] += number_range (7, 10);
comm.c:	ch->pcdata->tmp_stat[STR_I] += number_range (4, 7);
comm.c:	ch->pcdata->tmp_stat[INT_I] += number_range (8, 12);
comm.c:	ch->pcdata->tmp_stat[DEX_I] += number_range (6, 11);
comm.c:	ch->pcdata->tmp_stat[WIS_I] += number_range (7, 10);
comm.c:	ch->pcdata->tmp_stat[CON_I] += number_range (3, 6);
comm.c:	ch->pcdata->tmp_stat[STR_I] += number_range (5, 8);
comm.c:	ch->pcdata->tmp_stat[INT_I] += number_range (5, 9);
comm.c:	ch->pcdata->tmp_stat[DEX_I] += number_range (6, 10);
comm.c:	ch->pcdata->tmp_stat[WIS_I] += number_range (5, 8);
comm.c:	ch->pcdata->tmp_stat[CON_I] += number_range (5, 9);
comm.c:	ch->pcdata->tmp_stat[STR_I] += number_range (1, 10);
comm.c:	ch->pcdata->tmp_stat[INT_I] += number_range (4, 11);
comm.c:	ch->pcdata->tmp_stat[DEX_I] += number_range (1, 12);
comm.c:	ch->pcdata->tmp_stat[WIS_I] += number_range (2, 10);
comm.c:	ch->pcdata->tmp_stat[CON_I] += number_range (1, 11);
comm.c:	ch->pcdata->tmp_stat[STR_I] += number_range (3, 12);
comm.c:	ch->pcdata->tmp_stat[INT_I] += number_range (1, 13);
comm.c:	ch->pcdata->tmp_stat[DEX_I] += number_range (7, 13);
comm.c:	ch->pcdata->tmp_stat[WIS_I] += number_range (1, 10);
comm.c:	ch->pcdata->tmp_stat[CON_I] += number_range (3, 9);
comm.c:	ch->pcdata->tmp_stat[STR_I] += number_range (5, 11);
comm.c:	ch->pcdata->tmp_stat[INT_I] += number_range (1, 7);
comm.c:	ch->pcdata->tmp_stat[DEX_I] += number_range (3, 10);
comm.c:	ch->pcdata->tmp_stat[WIS_I] += number_range (2, 11);
comm.c:	ch->pcdata->tmp_stat[CON_I] += number_range (5, 13);
comm.c:    }				// end switch ch->pcdata->q[3]
comm.c:	ch->pcdata->perm_stat[i] = ch->pcdata->tmp_stat[i] +
comm.c:	  race_info[ch->pcdata->race].bonus[i];
comm.c:      if (ch->pcdata->perm_stat[STR_I] > 23)
comm.c:	  ch->pcdata->perm_stat[STR_I]--;
comm.c:	  ch->pcdata->perm_stat[INT_I]++;
comm.c:      if (ch->pcdata->perm_stat[STR_I] > 25)
comm.c:	  ch->pcdata->perm_stat[STR_I] = 25;
comm.c:	  ch->pcdata->perm_stat[DEX_I]++;
comm.c:      if (ch->pcdata->perm_stat[INT_I] > 26)
comm.c:	  ch->pcdata->perm_stat[INT_I] = 26;
comm.c:	  ch->pcdata->perm_stat[WIS_I]++;
comm.c:      if (ch->pcdata->perm_stat[WIS_I] > 26)
comm.c:	  ch->pcdata->perm_stat[WIS_I] = 26;
comm.c:	  ch->pcdata->perm_stat[DEX_I]++;
comm.c:      if (ch->pcdata->perm_stat[DEX_I] > 26)
comm.c:	  ch->pcdata->perm_stat[DEX_I] = 26;
comm.c:	  ch->pcdata->perm_stat[CON_I]++;
comm.c:      if (ch->pcdata->perm_stat[CON_I] > 26)
comm.c:	  ch->pcdata->perm_stat[CON_I] = 26;
comm.c:  ch->pcdata->n_mana = ch->pcdata->n_max_mana;
comm.c:  char_to_room (ch, get_room_index (ch->pcdata->alignment < 0 ? 99 : 100));
comm.c:	    int ii = d->character->pcdata->pagelen;
comm.c:	    d->character->pcdata->pagelen = 100;
comm.c:	    d->character->pcdata->pagelen = ii;
comm.c:	  char_to_room (d->character, d->character->pcdata->temp_room);
comm.c:	  char_to_room (d->character, d->character->pcdata->temp_room);
comm.c:	if (!fOld && d->character->pcdata->new_exp)
comm.c:	    d->character->pcdata->new_exp = FALSE;
comm.c:	  SET_BIT (d->character->pcdata->act3, ACT3_MAPPING);
comm.c:      if (!ch->pcdata->pwd || ch->pcdata->pwd[0] == '\0'
comm.c:	  || ch->pcdata->pwd == "")
comm.c:      if (ch->pcdata->rpwd && ch->pcdata->rpwd[0] != '\0')
comm.c:	  free_string (ch->pcdata->rpwd);
comm.c:	  ch->pcdata->rpwd = &str_empty[0];
comm.c:      ch->pcdata->rpwd = str_dup (argy);
comm.c:      if (strcmp (crypt (argy, ch->pcdata->pwd), ch->pcdata->pwd))
comm.c:	  1 /*IS_SET(ch->pcdata->act2,PLR_TELNET_GA) */ )
comm.c:	  SET_BIT (d->character->pcdata->act2, PLR_ANSI);
comm.c:	  SET_BIT (d->character->pcdata->act3, ACT3_MAPPING);
comm.c:	  REMOVE_BIT (d->character->pcdata->act3, ACT3_DISABLED);
comm.c:      if (check_reconnect (d /*, d->character->pcdata->name, TRUE */ ))	/*Player entered NM & PW */
comm.c:        int tt = d->character->pcdata->pagelen;
comm.c:        d->character->pcdata->pagelen = 60;
comm.c:        d->character->pcdata->pagelen = tt;
comm.c:	ch->pcdata->q[0] = argy[0];
comm.c:	      d->character->pcdata->tmp_stat[STR_I] = 5;
comm.c:	      d->character->pcdata->tmp_stat[INT_I] = 3;
comm.c:	      d->character->pcdata->tmp_stat[WIS_I] = 2;
comm.c:	      d->character->pcdata->tmp_stat[DEX_I] = number_range (3, 5);
comm.c:	      d->character->pcdata->tmp_stat[CON_I] = number_range (6, 7);
comm.c:	      d->character->pcdata->tmp_stat[STR_I] = 2;
comm.c:	      d->character->pcdata->tmp_stat[INT_I] = 5;
comm.c:	      d->character->pcdata->tmp_stat[WIS_I] = 4;
comm.c:	      d->character->pcdata->tmp_stat[DEX_I] = number_range (4, 6);
comm.c:	      d->character->pcdata->tmp_stat[CON_I] = number_range (4, 7);
comm.c:	      d->character->pcdata->tmp_stat[STR_I] = 3;
comm.c:	      d->character->pcdata->tmp_stat[INT_I] = 4;
comm.c:	      d->character->pcdata->tmp_stat[WIS_I] = 5;
comm.c:	      d->character->pcdata->tmp_stat[DEX_I] = number_range (3, 6);
comm.c:	      d->character->pcdata->tmp_stat[CON_I] = number_range (3, 7);
comm.c:	      d->character->pcdata->tmp_stat[STR_I] = 3;
comm.c:	      d->character->pcdata->tmp_stat[INT_I] = 3;
comm.c:	      d->character->pcdata->tmp_stat[WIS_I] = 3;
comm.c:	      d->character->pcdata->tmp_stat[DEX_I] = number_range (5, 6);
comm.c:	      d->character->pcdata->tmp_stat[CON_I] = number_range (4, 7);
comm.c:	      d->character->pcdata->tmp_stat[STR_I] = 4;
comm.c:	      d->character->pcdata->tmp_stat[INT_I] = number_range (2, 4);
comm.c:	      d->character->pcdata->tmp_stat[WIS_I] = 4;
comm.c:	      d->character->pcdata->tmp_stat[DEX_I] = number_range (4, 7);
comm.c:	      d->character->pcdata->tmp_stat[CON_I] = number_range (4, 6);
comm.c:	      d->character->pcdata->tmp_stat[STR_I] = 4;
comm.c:	      d->character->pcdata->tmp_stat[INT_I] = 3;
comm.c:	      d->character->pcdata->tmp_stat[WIS_I] = 3;
comm.c:	      d->character->pcdata->tmp_stat[DEX_I] = number_range (4, 5);
comm.c:	      d->character->pcdata->tmp_stat[CON_I] = number_range (4, 6);
comm.c:              d->character->pcdata->tmp_stat[STR_I] = 5;
comm.c:              d->character->pcdata->tmp_stat[INT_I] = number_range (1, 2);
comm.c:              d->character->pcdata->tmp_stat[WIS_I] = number_range (1, 2);
comm.c:              d->character->pcdata->tmp_stat[DEX_I] = number_range (2, 4);
comm.c:              d->character->pcdata->tmp_stat[CON_I] = number_range (4, 7);
comm.c:              d->character->pcdata->tmp_stat[STR_I] = number_range (1, 2);
comm.c:              d->character->pcdata->tmp_stat[INT_I] = 5;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[DEX_I] = number_range (1, 2);
comm.c:              d->character->pcdata->tmp_stat[CON_I] = number_range (2, 4);
comm.c:              d->character->pcdata->tmp_stat[STR_I] = number_range (1, 2);
comm.c:              d->character->pcdata->tmp_stat[INT_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[WIS_I] = 5;
comm.c:              d->character->pcdata->tmp_stat[DEX_I] = number_range (1, 3);
comm.c:              d->character->pcdata->tmp_stat[CON_I] = number_range (2, 4);
comm.c:              d->character->pcdata->tmp_stat[STR_I] = number_range (2, 4);
comm.c:              d->character->pcdata->tmp_stat[INT_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[WIS_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[DEX_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[CON_I] = number_range (3, 6);
comm.c:              d->character->pcdata->tmp_stat[STR_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[INT_I] = 3;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] = 3;
comm.c:              d->character->pcdata->tmp_stat[DEX_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[CON_I] = number_range (2, 4);
comm.c:              d->character->pcdata->tmp_stat[STR_I] = number_range (2, 4);
comm.c:              d->character->pcdata->tmp_stat[INT_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[WIS_I] = number_range (2, 3);
comm.c:              d->character->pcdata->tmp_stat[DEX_I] = 5;
comm.c:              d->character->pcdata->tmp_stat[CON_I] = number_range (4, 6);
comm.c:	ch->pcdata->q[1] = argy[0];
comm.c:              d->character->pcdata->tmp_stat[STR_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[DEX_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[CON_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[DEX_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[CON_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[CON_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 4;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[CON_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[DEX_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[CON_I] += 3;
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += number_range (1, 6);
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += number_range (1, 6);
comm.c:              d->character->pcdata->tmp_stat[DEX_I] += number_range (1, 6);
comm.c:              d->character->pcdata->tmp_stat[CON_I] += number_range (1, 6);
comm.c:              d->character->pcdata->tmp_stat[INT_I] += number_range (1, 6);
comm.c:	ch->pcdata->q[2] = argy[0];
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 4;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 4;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += 5;
comm.c:              d->character->pcdata->tmp_stat[DEX_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[CON_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 5;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += number_range (1, 3);
comm.c:              d->character->pcdata->tmp_stat[CON_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[INT_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += 5;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += 1;
comm.c:              d->character->pcdata->tmp_stat[CON_I] += number_range (1, 3);
comm.c:              d->character->pcdata->tmp_stat[DEX_I] += 4;
comm.c:              d->character->pcdata->tmp_stat[CON_I] += 2;
comm.c:              d->character->pcdata->tmp_stat[STR_I] += number_range (1, 3);
comm.c:              d->character->pcdata->tmp_stat[STR_I] += number_range (1, 3);
comm.c:              d->character->pcdata->tmp_stat[WIS_I] += number_range (1, 3);
comm.c:              d->character->pcdata->tmp_stat[DEX_I] += number_range (1, 3);
comm.c:              d->character->pcdata->tmp_stat[CON_I] += number_range (1, 3);
comm.c:              d->character->pcdata->tmp_stat[INT_I] += number_range (1, 3);
comm.c:	ch->pcdata->q[3] = argy[0];
comm.c:              ch->pcdata->tmp_stat[STR_I] += number_range (8, 12);
comm.c:              ch->pcdata->tmp_stat[INT_I] += number_range (2, 4);
comm.c:              ch->pcdata->tmp_stat[WIS_I] += number_range (2, 4);
comm.c:              ch->pcdata->tmp_stat[DEX_I] += number_range (5, 8);
comm.c:              ch->pcdata->tmp_stat[CON_I] += number_range (8, 12);
comm.c:              ch->pcdata->tmp_stat[STR_I] += number_range (4, 6);
comm.c:              ch->pcdata->tmp_stat[INT_I] += number_range (8, 13);
comm.c:              ch->pcdata->tmp_stat[DEX_I] += number_range (4, 6);
comm.c:              ch->pcdata->tmp_stat[WIS_I] += number_range (7, 10);
comm.c:              ch->pcdata->tmp_stat[CON_I] += number_range (4, 8);
comm.c:              ch->pcdata->tmp_stat[STR_I] += number_range (5, 8);
comm.c:              ch->pcdata->tmp_stat[INT_I] += number_range (5, 9);
comm.c:              ch->pcdata->tmp_stat[DEX_I] += number_range (6, 10);
comm.c:              ch->pcdata->tmp_stat[WIS_I] += number_range (5, 8);
comm.c:              ch->pcdata->tmp_stat[CON_I] += number_range (5, 9);
comm.c:              ch->pcdata->tmp_stat[STR_I] += number_range (4, 6);
comm.c:              ch->pcdata->tmp_stat[INT_I] += number_range (4, 6);
comm.c:              ch->pcdata->tmp_stat[DEX_I] += number_range (8, 12);
comm.c:              ch->pcdata->tmp_stat[WIS_I] += number_range (4, 6);
comm.c:              ch->pcdata->tmp_stat[CON_I] += number_range (6, 10);
comm.c:              ch->pcdata->tmp_stat[STR_I] += number_range (3, 6);
comm.c:              ch->pcdata->tmp_stat[INT_I] += number_range (3, 15);
comm.c:              ch->pcdata->tmp_stat[DEX_I] += number_range (1, 5);
comm.c:              ch->pcdata->tmp_stat[WIS_I] += number_range (3, 15);
comm.c:              ch->pcdata->tmp_stat[CON_I] += number_range (3, 9);
comm.c:              ch->pcdata->tmp_stat[STR_I] += number_range (5, 11);
comm.c:              ch->pcdata->tmp_stat[INT_I] += number_range (5, 11);
comm.c:              ch->pcdata->tmp_stat[DEX_I] += number_range (5, 11);
comm.c:              ch->pcdata->tmp_stat[WIS_I] += number_range (5, 11);
comm.c:              ch->pcdata->tmp_stat[CON_I] += number_range (5, 11);
comm.c:      d->character->pcdata->tmp_stat[STR_I] = 0;
comm.c:      d->character->pcdata->tmp_stat[WIS_I] = 0;
comm.c:      d->character->pcdata->tmp_stat[INT_I] = 0;
comm.c:      d->character->pcdata->tmp_stat[CON_I] = 0;
comm.c:      d->character->pcdata->tmp_stat[DEX_I] = 0;
comm.c:sprintf (buf, "\n\rPlease choose a password, 5-15 characters long.\n\rThis password is encrypted, so please write it down!!\n\rDesired password for %s: %s",  d->character->pcdata->name, echo_off_str);
comm.c:      d->character->pcdata->pagelen = i;
comm.c:      pwdnew = crypt (argy, d->character->pcdata->name);
comm.c:      if (d->character->pcdata->pwd)
comm.c:	free_string (d->character->pcdata->pwd);
comm.c:      d->character->pcdata->pwd = str_dup (pwdnew);
comm.c:      if (d->character->pcdata->rpwd && d->character->pcdata->rpwd[0] != '\0')
comm.c:	  free_string (d->character->pcdata->rpwd);
comm.c:	  d->character->pcdata->rpwd = &str_empty[0];
comm.c:      d->character->pcdata->rpwd = str_dup (argy);
comm.c:	  (crypt (argy, d->character->pcdata->pwd),
comm.c:	   d->character->pcdata->pwd))
comm.c:      sprintf (buf2, "Notify> New player %s@%s.", d->character->pcdata->name, d->host);
comm.c:      SET_BIT (d->character->pcdata->act2, PLR_TELNET_GA);
comm.c:	  d->character->pcdata->sex = SEX_MALE;
comm.c:	  d->character->pcdata->sex = SEX_FEMALE;
comm.c:      d->character->pcdata->pray_points = 32;
comm.c:      d->character->pcdata->pray_points = 27;
comm.c:      SET_BIT (d->character->pcdata->act2, PLR_TELNET_GA);
comm.c:	  SET_BIT (d->character->pcdata->act2, PLR_ANSI);
comm.c:	  SET_BIT (d->character->pcdata->act2, PLR_ANSI);
comm.c:      strcpy (d->character->pcdata->email, argy);
comm.c:      if (d->character->pcdata->voting_on == 9999)
comm.c:      d->character->pcdata->race = iRace;
comm.c:      if (race_info[d->character->pcdata->race].start_room == 99)
comm.c:	d->character->pcdata->alignment = -2000;
comm.c:	d->character->pcdata->alignment = 2000;
comm.c:	ch->pcdata->nat_armor = 100;
comm.c:	ch->pcdata->nat_abilities = 0;
comm.c:	    ch->pcdata->perm_stat[i] = 0;
comm.c:	    ch->pcdata->tmp_stat[i] = 0;
comm.c:	if (race_info[ch->pcdata->race].start_room == 99)
comm.c:	  ch->pcdata->alignment = -2000;
comm.c:	  ch->pcdata->alignment = 2000;
comm.c:	ch->pcdata->race = 0;
comm.c:	    d->character->pcdata->nat_armor =
comm.c:	      race_info[d->character->pcdata->race].natarmor;
comm.c:	    d->character->pcdata->nat_abilities =
comm.c:	      race_info[d->character->pcdata->race].affect_bits;
comm.c:	    if (race_info[d->character->pcdata->race].start_room == 99)
comm.c:	      d->character->pcdata->alignment = -2000;
comm.c:	      d->character->pcdata->alignment = 2000;
comm.c:		d->character->pcdata->perm_stat[STR_I] =
comm.c:		  d->character->pcdata->tmp_stat[STR_I] +
comm.c:		  race_info[d->character->pcdata->race].bonus[STR_I];
comm.c:		d->character->pcdata->perm_stat[INT_I] =
comm.c:		  d->character->pcdata->tmp_stat[INT_I] +
comm.c:		  race_info[d->character->pcdata->race].bonus[INT_I];
comm.c:		d->character->pcdata->perm_stat[WIS_I] =
comm.c:		  d->character->pcdata->tmp_stat[WIS_I] +
comm.c:		  race_info[d->character->pcdata->race].bonus[WIS_I];
comm.c:		d->character->pcdata->perm_stat[DEX_I] =
comm.c:		  d->character->pcdata->tmp_stat[DEX_I] +
comm.c:		  race_info[d->character->pcdata->race].bonus[DEX_I];
comm.c:		d->character->pcdata->perm_stat[CON_I] =
comm.c:		  d->character->pcdata->tmp_stat[CON_I] +
comm.c:		  race_info[d->character->pcdata->race].bonus[CON_I];
comm.c:		if (d->character->pcdata->perm_stat[STR_I] > 23)
comm.c:		    d->character->pcdata->perm_stat[STR_I]--;
comm.c:		    d->character->pcdata->perm_stat[INT_I]++;
comm.c:		if (d->character->pcdata->perm_stat[STR_I] > 25)
comm.c:		    d->character->pcdata->perm_stat[STR_I] = 25;
comm.c:		    d->character->pcdata->perm_stat[DEX_I]++;
comm.c:		if (d->character->pcdata->perm_stat[INT_I] > 26)
comm.c:		    d->character->pcdata->perm_stat[INT_I] = 26;
comm.c:		    d->character->pcdata->perm_stat[WIS_I]++;
comm.c:		if (d->character->pcdata->perm_stat[WIS_I] > 26)
comm.c:		    d->character->pcdata->perm_stat[WIS_I] = 26;
comm.c:		    d->character->pcdata->perm_stat[DEX_I]++;
comm.c:		if (d->character->pcdata->perm_stat[DEX_I] > 26)
comm.c:		    d->character->pcdata->perm_stat[DEX_I] = 26;
comm.c:		    d->character->pcdata->perm_stat[CON_I]++;
comm.c:		if (d->character->pcdata->perm_stat[CON_I] > 26)
comm.c:		    d->character->pcdata->perm_stat[CON_I] = 26;
comm.c:	    if (!IS_SET (d->character->pcdata->act2, PLR_ANSI) && !d->java)
comm.c:	      d->character->pcdata->act2 =
comm.c:	      d->character->pcdata->act2 =
comm.c:	    d->character->pcdata->temp_room =
comm.c:	      get_room_index (race_info[d->character->pcdata->race].
comm.c:	    d->character->pcdata->level = 0;
comm.c:		     race_info[d->character->pcdata->race].name);
comm.c:	    d->character->pcdata->n_mana = d->character->pcdata->n_max_mana;
comm.c:         cc->pcdata->perm_stat[STR_I]=number_range(15,26);
comm.c:         cc->pcdata->perm_stat[DEX_I]=number_range(15,26);
comm.c:         cc->pcdata->perm_stat[INT_I]=number_range(10,24);
comm.c:         cc->pcdata->perm_stat[WIS_I]=number_range(10,24);
comm.c:         cc->pcdata->perm_stat[CON_I]=number_range(15,25);
comm.c:	    || amount > d->character->pcdata->pray_points)
comm.c:	  j = &d->character->pcdata->perm_stat[STR_I];
comm.c:	  j = &d->character->pcdata->perm_stat[INT_I];
comm.c:	  j = &d->character->pcdata->perm_stat[WIS_I];
comm.c:	  j = &d->character->pcdata->perm_stat[CON_I];
comm.c:	  j = &d->character->pcdata->perm_stat[DEX_I];
comm.c:	     race_info[d->character->pcdata->race].limits[STR_I]) || (plus
comm.c:								       pcdata->
comm.c:		race_info[d->character->pcdata->race].limits[WIS_I]) || (plus
comm.c:									  pcdata->
comm.c:		race_info[d->character->pcdata->race].limits[CON_I]))
comm.c:	  d->character->pcdata->pray_points -= amount;
comm.c:	  d->character->pcdata->pray_points += amount;
comm.c:	if (d->character->pcdata->pray_points == 0)
comm.c:      sprintf (log_buf, "%s@%s new player.", d->character->pcdata->name,
comm.c:      d->character->pcdata->pray_points = -1;
comm.c:      d->character->pcdata->bank = 50;
comm.c:		   d->character->pcdata->email);
comm.c:		  (playerbase->player_name, d->character->pcdata->name))
comm.c:		  (playerbase->email_address, d->character->pcdata->email)
comm.c:		d->character->pcdata->temp_room =
comm.c:		  get_room_index (race_info[d->character->pcdata->race].
comm.c:		d->character->pcdata->temp_room = get_room_index (400);
comm.c:		d->character->pcdata->temp_room =
comm.c:		  get_room_index (race_info[d->character->pcdata->race].
comm.c:		d->character->pcdata->temp_room = get_room_index (400);
comm.c:		   d->character->pcdata->email);
comm.c:        int ii = d->character->pcdata->pagelen;
comm.c:        d->character->pcdata->pagelen = 100;
comm.c:        d->character->pcdata->pagelen = ii;
comm.c:		 d->character->pcdata->pagelen, VERSION_STR);
comm.c:	  d->character->affected_by |= d->character->pcdata->nat_abilities;
comm.c:	    SET_BIT (d->character->pcdata->act2, PLR_ANSI);
comm.c:		   d->character->pcdata->name, d->host);
comm.c:	  d->character->pcdata->tmphost = d->host;
comm.c:	  if (d->character->pcdata->level < 111)
comm.c:	if (!d->character || d->character->pcdata->level < 0)
comm.c:	d->character->pcdata->voting_on = 0;
comm.c:	d->character->pcdata->tickcounts = 0;
comm.c:	d->character->affected_by |= d->character->pcdata->nat_abilities;
comm.c:	    if (d->character->pcdata->ignore[k])
comm.c:			 d->character->pcdata->ignore[k]))
comm.c:			     d->character->pcdata->ignore[k]);
comm.c:		    free_string (d->character->pcdata->ignore[k]);
comm.c:		    d->character->pcdata->ignore[k] = NULL;
comm.c:		    (int) d->character->pcdata->logon;
comm.c:		    ((d->character->pcdata->remort_times >
comm.c:		      0) ? (d->character->pcdata->level +
comm.c:			    200) : d->character->pcdata->level);
comm.c:			  d->character->pcdata->email);
comm.c:	      strcpy (playerbase->email_address, d->character->pcdata->email);
comm.c:		(int) d->character->pcdata->logon;
comm.c:	      playerbase->player_level = d->character->pcdata->level;
comm.c:	if (d->character->pcdata->temp_room == NULL)
comm.c:	      d->character->pcdata->temp_room = get_room_index (2);
comm.c:	    d->character->pcdata->temp_room = get_room_index (3);
comm.c:	char_to_room (d->character, d->character->pcdata->temp_room);
comm.c:	      ch->pcdata->temp_room =
comm.c:	    d->character->pcdata->bank = 50;
comm.c:		SET_BIT (d->character->pcdata->act2, PLR_BRIEF);
comm.c:	if (IS_SET (d->character->pcdata->act3, ACT3_MAPPING)
comm.c:	    && !IS_SET (d->character->pcdata->act3, ACT3_DISABLED))
comm.c:	    REMOVE_BIT (d->character->pcdata->act3, ACT3_MAPPING);
comm.c:	if (d->character->pcdata->pray_points == -1)
comm.c:	    d->character->pcdata->pray_points = 0;
comm.c:	    d->character->pcdata->level = 1;
comm.c:						[d->character->pcdata->race].
comm.c:			SET_BIT (d->character->pcdata->act2, PLR_BRIEF);
comm.c:		d->character->pcdata->pet_temp[uui] = 0;
comm.c:		      fch->pcdata->no_quit_pk = 2;
comm.c:		      ch->pcdata->no_quit_pk = 2;
comm.c:	    if (d->character->pcdata->donated <= 0)
comm.c:		hours = (d->character->pcdata->played) / 3600;
comm.c:		      && str_cmp (d->character->pcdata->name, pnote->sender)
comm.c:		      && str_cmp (d->character->pcdata->name, pnote->sender)
comm.c:                sprintf (buf,"\n\r\x1B[0;36mThe forces of \x1B[1;31mevil \x1B[0;36mstrengthen as \x1B[1;31m%s\x1b[0;36m steps through a swirl of \x1B[1;34mc\x1B[1;32mo\x1B[1;36ml\x1B[1;31mo\x1B[1;35mr\x1b[0;36m.\x1b[0;37m\n\r",ch->pcdata->name);
comm.c:                sprintf(buf,"\n\r\x1B[0;36mThe forces of \x1B[1;34mgood \x1B[0;36mstrengthen as \x1B[1;34m%s\x1B[0;36m steps through a swirl of \x1B[1;34mc\x1B[1;32mo\x1B[1;36ml\x1B[1;31mo\x1B[1;35mr\x1B[0;36m.\x1B[0;37m\n\r",ch->pcdata->name);
comm.c:               sprintf(buf,"\n\r\x1B[0;36mThe player base of \x1B[1;36mVoR \x1B[0;36mhas become stronger as \x1B[1;36m%s \x1B[0;36msteps through a swirl of \x1B[1;34mc\x1B[1;32mo\x1B[1;36ml\x1B[1;31mo\x1B[1;35mr\x1B[0;36m.\x1B[0;37m\n\r",ch->pcdata->name);
comm.c:      && d->character->pcdata->oldgrep != NULL)
comm.c:    strcpy (grep, d->character->pcdata->oldgrep);
comm.c:      IS_SET (d->character->pcdata->act2,
comm.c:          PLR_BLANKPROMPT) ? d->character->pcdata->pagelen -
comm.c:      4 : d->character->pcdata->pagelen - 1;
comm.c:      && d->character->pcdata->oldgrep != NULL)
comm.c:    strcpy (grep, d->character->pcdata->oldgrep);
comm.c:      IS_SET (d->character->pcdata->act2,
comm.c:          PLR_BLANKPROMPT) ? d->character->pcdata->pagelen -
comm.c:      4 : d->character->pcdata->pagelen - 1;
comm.c:  if (d->character && IS_SET (d->character->pcdata->act3, ACT3_MAPPING) &&
comm.c:      !IS_SET (d->character->pcdata->act3, ACT3_DISABLED))
comm.c:    if (((ch->pcdata->myhost[i]) == NULL))
comm.c:    free_string (ch->pcdata->myhost[i]);
comm.c:    ch->pcdata->myhost[i] = ch->pcdata->tmphost;
comm.c:    sprintf (strsave, "%s%s%s%s%s", HOST_DIR, initial (ch->pcdata->name),
comm.c:        "/", capitalize (ch->pcdata->name), ".hst");
comm.c:      fprintf (fp, "[%d]\t%s\n", i, ch->pcdata->myhost[i]);
comm.c:    ch->pcdata->myhost[i] = NULL;
config.c:      ign = IS_SET(ch->pcdata->chan_ignore, (1 << i));
config.c:    send_to_char (!IS_SET (ch->pcdata->deaf, CHANNEL_AUCTION) ?
config.c:    send_to_char (!IS_SET (ch->pcdata->deaf, CHANNEL_CHAT) ?
config.c:      send_to_char (!IS_SET (ch->pcdata->deaf, CHANNEL_CLANTALK) ?
config.c:    send_to_char (!IS_SET (ch->pcdata->deaf, CHANNEL_YELL) ?
config.c:      send_to_char (!IS_SET (ch->pcdata->deaf, CHANNEL_IMMTALK) ?
config.c:      send_to_char (!IS_SET (ch->pcdata->deaf, CHANNEL_GODTALK) ?
config.c:      REMOVE_BIT (ch->pcdata->deaf, bit);
config.c:      SET_BIT (ch->pcdata->deaf, bit);
config.c:  if (IS_SET (ch->pcdata->act2, PLR_BLANK))
config.c:  if (IS_SET (ch->pcdata->act2, PLR_BRIEF))
config.c:  ch->pcdata->pagelen = lines;
config.c:  if (!IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
config.c:      if (ch->pcdata->rprompt)
config.c:	free_string (ch->pcdata->rprompt);
config.c:      ch->pcdata->rprompt = str_dup (argy);
config.c:  if (!IS_SET (ch->pcdata->act2, PLR_PROMPT))
config.c:      SET_BIT (ch->pcdata->act2, PLR_PROMPT);
config.c:      REMOVE_BIT (ch->pcdata->act2, PLR_PROMPT);
config.c:    if (IS_SET (ch->pcdata->act2, PLR_ANSI))
config.c:        sprintf (buf, "$R%s", ch->pcdata->chan_color[i]);
config.c:            ch->pcdata->chan_color[i]);
config.c:  strcpy (ch->pcdata->chan_color[i], argy);
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_PROMPT_UP)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOEXIT) ?
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOLOOT) ?
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOSAC) ?
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOGOLD) ?
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOSPLIT) ?
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_ASSIST)
config.c:	send_to_char ((ch->pcdata->prompt == 2)
config.c:	send_to_char ((ch->pcdata->prompt == 1)
config.c:         send_to_char( IS_SET(ch->pcdata->act2, PLR_BLANKPROMPT)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_BLANK)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_BRIEF) ?
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_COMBINE) ?
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_PROMPT) ?
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_ANSI) ?
config.c:      /* send_to_char( IS_SET(ch->pcdata->act2, PLR_TELNET_GA)
config.c:	  send_to_char (ch->pcdata->challenge_on
config.c:	  send_to_char (ch->pcdata->arena_msg ==
config.c:			: (ch->pcdata->arena_msg ==
config.c:	  send_to_char (ch->pcdata->eqlist ==
config.c:			: (ch->pcdata->eqlist ==
config.c:			   : (ch->pcdata->eqlist ==
config.c:	  send_to_char (IS_SET (ch->pcdata->act2, PLR_SILENCE)
config.c:	      send_to_char (IS_SET (ch->pcdata->act2, PLR_HOLYLAG)
config.c:	  if (ch->pcdata->prompt == 0)
config.c:	      ch->pcdata->prompt = 2;
config.c:	      ch->pcdata->prompt = 0;
config.c:	  if (ch->pcdata->prompt == 0)
config.c:	      ch->pcdata->prompt = 1;
config.c:	      ch->pcdata->prompt = 0;
config.c:	      if (ch->pcdata->challenge_on)
config.c:		  ch->pcdata->challenge_on = FALSE;
config.c:		  ch->pcdata->challenge_on = TRUE;
config.c:	      if (ch->pcdata->arena_msg == 2)
config.c:		  ch->pcdata->arena_msg = 0;
config.c:	      else if (ch->pcdata->arena_msg == 1)
config.c:		  ch->pcdata->arena_msg = 2;
config.c:		  ch->pcdata->arena_msg = 1;
config.c:	      if (ch->pcdata->eqlist == 3)
config.c:		  ch->pcdata->eqlist = 0;
config.c:	      else if (ch->pcdata->eqlist == 2)
config.c:		  ch->pcdata->eqlist = 3;
config.c:	      else if (ch->pcdata->eqlist == 1)
config.c:		  ch->pcdata->eqlist = 2;
config.c:		  ch->pcdata->eqlist = 1;
config.c:	  SET_BIT (ch->pcdata->act2, bit);
config.c:	      REMOVE_BIT (ch->pcdata->act2, PLR_TELNET_GA);
config.c:	  REMOVE_BIT (ch->pcdata->act2, bit);
config.c:	      SET_BIT (ch->pcdata->act2, PLR_TELNET_GA);
config.c:	      sprintf (tmps, "\x1B[1;%dr\x1B[2J", ch->pcdata->pagelen);
config.c:	  if (IS_SET (ch->pcdata->act2, bit))
config.c:	      REMOVE_BIT (ch->pcdata->act2, bit);
config.c:		  SET_BIT (ch->pcdata->act2, PLR_TELNET_GA);
config.c:		  sprintf (tmps, "\x1B[1;%dr\x1B[2J", ch->pcdata->pagelen);
config.c:	      SET_BIT (ch->pcdata->act2, bit);
config.c:		  REMOVE_BIT (ch->pcdata->act2, PLR_TELNET_GA);
config.c:  free_string (ch->pcdata->rank);
config.c:  ch->pcdata->rank = str_dup (rank);
config.c:		  ch->pcdata->rank = NULL;
config.c:  free_string (ch->pcdata->title);
config.c:  ch->pcdata->title = str_dup (buf);
config.c:  if ((ch->pcdata->remort_times < 6) && (LEVEL(ch) < 111))
config.c:  string_append (ch, &ch->pcdata->description);
dam.c:      gotoxy (ch, 1, ch->pcdata->pagelen);
dam.c:      gotoxy (ch, 1, ch->pcdata->pagelen);
dam.c:    gotoxy (ch, 1, ch->pcdata->pagelen);
dam.c:  if (!IS_SET (victim->pcdata->act3, ACT3_MAPPING) ||
dam.c:      IS_SET (victim->pcdata->act3, ACT3_DISABLED))
dam.c:      sprintf (b, "\x1B[9;%dr", victim->pcdata->pagelen);
dam.c:		  gotoxy (cc, 1, cc->pcdata->pagelen);
dam.c:      if (!IS_SET (ch->pcdata->act3, ACT3_MAPPING) ||
dam.c:	  IS_SET (ch->pcdata->act3, ACT3_DISABLED))
dam.c:	  sprintf (b, "\x1B[1;%dr", ch->pcdata->pagelen);
dam.c:      gotoxy (ch, 1, ch->pcdata->pagelen);
dam.c:		  gotoxy (c, 1, c->pcdata->pagelen);
dam.c:		  gotoxy (c, 1, c->pcdata->pagelen);
dam.c:  sprintf (buf + strlen (buf), "%c%c", (char) (wch->pcdata->quiet + 10),
dam.c:	   (char) (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? 6 : 5), (char) 1,
dam.c:	   (char) (wch->pcdata->wizinvis != 0 ? 6 : 5), (char) 1);
dam.c:	   wch->pcdata->title, (char) 1);
dam.c:  sprintf (b + strlen (b), "%s%c", race_info[ch->pcdata->race].name,
dam.c:  sprintf (b + strlen (b), "%d%c%d%c%ld%c%ld%c", ch->pcdata->tps, (char) 1,
dam.c:	   (FIND_TPS (LEVEL (ch), 0) - ch->pcdata->tps), (char) 1,
dam.c:	   (char) 1, ch->pcdata->bank, (char) 1);
dam.c:  sprintf (b + strlen (b), "%d%c%d%c", ch->pcdata->learn, (char) 1,
dam.c:	   ch->pcdata->practice, (char) 1);
dam2.c:  // if (IS_SET(ch->pcdata->act2, PLR_DAMAGE))  
db2.c:    if (!ch->pcdata->script_flags[i])
db2.c:    for (temp = sa_head[CALCULATE_HEAD (ch->pcdata->script_flags[i])];
db2.c:      if (!str_cmp (temp->flagname, ch->pcdata->script_flags[i]))
death.c:  if (ch->pcdata->no_quit > 0 || ch->pcdata->no_quit_pk > 0)
death.c:      if (ch->pcdata->no_quit > ch->pcdata->no_quit_pk)
death.c:	ii = ch->pcdata->no_quit;
death.c:	ii = ch->pcdata->no_quit_pk;
death.c:  if ((ch->pcdata->bank + (ch->copper) + (ch->gold * 100)) < cost)
death.c:      ch->pcdata->bank -= cost;
death.c:  if (ch->pcdata->learned[gsn_invest] < 1)
death.c:  ch->pcdata->tickcounts = 21;
death.c:  strcpy (ch->pcdata->temp->temp_string, argy);
death.c:  if (number_range (1, 90) > ch->pcdata->learned[gsn_invest])
death.c:  if (!ch->pcdata->just_investigated)
death.c:  ch->pcdata->just_investigated = TRUE;
death.c:	  if (victim->pcdata->learned[i] < 5)
death.c:	  victim->pcdata->learned[i] -= pow.amount_lost_on_death;
death.c:	  if (victim->pcdata->learned[i] < 1)
death.c:	    victim->pcdata->learned[i] = 1;
death.c:      && victim->pcdata->carry_number > 0)
death.c:    victim->affected_by = victim->pcdata->nat_abilities;
death.c:      if (IS_SET (ch->pcdata->raceflag, RC_EVILRACE)
death.c:          && !IS_SET (victim->pcdata->raceflag, RC_EVILRACE))
death.c:        gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints += 2;
death.c:          gch->pcdata->killpoints += 2;
death.c:          gch->pcdata->killpoints += 2;
death.c:          gch->pcdata->killpoints++;
death.c:      else if (!IS_SET (ch->pcdata->raceflag, RC_EVILRACE)
death.c:          && IS_SET (victim->pcdata->raceflag, RC_EVILRACE))
death.c:        gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints += 2;
death.c:          gch->pcdata->killpoints += 2;
death.c:          gch->pcdata->killpoints += 2;
death.c:          gch->pcdata->killpoints++;
death.c:        gch->pcdata->totalkills++;
death.c:          gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints++;
death.c:        gch->pcdata->totalkills++;
death.c:          gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints++;
death.c:          gch->pcdata->killpoints++;
death.c:        gch->pcdata->killed_mobs[victim->pIndexData->vnum]++;
death.c:           ((ch->pcdata->killed_mobs[victim->pIndexData->vnum] -
death.c:      sprintf(g_exp,"You've gained %d experience for fighting.\n\r",gch->pcdata->voting_on);
death.c:        xp, gch->pcdata->voting_on);
death.c:    gch->pcdata->voting_on = 0;
death.c:    if (ch->pcdata->learned[gsn_berserk] < 5)
draw.c:      for (j = 1; j < ch->pcdata->maxx && j <= max_col[i]; j++)
draw.c:  sprintf (tt, "\x1B[11;%dr", ch->pcdata->pagelen);
draw.c:  ch->pcdata->maxx = 78;
draw.c:  ch->pcdata->maxy = 7;
draw.c:  sprintf (tt, "\x1B[%d;1f", ch->pcdata->pagelen);
draw.c:  ch->pcdata->resist_summon = -10;
draw.c:  ch->pcdata->transport_quest = (4 * 80) + 40;
draw.c:  ch->pcdata->kk = kk;
draw.c:  ch->pcdata->mb = mb;
draw.c:  ch->pcdata->noibm = noibm;
draw.c:  ch->pcdata->dbs = dbs;
draw.c:  if (IS_SET (ch->pcdata->act3, ACT3_MAPPING) &&
draw.c:      IS_SET (ch->pcdata->act3, ACT3_DISABLED))
draw.c:      REMOVE_BIT (ch->pcdata->act3, ACT3_DISABLED);
draw.c:      REMOVE_BIT (ch->pcdata->act3, ACT3_MAPPING);
draw.c:  if (IS_SET (ch->pcdata->act3, ACT3_MAPPING))
draw.c:      REMOVE_BIT (ch->pcdata->act3, ACT3_MAPPING);
draw.c:  if (!IS_JAVA (ch) && !IS_SET (ch->pcdata->act3, ACT3_MAPPING) &&
draw.c:      SET_BIT (ch->pcdata->act3, ACT3_MAPPING);
draw.c:      SET_BIT (ch->pcdata->act3, ACT3_DISABLED);
draw.c:  SET_BIT (ch->pcdata->act3, ACT3_MAPPING);
draw.c:      sprintf (tt, "\x1B[9;%dr", ch->pcdata->pagelen);
draw.c:      ch->pcdata->maxx = 24;
draw.c:      ch->pcdata->maxy = 7;
draw.c:      ch->pcdata->transport_quest = (5 * 80) + 16;
draw.c:      go_display (ch, MAP_INROOM (ch), ch->pcdata->transport_quest % 80, 5, -1, 8, ch->pcdata->maxx, dbs);
draw.c:      display_room (ch, MAP_INROOM (ch), ch->pcdata->transport_quest % 80, 5, -1, FALSE);
draw.c:      ch->pcdata->maxx = 22;
draw.c:      ch->pcdata->maxy = 7;
draw.c:      ch->pcdata->transport_quest = (4 * 80) + 12;
draw.c:      go_display (ch, MAP_INROOM (ch), ch->pcdata->transport_quest % 80, 4,
draw.c:		  -1, 7, ch->pcdata->maxx, dbs);
draw.c:      display_room (ch, MAP_INROOM (ch), ch->pcdata->transport_quest % 80, 4,
draw.c:      sprintf (tt, "\x1B[%d;1f", ch->pcdata->pagelen);
draw.c:  ch->pcdata->resist_summon = -15;
draw.c:  ch->pcdata->kk = kk;
draw.c:  ch->pcdata->mb = mb;
draw.c:  ch->pcdata->noibm = noibm;
draw.c:  ch->pcdata->dbs = dbs;
draw.c:  sprintf (tt, "\x1B[11;%dr", ch->pcdata->pagelen);
draw.c:  ch->pcdata->maxx = 30;
draw.c:  ch->pcdata->maxy = 7;
draw.c:  sprintf (tt, "\x1B[%d;1f", ch->pcdata->pagelen);
draw.c:  ch->pcdata->resist_summon = -10;
draw.c:  ch->pcdata->transport_quest = (4 * 80) + 15;
draw.c:  ch->pcdata->kk = kk;
draw.c:  ch->pcdata->mb = mb;
draw.c:  ch->pcdata->noibm = noibm;
draw.c:  ch->pcdata->dbs = dbs;
draw.c:  kk = ch->pcdata->kk;
draw.c:  mb = ch->pcdata->mb;
draw.c:  noibm = ch->pcdata->noibm;
draw.c:  dbs = ch->pcdata->dbs;
draw.c:      if (ch->pcdata->resist_summon == -10)
draw.c:      if (ch->pcdata->resist_summon == -10)
draw.c:	sprintf (tt, "\x1B[11;%dr", ch->pcdata->pagelen);
draw.c:	sprintf (tt, "\x1B[9;%dr", ch->pcdata->pagelen);
draw.c:  if (ch->pcdata->resist_summon == -10)
draw.c:      go_display (ch, MAP_INROOM (ch), (ch->pcdata->maxx < 40 ? 15 : 40), 4, -1, 10, ch->pcdata->maxx, ch->pcdata->dbs);
draw.c:      go_display (ch, MAP_INROOM (ch), 12, 4, -1, 7, ch->pcdata->maxx, ch->pcdata->dbs);
draw.c:  if (ch->pcdata->resist_summon == -10)
draw.c:    display_room (ch, MAP_INROOM (ch), (ch->pcdata->maxx < 40 ? 15 : 40), 4, -1, FALSE);
draw.c:  if (ch->pcdata->resist_summon == -10)
draw.c:    ch->pcdata->transport_quest = (4 * 80) + (ch->pcdata->maxx < 40 ? 15 : 40);
draw.c:    ch->pcdata->transport_quest = (4 * 80) + 12;
draw.c:      if (ch->pcdata->resist_summon == -10)
draw.c:      sprintf (tt, "\x1B[%d;1f", ch->pcdata->pagelen);
draw.c:  ch->pcdata->maxx = 78;
draw.c:      ch->pcdata->maxx = 56;
draw.c:      ch->pcdata->maxy = 18;
draw.c:      ch->pcdata->transport_quest = (8 * 80) + 30;
draw.c:  ch->pcdata->kk = kk;
draw.c:  ch->pcdata->mb = mb;
draw.c:  ch->pcdata->noibm = noibm;
draw.c:  ch->pcdata->dbs = dbs;
edit.c:  if (!ch->pcdata->name)
edit.c:      SET_BIT (ch->pcdata->act2, PLR_TELNET_GA);
edit.c:  REMOVE_BIT (ch->pcdata->act2, PLR_TELNET_GA);
fgt.c:		  /*|| (ch->npcdata->hire && ch->npcdata->hire!=NULL) */ ))
fgt.c:/*if (ch->npcdata->hire!=NULL && ch->npcdata->hire->fighting!=NULL) multi_hit(ch,ch->npcdata->hire->fighting, TYPE_UNDEFINED); */
fgt.c:		victim->pcdata->tickcounts = 0;
fgt.c:		      && IS_SET (rch->pcdata->act2, PLR_ASSIST)
fgt.c:  if (ch->pcdata->tickcounts > 2)
fgt.c:  if (ch->pcdata->learned[gsn_circle] < 2)
fgt.c:  ch->pcdata->tickcounts = spl->mana;	/*13; */
fgt.c:  if (ch->pcdata->learned[gsn_circle] < 2)
fgt.c:  if (number_range (0, 110) < ch->pcdata->learned[gsn_circle])
fgt.c:	ch->pcdata->tickcounts = spl->casting_time;
fgt.c:	  if (wield2 && ((IS_PLAYER (ch) && ch->pcdata->learned[gsn_dual_wield] > number_range (0, 148)) || ((IS_MOB (ch)) 
fgt.c:	chance = IS_MOB (ch) ? LEVEL (ch) / 3 : ((ch->pcdata->learned[gsn_second_attack] / 4) + LEVEL (ch) / 5);
fgt.c:	chance = IS_MOB (ch) ? LEVEL (ch) / 6 : ch->pcdata->learned[gsn_third_attack] / 7;
fgt.c:      if (ch->pcdata->learned[gsn_laser] < 2)
fgt.c:	return (ch->pcdata->learned[gsn_laser] / 4);
fgt.c:    return (ch->pcdata->learned[gsn_pierce] ==
fgt.c:	    -100 ? 0 : ch->pcdata->learned[gsn_pierce] / 4);
fgt.c:    return (ch->pcdata->learned[gsn_concussion] ==
fgt.c:	    -100 ? 0 : ch->pcdata->learned[gsn_concussion] / 5);
fgt.c:    return (ch->pcdata->learned[gsn_whip] ==
fgt.c:	    -100 ? 0 : ch->pcdata->learned[gsn_whip] / 4);
fgt.c:  if (ch->pcdata->learned[gsn_slashing] == -100)
fgt.c:	return (ch->pcdata->learned[gsn_slashing] / 7);
fgt.c:	return (ch->pcdata->learned[gsn_slashing] / 6);
fgt.c:	return (ch->pcdata->learned[gsn_slashing] / 5);
fgt.c:	return (ch->pcdata->learned[gsn_slashing] / 4);
fgt.c:    return ((ch->pcdata->learned[gsn_slashing] / 4) +
fgt.c:    return (ch->pcdata->learned[gsn_slashing] / 5);
fgt.c:      && ch->pcdata->learned[gsn_enhanced_damage] > 0)
fgt.c:    dam += (dam * ch->pcdata->learned[gsn_enhanced_damage]) / 400;
fgt.c:    if (!consid && IS_PLAYER (ch) && dif > 4 && number_range (1, 100) < ch->pcdata->learned[gsn_penetration])
fgt.c:	  ch->pcdata->no_quit = 2;
fgt.c:	  victim->pcdata->no_quit = 2;
fgt.c:	  ch->pcdata->no_quit_pk = 5;
fgt.c:	  victim->pcdata->no_quit_pk = 5;
fgt.c:		    ch->pcdata->voting_on += gn;
fgt.c:	  absorb += (victim->pcdata->remort_times);
fgt.c:	  victim->pcdata->deaths++;
fgt.c:	  victim->pcdata->no_quit = 0;
fgt.c:	  if (!IS_EVIL (victim) && !IS_EVIL (ch) && ch->pcdata->bounty > 10
fgt.c:	      && victim->pcdata->bounty < 10)
fgt.c:	     if (victim->pcdata->warpoints - (1 + (LEVEL (victim) / 6)) >= 0)
fgt.c:	     victim->pcdata->warpoints -= (1 + (LEVEL (victim) / 6));
fgt.c:		  if (victim->pcdata->warpoints -
fgt.c:		      victim->pcdata->warpoints -= (1 + (LEVEL (victim) / 6));
fgt.c:		      if (victim->pcdata->warpoints > 0)
fgt.c:				   victim->pcdata->warpoints,
fgt.c:				   victim->pcdata->warpoints == 1 ? "" : "s");
fgt.c:			  victim->pcdata->warpoints = 0;
fgt.c:		  if (ch->pcdata->warpoints < reduce)
fgt.c:		    reduce = ch->pcdata->warpoints;
fgt.c:		      ch->pcdata->warpoints -= reduce;
fgt.c:		  ch->pcdata->no_quit_pk = 10;
fgt.c:		  victim->pcdata->no_quit_pk = 0;
fgt.c:	    ch->pcdata->no_quit = 0;
fgt.c:	  if (IS_SET (ch->pcdata->act2, PLR_AUTOLOOT))
fgt.c:	  else if (IS_SET (ch->pcdata->act2, PLR_AUTOGOLD))
fgt.c:	  if (IS_SET (ch->pcdata->act2, PLR_AUTOSAC))
fgt.c:	  if (IS_SET (ch->pcdata->act2, PLR_AUTOSPLIT)
fgt.c:      chance = victim->pcdata->learned[gsn_parry] / (2 * number);
fgt.c:      if (victim->pcdata->carry_weight > (get_curr_str (victim) * 2))
fgt.c:      if (victim->pcdata->carry_weight > (get_curr_str (victim) * 3))
fgt.c:      if (victim->pcdata->carry_weight > (get_curr_str (victim) * 4))
fgt.c:      if (victim->pcdata->carry_weight > (get_curr_str (victim) * 5))
fgt.c:      if (victim->pcdata->carry_weight > (get_curr_str (victim) * 6))
fgt.c:      chance = victim->pcdata->learned[gsn_dodge] / (2 * number);
fgt.c:      chance = victim->pcdata->learned[gsn_shield_block] / (number / 2.0);
fgt.c:  if (!race_info[gch->pcdata->race].switch_aligns)
fgt.c:  before = gch->pcdata->alignment;
fgt.c:  gch->pcdata->alignment -= kkk;
fgt.c:      gch->pcdata->alignment = 5000;
fgt.c:      gch->pcdata->warpoints = 0;
fgt.c:      gch->pcdata->alignment = -5000;
fgt.c:      gch->pcdata->warpoints = 0;
fgt.c:    tmpi = (15 + get_curr_dex (victim) + (victim->pcdata->learned[gsn_dodge] / 6));
fgt.c:    chn = ((ch->pcdata->learned[gsn_bash]) + (get_curr_str (ch) * 2)) - tmpi;
fgt.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_bash] < 5)
fgt.c:    ch->pcdata->tickcounts = spl->mana;
fgt.c:  strcpy (ch->pcdata->temp->temp_string, argy);
fgt.c:    ch->pcdata->tickcounts = spl->casting_time;
fgt.c:  if (IS_PLAYER (ch) && gotDualBackstab && ch->pcdata->learned[gsn_dual_backstab] > 0)  // Sigh, I did this all backwards.
fgt.c:      || (IS_PLAYER (ch) && number_percent () < ch->pcdata->learned[gsn_backstab]))
fgt.c:        || (IS_PLAYER (ch) && number_percent () < ch->pcdata->learned[gsn_dual_backstab]))
fgt.c:  if (IS_PLAYER (ch) && ch->pcdata->tickcounts > 1)
fgt.c:  if (IS_PLAYER (ch) && number_percent () > ch->pcdata->learned[gsn_rescue])
fgt.c:      if (IS_MOB (ch) || (!IS_AWAKE (victim) || (IS_PLAYER (ch) && number_percent () < ch->pcdata->learned[gsn_kick])))
fgt.c:	  if (number_percent () < ch->pcdata->learned[gsn_second_kick])
fgt.c:	  if (ch->pcdata->learned[gsn_second_kick] > 0)
fgt.c:  if (IS_PLAYER (ch) && ch->pcdata->tickcounts > 3)
fgt.c:  if (IS_MOB (ch) || (IS_PLAYER (ch) && percent < ch->pcdata->learned[gsn_disarm] * 2 / 3))
fgt.c:	victim->affected_by = victim->pcdata->nat_abilities;
fgt.c:  if (ch->pcdata->learned[gsn] < 5)
fgt.c:  if (ch->pcdata->learned[gsn] < 20 && number_range (1, vall[0]) == 29) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 40 && number_range (1, vall[1]) == 29) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 60 && number_range (1, vall[2]) == 29) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 70 && number_range (1, vall[3]) == 29) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 78 && number_range (1, vall[4]) == 20) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 84 && number_range (1, vall[5]) == 29) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 87 && number_range (1, vall[6]) == 29) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 92 && number_range (1, vall[7]) == 29) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 97 && number_range (1, vall[8]) == 29) learnyes = TRUE;
fgt.c:  if (learnyes && ch->pcdata->learned[gsn] < 100)
fgt.c:      ch->pcdata->learned[gsn]++;
fgt.c:  if (ch->pcdata->learned[gsn] < 10)
fgt.c:  if (ch->pcdata->learned[gsn] < 20 && number_range (1, vall[0]) == 69) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 40 && number_range (1, vall[1]) == 69) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 60 && number_range (1, vall[2]) == 69) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 70 && number_range (1, vall[3]) == 69) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 78 && number_range (1, vall[4]) == 40) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 84 && number_range (1, vall[5]) == 69) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 87 && number_range (1, vall[6]) == 69) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 92 && number_range (1, vall[7]) == 69) learnyes = TRUE;
fgt.c:  else if (ch->pcdata->learned[gsn] < 97 && number_range (1, vall[8]) == 69) learnyes = TRUE;
fgt.c:  if (learnyes && ch->pcdata->learned[gsn] < 100)
fgt.c:      ch->pcdata->learned[gsn]++;
give.c:		ch->pcdata->no_quit_pk = 5;
give.c:	      ch->pcdata->learned[gsn_hide] + ch->pcdata->plus_hide)
give.c:/*     if ( IS_MOB(victim) && victim->npcdata->hire == ch )
give.c:   victim->npcdata->paid += (amount*100);
give.c:   if ( victim->npcdata->wage > victim->npcdata->paid )
give.c:   name_amount(victim->npcdata->wage - victim->npcdata->paid ));
give.c:/*     if ( IS_MOB(victim) && victim->npcdata->hire == ch )
give.c:   victim->npcdata->paid += (amount);
give.c:   if ( victim->npcdata->wage > victim->npcdata->paid )
give.c:   name_amount(victim->npcdata->wage - victim->npcdata->paid ));
give.c:  if (IS_PLAYER (ch) && ch->pcdata->condition[COND_DRUNK] > 10)
give.c:  if (IS_PLAYER (ch) && ch->pcdata->condition[COND_THIRST] < 7)
give.c:      && ch->pcdata->condition[COND_THIRST] > 40)
give.c:	  ch->pcdata->condition[COND_THIRST] = 48;
give.c:	    if (IS_PLAYER (ch) && ch->pcdata->condition[COND_DRUNK] > 10)
give.c:	    if (IS_PLAYER (ch) && ch->pcdata->condition[COND_FULL] > 40)
give.c:	    if (IS_PLAYER (ch) && ch->pcdata->condition[COND_THIRST] > 40)
give.c:      ch->pcdata->condition[COND_THIRST] > 6 && thirsty)
give.c:      if (ch->pcdata->condition[COND_FULL] > 6)
give.c:	  && !NO_HUNGER (ch) && ch->pcdata->condition[COND_FULL] > 40)
give.c:	    conditiona = ch->pcdata->condition[COND_FULL];
give.c:	    if (conditiona < 4 && ch->pcdata->condition[COND_FULL] > 4)
give.c:	    else if (ch->pcdata->condition[COND_FULL] > 40)
give.c:  if (pow.professions && !(ch->pcdata->profession_flag & spell->values[0]))
give.c:  if (ch->pcdata->learned[(bk->teaches)] > 25)
give.c:      ch->pcdata->learned[(bk->teaches)] = 26;
give.c:	      && number_range (0, 115) > ch->pcdata->learned[gsn_steal])
give.c:		  ch->pcdata->bounty += 10;
give.c:  if (number_range (0, 100) > ch->pcdata->learned[gsn_butcher])
grnd.c:	  victim->pcdata->condition[COND_FULL] = 48;
grnd.c:	  victim->pcdata->condition[COND_THIRST] = 48;
grnd.c:	  victim->pcdata->no_quit = 0;
grnd.c:	     if (victim->pcdata->warpoints - (1 + (LEVEL (victim) / 6)) >= 0)
grnd.c:	     victim->pcdata->warpoints -= (1 + (LEVEL (victim) / 6));
grnd.c:		  if (victim->pcdata->warpoints -
grnd.c:		      victim->pcdata->warpoints -= (1 + (LEVEL (victim) / 6));
grnd.c:		      if (victim->pcdata->warpoints > 0)
grnd.c:				   victim->pcdata->warpoints,
grnd.c:				   victim->pcdata->warpoints == 1 ? "" : "s");
grnd.c:			  victim->pcdata->warpoints = 0;
grnd.c:		  if (ch->pcdata->warpoints < reduce)
grnd.c:		    reduce = ch->pcdata->warpoints;
grnd.c:		      ch->pcdata->warpoints -= reduce;
grnd.c:		  ch->pcdata->no_quit_pk = 10;
grnd.c:		  victim->pcdata->no_quit_pk = 0;
grnd.c:	  if (IS_SET (ch->pcdata->act2, PLR_AUTOLOOT))
grnd.c:	  else if (IS_SET (ch->pcdata->act2, PLR_AUTOGOLD))
grnd.c:	  if (IS_SET (ch->pcdata->act2, PLR_AUTOSAC))
grnd.c:	  if (IS_SET (ch->pcdata->act2, PLR_AUTOSPLIT)
guild.c:  if (IS_SET (ch->pcdata->guilds, guildflag))
guild.c:      if (!IS_SET (ch->pcdata->guilds, (mob->pIndexData->act3)))
guild.c:	  ch->pcdata->perm_stat[WIS_I] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_TINKER;
guild.c:	  ch->pcdata->perm_stat[STR_I] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_WARRIOR;
guild.c:	  ch->pcdata->perm_stat[WIS_I] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_HEALER;
guild.c:	  ch->pcdata->perm_stat[INT_I] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_WIZARD;
guild.c:	  ch->pcdata->perm_stat[CON_I] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_RANGER;
guild.c:	  ch->pcdata->perm_stat[DEX_I] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_ASSASSIN;
guild.c:	  ch->pcdata->perm_stat[DEX_I] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_THIEFG;
guild.c:          ch->pcdata->perm_stat[CON_I] -= 1;
guild.c:          ch->pcdata->perm_stat[WIS_I] -= 1;
guild.c:	  //ch->pcdata->perm_stat[GET_GUILD_STAT (ch, 0)] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_PALADIN;
guild.c:	  ch->pcdata->perm_stat[INT_I] -= 1;
guild.c:          ch->pcdata->perm_stat[WIS_I] -= 1;
guild.c:	  //ch->pcdata->perm_stat[GET_GUILD_STAT (ch, 1)] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_ELEMENTAL;
guild.c:	  ch->pcdata->perm_stat[CON_I] -= 1;
guild.c:          ch->pcdata->perm_stat[INT_I] -= 1;
guild.c:	  //ch->pcdata->perm_stat[GET_GUILD_STAT (ch, 2)] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_BATTLEMAGE;
guild.c:	  ch->pcdata->perm_stat[DEX_I] -= 1;
guild.c:          ch->pcdata->perm_stat[STR_I] -= 1;
guild.c:	  //ch->pcdata->perm_stat[GET_GUILD_STAT (ch, 3)] -= 1;
guild.c:	  ch->pcdata->guilds -= ACT3_MARAUDER;
guild.c:          ch->pcdata->perm_stat[WIS_I] -= 1;
guild.c:          ch->pcdata->perm_stat[INT_I] -= 1;
guild.c:          //ch->pcdata->perm_stat[GET_GUILD_STAT (ch, 3)] -= 1;
guild.c:          ch->pcdata->guilds -= ACT3_NECROMANCER;
guild.c:      if (IS_SET (ch->pcdata->guilds, mob->pIndexData->act3))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:       /*if (IS_SET (ch->pcdata->guilds, GUILD_RANGER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_RANGER))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_RANGER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	 if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_RANGER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:         if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
guild.c:	  if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
guild.c:          if (IS_SET (ch->pcdata->guilds, GUILD_RANGER))
guild.c:	    ch->pcdata->perm_stat[WIS_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_TINKER;
guild.c:	    ch->pcdata->perm_stat[STR_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_WARRIOR;
guild.c:	    ch->pcdata->perm_stat[WIS_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_HEALER;
guild.c:	    ch->pcdata->perm_stat[INT_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_WIZARD;
guild.c:	    ch->pcdata->perm_stat[CON_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_RANGER;
guild.c:	    ch->pcdata->perm_stat[DEX_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_ASSASSIN;
guild.c:	    ch->pcdata->perm_stat[DEX_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_THIEFG;
guild.c:	    ch->pcdata->perm_stat[CON_I] += 1;
guild.c:            ch->pcdata->perm_stat[WIS_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_PALADIN;
guild.c:	   // ch->pcdata->guildstats[GUILDSTAT_PALADIN] = gstat;
guild.c:	    ch->pcdata->perm_stat[INT_I] += 1; 
guild.c:            ch->pcdata->perm_stat[WIS_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_ELEMENTAL;
guild.c:	   // ch->pcdata->guildstats[GUILDSTAT_ELEMENTAL] = gstat;
guild.c:	    ch->pcdata->perm_stat[CON_I] += 1;
guild.c:            ch->pcdata->perm_stat[INT_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_BATTLEMAGE;
guild.c:	    //ch->pcdata->guildstats[GUILDSTAT_BATTLEMAGE] = gstat;
guild.c:	    ch->pcdata->perm_stat[DEX_I] += 1;
guild.c:            ch->pcdata->perm_stat[STR_I] += 1;
guild.c:	    ch->pcdata->guilds += ACT3_MARAUDER;
guild.c:	    //ch->pcdata->guildstats[GUILDSTAT_MARAUDER] = gstat;
guild.c:            ch->pcdata->perm_stat[WIS_I] += 1;
guild.c:            ch->pcdata->perm_stat[INT_I] += 1;
guild.c:            ch->pcdata->guilds += ACT3_NECROMANCER;
guild.c:            //ch->pcdata->guildstats[GUILDSTAT_MARAUDER] = gstat;
hedit.c:    (ch->pcdata->act2, PLR_ASCII)
hedit.c:    (ch->pcdata->act2, PLR_ASCII)
hnd.c:      ch->pcdata->no_spam = 1;
hnd.c:  if (ch->pcdata->no_spam == 0)
hnd.c:      ch->pcdata->no_spam = 2;
hnd.c:  else if (ch->pcdata->no_spam == 1)
hnd.c:      ch->pcdata->no_spam = 0;
hnd.c:  ch->pcdata->no_spam = 1;
hnd.c:  return 18 + (((ch->pcdata->played / 2) + (((int) (current_time - ch->pcdata->logon)) / 2)) / 7200) / 4;
hnd.c:  workspace = ch->pcdata->perm_stat[STR_I] + ch->pcdata->mod_stat[STR_I];
hnd.c:    URANGE (3, ch->pcdata->perm_stat[INT_I] + ch->pcdata->mod_stat[INT_I], max);
hnd.c:    return URANGE (3, ch->pcdata->perm_stat[WIS_I] + ch->pcdata->mod_stat[WIS_I], max);
hnd.c:  workspace = ch->pcdata->perm_stat[DEX_I] + ch->pcdata->mod_stat[DEX_I];
hnd.c:    return URANGE (3, ch->pcdata->perm_stat[CON_I] + ch->pcdata->mod_stat[CON_I], max);
hnd.c:              ch->pcdata->n_max_mana +=mod;
hnd.c:	    ch->pcdata->saving_throw += mod;
hnd.c:	    ch->pcdata->resist_summon += mod;
hnd.c:	    ch->pcdata->plus_kick += mod;
hnd.c:	    ch->pcdata->plus_sneak += mod;
hnd.c:	    ch->pcdata->plus_hide += mod;
hnd.c:	ch->pcdata->mod_stat[STR_I] += mod;
hnd.c:	ch->pcdata->mod_stat[DEX_I] += mod;
hnd.c:	ch->pcdata->mod_stat[INT_I] += mod;
hnd.c:	ch->pcdata->mod_stat[WIS_I] += mod;
hnd.c:	ch->pcdata->mod_stat[CON_I] += mod;
hnd.c:        ch->pcdata->n_max_mana += mod;
hnd.c:	ch->pcdata->saving_throw += mod;
hnd.c:	ch->pcdata->resist_summon += mod;
hnd.c:	ch->pcdata->plus_kick += mod;
hnd.c:	ch->pcdata->plus_sneak += mod;
hnd.c:	ch->pcdata->plus_hide += mod;
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:      && race_info[ch->pcdata->race].poison_immunity)
hnd.c:      && race_info[ch->pcdata->race].plague_immunity)
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:#define XPOS(ch)  ((ch)->pcdata->transport_quest%80)
hnd.c:#define YPOS(ch)  ((ch)->pcdata->transport_quest/80)
hnd.c:	  if (IS_SET (ch->pcdata->act3, ACT3_MAPPING)
hnd.c:	      && !IS_SET (ch->pcdata->act3, ACT3_DISABLED))
hnd.c:	      if ((ch->pcdata->resist_summon == -10
hnd.c:		   || ch->pcdata->resist_summon == -15))
hnd.c:		  noibm = ch->pcdata->noibm;
hnd.c:		  kkk = ch->pcdata->kk;
hnd.c:		  mb = ch->pcdata->mb;
hnd.c:		  dbs = ch->pcdata->dbs;
hnd.c:					   ch->pcdata->transport_quest % 80,
hnd.c:					   ch->pcdata->transport_quest / 80,
hnd.c:					   ch->pcdata->transport_quest % 80,
hnd.c:					   ch->pcdata->transport_quest / 80,
hnd.c:					   ch->pcdata->transport_quest % 80,
hnd.c:					   ch->pcdata->transport_quest / 80,
hnd.c:					   ch->pcdata->transport_quest % 80,
hnd.c:					   ch->pcdata->transport_quest / 80,
hnd.c:		      gotoxy (ch, 1, ch->pcdata->pagelen);
hnd.c:	      if (!IS_SET (c->pcdata->act3, ACT3_MAPPING)
hnd.c:		  || IS_SET (c->pcdata->act3, ACT3_DISABLED))
hnd.c:	      while (ch->pcdata->pet_temp[kkk] != 0)
hnd.c:	      ch->pcdata->pet_temp[kkk] = pir->pIndexData->vnum;
hnd.c:	      ch->pcdata->pet_hps[kkk] = pir->hit;
hnd.c:	      ch->pcdata->pet_move[kkk] = pir->move;
hnd.c:    if (ch->pcdata->perm_stat[i] > race_info[ch->pcdata->race].limits[i])
hnd.c:      ch->pcdata->perm_stat[i] = race_info[ch->pcdata->race].limits[i];
hnd.c:    else if (ch->pcdata->perm_stat[i] > MAX_ONESTAT)
hnd.c:      ch->pcdata->perm_stat[i] = MAX_ONESTAT;
hnd.c:    else if (ch->pcdata->perm_stat[i] < 1)
hnd.c:      ch->pcdata->perm_stat[i] = 1;
hnd.c:      && ch->pcdata->level > 100 && ch->pcdata->level < 109)
hnd.c:	   && ch->pcdata->level < 101)
hnd.c:	  ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:	  ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:		      racenum == ch->pcdata->race
hnd.c:      if (!IS_JAVA (ch) && IS_SET (ch->pcdata->act3, ACT3_MAPPING)
hnd.c:	  && IS_SET (ch->pcdata->act3, ACT3_DISABLED) && !INDOORS_MAP (ch))
hnd.c:	  REMOVE_BIT (ch->pcdata->act3, ACT3_MAPPING);
hnd.c:	  REMOVE_BIT (ch->pcdata->act3, ACT3_DISABLED);
hnd.c:      else if (!IS_JAVA (ch) && IS_SET (ch->pcdata->act3, ACT3_MAPPING)
hnd.c:	       && !IS_SET (ch->pcdata->act3, ACT3_DISABLED)
hnd.c:	  SET_BIT (ch->pcdata->act3, ACT3_DISABLED);
hnd.c:	  SET_BIT (ch->pcdata->act3, ACT3_MAPPING);
hnd.c:	  ch->pcdata->pet_temp[kkk] = 0;
hnd.c:	      ch->pcdata->nat_abilities = 0;
hnd.c:	      ch->pcdata->perm_stat[STR_I] = number_range (13, 15);
hnd.c:	      ch->pcdata->perm_stat[INT_I] = number_range (13, 14);
hnd.c:	      ch->pcdata->perm_stat[CON_I] = number_range (13, 15);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] = number_range (12, 15);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] = number_range (12, 14);
hnd.c:	      ch->pcdata->perm_stat[STR_I] +=
hnd.c:		race_info[ch->pcdata->race].bonus[0];
hnd.c:	      ch->pcdata->perm_stat[INT_I] +=
hnd.c:		race_info[ch->pcdata->race].bonus[1];
hnd.c:	      ch->pcdata->perm_stat[WIS_I] +=
hnd.c:		race_info[ch->pcdata->race].bonus[2];
hnd.c:	      ch->pcdata->perm_stat[DEX_I] +=
hnd.c:		race_info[ch->pcdata->race].bonus[3];
hnd.c:	      ch->pcdata->perm_stat[CON_I] +=
hnd.c:		race_info[ch->pcdata->race].bonus[4];
hnd.c:	      ch->pcdata->perm_stat[STR_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (2, 4);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (2, 4);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (2, 4);
hnd.c:	      ch->pcdata->learned[gsn_slashing] = 10;
hnd.c:	      ch->pcdata->learned[gsn_parry] = 7;
hnd.c:	      ch->pcdata->learned[gsn_pierce] = 6;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 4);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += 2;
hnd.c:	      ch->pcdata->perm_stat[CON_I] += 2;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += 2;
hnd.c:	      ch->pcdata->perm_stat[INT_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (3, 4);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (2, 4);
hnd.c:	      ch->pcdata->learned[gsn_sneak] = 8;
hnd.c:	      ch->pcdata->learned[gsn_pierce] = 9;
hnd.c:	      ch->pcdata->learned[gsn_slashing] = 6;
hnd.c:	      ch->pcdata->perm_stat[INT_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += 2;
hnd.c:	      ch->pcdata->learned[gsn_search] = 5;
hnd.c:	      ch->pcdata->learned[gsn_enhanced_damage] = 5;
hnd.c:	      /*if (number_range(1,3)==2) ch->pcdata->nat_abilities|=AFF_INFRARED; */
hnd.c:	      ch->pcdata->perm_stat[STR_I] += 2;
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[INT_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += 3;
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += 1;
hnd.c:		ch->pcdata->perm_stat[CON_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (2, 5);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 5);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (1, 5);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 5);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 4);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] -= 2;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (2, 6);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (2, 6);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 2;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 5);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 4);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 4);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[CON_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (2, 4);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[CON_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 2);
hnd.c:		ch->pcdata->perm_stat[CON_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[INT_I] -= 2;
hnd.c:	      ch->pcdata->learned[gsn_slashing] = 22;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      /*if (number_range(1,2)==2) ch->pcdata->nat_abilities|=AFF_INFRARED; */
hnd.c:	      ch->pcdata->perm_stat[STR_I] += 2;
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 2;
hnd.c:	      ch->pcdata->perm_stat[INT_I] += 2;
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (2, 3);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (2, 3);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[INT_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[WIS_I] += number_range (2, 4);
hnd.c:	      ch->pcdata->perm_stat[DEX_I] += 1;
hnd.c:	      ch->pcdata->perm_stat[INT_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 2);
hnd.c:	      ch->pcdata->perm_stat[STR_I] += number_range (1, 3);
hnd.c:	      ch->pcdata->perm_stat[CON_I] += number_range (1, 4);
hnd.c:	      ch->pcdata->learned[gsn_slashing] = 18;
hnd.c:	  if (IS_SET (ch->pcdata->act3, ACT3_MAPPING)
hnd.c:	      && !IS_SET (ch->pcdata->act3, ACT3_DISABLED))
hnd.c:	      if (ch->pcdata->resist_summon == -10
hnd.c:		  || ch->pcdata->resist_summon == -15)
hnd.c:					   ch->pcdata->transport_quest % 80,
hnd.c:					   ch->pcdata->transport_quest / 80,
hnd.c:					   ch->pcdata->transport_quest % 80,
hnd.c:					   ch->pcdata->transport_quest / 80,
hnd.c:					   ch->pcdata->transport_quest % 80,
hnd.c:					   ch->pcdata->transport_quest / 80,
hnd.c:					   ch->pcdata->transport_quest % 80,
hnd.c:					   ch->pcdata->transport_quest / 80,
hnd.c:		      gotoxy (ch, 1, ch->pcdata->pagelen);
hnd.c:	      if (!IS_SET (c->pcdata->act3, ACT3_MAPPING)
hnd.c:		  || IS_SET (c->pcdata->act3, ACT3_DISABLED))
hnd.c:/*      if (ch->pcdata->n_mana<0) ch->pcdata->n_mana += ((I_GEM *) obj->more)->mana_now;
hnd.c:                ((I_GEM *) obj->more)->mana_now+=ch->pcdata->n_mana;
hnd.c:      ch->pcdata->n_mana = 0;
hnd.c:		      ch->pcdata->n_mana);
hnd.c:	      ch->pcdata->n_mana -= amt;
hnd.c:    ch->pcdata->condition[COND_FULL] = 55;
hnd.c:    ch->pcdata->condition[COND_THIRST] = 55;
hnd.c:    ch->pcdata->condition[COND_DRUNK] = 0;
hnd.c:	  if (!IS_SET (rch->pcdata->raceflag, RCLOOK))
hnd.c:	      ((!IS_SET (ch->pcdata->raceflag, RC_EVILRACE)
hnd.c:		&& !IS_SET (rch->pcdata->raceflag, RC_EVILRACE))
hnd.c:	       || (IS_SET (ch->pcdata->raceflag, RC_EVILRACE)
hnd.c:		   && IS_SET (rch->pcdata->raceflag, RC_EVILRACE))))
hnd.c:      && ch->pcdata->wizinvis == 0)
hnd.c:      && victim->pcdata->wizinvis >= LEVEL (ch)
hnd.c:  if (IS_PLAYER (victim) && victim->pcdata->wizinvis >= ch->pcdata->level)
hnd.c:  if (IS_PLAYER (ch) && ch->pcdata->level >= LEVEL_IMMORTAL)
info.c:    if (ch->pcdata->show_lev)
info.c:      ch->pcdata->show_lev = FALSE;
info.c:  ch->pcdata->show_lev = TRUE;
info.c:	         if (wch->pcdata->wizinvis == 0)
info.c:	      if (wch->pcdata->wizinvis == 0)
info.c:		    if (!wch->pcdata->rank || !str_cmp(strip_ansi_codes(wch->pcdata->rank), "(null)"))
info.c:			  if (wch->pcdata->sex == SEX_MALE)
info.c:			  if (wch->pcdata->sex == SEX_MALE)
info.c:			  if (wch->pcdata->sex == SEX_MALE)
info.c:			  if (wch->pcdata->sex == SEX_MALE)
info.c:		    sprintf (doe, wch->pcdata->rank);
info.c:	      if (wch->pcdata->quiet == 1)
info.c:	      if (wch->pcdata->quiet == 2)
info.c:		   (wch->pcdata->bounty ? "B" : " "), (IS_EVIL (wch) ? "\x1B[31;1mA\x1B[32m" : " "), (IN_BATTLE (wch) ? "+" : " "), LEVEL (wch),
info.c:		   (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? "s" : " "),
info.c:		   (wch->pcdata->bgf ? "-" : " "),
info.c:		   ((wch->pcdata->title[0] != ',' && wch->pcdata->title[0] != '.') ? " " : ""),
info.c:		   wch->pcdata->title,
info.c:		   (wch->pcdata->wizinvis != 0 ? " (Invis)" : ""));
info.c: wch->pcdata->remort_times, 
info.c: NAME (wch), (wch->pcdata->bgf ? '-' : ' '), 
info.c: (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? 'S' : ' '), 
info.c:			     (wch->pcdata->bounty ? 'B' : ' '),
info.c:			     (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? 's'
info.c:			     (wch->pcdata->bgf ? '-' : ' '), wch->timer > 49 ? "\x1B[37;1m<AFK> \x1B[0;37m" 
info.c:			     ((wch->pcdata->title[0] != ',' && wch->pcdata->title[0] != '.') ? " " : ""),
info.c:			     wch->pcdata->title,
info.c:			     (wch->pcdata->wizinvis != 0 ? " \x1B[0;36m(\x1B[1;30mWizInvis\x1B[0;36m)\x1B[0;37m" : ""));
info.c:		    if (!wch->pcdata->show_lev)
info.c:         "\x1B[0;36mPBG:%s \x1B[1;30mLevel:\x1B[1;37m%2d  \x1B[0;36mR-%d",  wch->pcdata->bgf ? "\x1B[1;34mY" : "\x1B[0;31mN", LEVEL (wch), wch->pcdata->remort_times);
info.c:			 (wch->pcdata->title[0] != ',' ? " " : ""),
info.c:			 wch->pcdata->title,
info.c:			 (wch->pcdata->wizinvis != 0 ? " \x1B[0;36m(\x1B[1;30mWizInvis\x1B[0;36m)\x1B[0;37m" : ""),
info.c:                         (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? " \x1B[1;31m(\x1B[0;31mSilenced\x1B[1;31m)" : ""), 
info.c:	      if (wch->pcdata->wizinvis == 0)
info.c:	      if (wch->pcdata->quiet == 1)
info.c:	      if (wch->pcdata->quiet == 2)
info.c:		   (wch->pcdata->bounty ? "B" : " "),
info.c:		   (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? "s" : " "),
info.c:		   (wch->pcdata->bgf ? "-" : " "),
info.c:		   pcdata->title[0] != ','
info.c:		   && wch->pcdata->title[0] != '.') ? " " : ""), wch->pcdata->title,
info.c:		   (wch->pcdata->wizinvis != 0 ? " (Invis)" : ""));
info.c:			     (wch->pcdata->bounty ? 'B' : ' '),
info.c:			     (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? 's'
info.c:			     (wch->pcdata->bgf ? '-' : ' '), NAME (wch),
info.c:			     (wch->pcdata->bounty ? 'B' : ' '),
info.c:			     (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? 's'
info.c:			     (wch->pcdata->bgf ? '-' : ' '),
info.c:			     ((wch->pcdata->title[0] != ',' && wch->pcdata->title[0] != '.') ? " " : ""),
info.c:			     wch->pcdata->title,
info.c:			     (wch->pcdata->wizinvis != 0 ? " (Invis)" : ""));
info.c:		    if (!wch->pcdata->show_lev)
info.c:			 (wch->pcdata->title[0] != ',' ? " " : ""),
info.c:			 wch->pcdata->title,
info.c:			 (wch->pcdata->wizinvis != 0 ? " (Invis)" : ""));
int.c:    ch->pcdata->oldgrep = mem_alloc (strlen (grep) + 1);
int.c:    strcpy (ch->pcdata->oldgrep, grep);}
int.c:            if (ch->pcdata->oldgrep)
int.c:              free_string (ch->pcdata->oldgrep); ch->pcdata->oldgrep = NULL;}
int.c:                            ch->pcdata->just_investigated = FALSE;}
int.c:              NAME (d->character), d->character->pcdata->email,
int.c:              NAME (dd->character), dd->character->pcdata->email,
int.c:              NAME (d->character), d->character->pcdata->email,
int.c:              NAME (dd->character), dd->character->pcdata->email,
look.c:	  if (IS_MOB (ch) || IS_SET (ch->pcdata->act2, PLR_COMBINE))
look.c:      if (IS_MOB (ch) || IS_SET (ch->pcdata->act2, PLR_COMBINE))
look.c:      if (IS_MOB (ch) || IS_SET (ch->pcdata->act2, PLR_COMBINE))
look.c:  if (IS_PLAYER (ch) && (ch->pcdata->no_spam == 2 || ch->pcdata->no_spam == 1)
look.c:         if (IS_PLAYER (victim) && !IS_SET (ch->pcdata->act2, PLR_BRIEF) && !rcselect &&
look.c:         strlen (victim->pcdata->title) < 39)
look.c:         strcat (buf, victim->pcdata->title);
look.c:	  && (ch->pcdata->no_spam == 2 || ch->pcdata->no_spam == 1))
look.c:	  if (IS_PLAYER (victim) && victim->pcdata->bounty > 0)
look.c:  if (IS_PLAYER (ch) && ch->pcdata->no_spam == 0)
look.c:      send_to_char (victim->pcdata->name, ch);
look.c:      send_to_char (race_info[victim->pcdata->race].name, ch);
look.c:	IS_PLAYER (ch) && ((ch->pcdata->eqlist == 2) ||
look.c:			   (ch->pcdata->eqlist == 3)))
look.c:	    if ((obj == NULL) && (ch->pcdata->eqlist == 3))
look.c:		(ch->pcdata->eqlist == 1))
look.c:				   (IS_PLAYER (ch) && ch->pcdata->eqlist == 0) */
look.c:      ((IS_PLAYER (ch) && number_percent () < ch->pcdata->learned[gsn_peek])
look.c:	  && rch->pcdata->wizinvis >= LEVEL (ch) && LEVEL (ch) < LEVEL (rch))
look.c:      (arg[0] == '\0' || !IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:      (arg[0] == '\0' || !IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:      (arg[0] == '\0' || !IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:      (arg[0] == '\0' || !IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:      (arg[0] == '\0' || !IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:      (arg[0] == '\0' || !IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:      (arg[0] == '\0' || !IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:	       (!IS_SET (ch->pcdata->act2, PLR_BRIEF) || arg1[0] == '\0'))
look.c:	    || (IS_PLAYER (ch) && !IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:      if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_AUTOEXIT))
look.c:	     ch->pcdata->bank);
look.c:    eqlist = ch->pcdata->eqlist;
look.c:	     ch->hit, ch->max_hit, ch->move, ch->max_move, ch->pcdata->level, ch->pcdata->warpoints, ch->pcdata->remort_times);
look.c: ch->hit, ch->max_hit, ch->move, ch->max_move, ch->pcdata->level, ch->pcdata->warpoints, ch->pcdata->remort_times );
look.c:             ch->max_hit, ch->pcdata->level, ch->pcdata->warpoints);
look.c:           ch->max_hit, ch->pcdata->level, ch->pcdata->warpoints);
look.c:  if (strcmp (crypt (arg1, ch->pcdata->pwd), ch->pcdata->pwd))
look.c:  if (ch->pcdata->pwd != NULL)
look.c:    free_string (ch->pcdata->pwd);
look.c:  ch->pcdata->pwd = str_dup (pwdnew);
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_AUCTION)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_NOTIFY)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_CHAT)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_IMMTALK)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_CLANTALK)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_YELL)
look.c:   REMOVE_BIT (ch->pcdata->deaf, bit);
look.c:   SET_BIT (ch->pcdata->deaf, bit);
look.c:	      UMAX (8, ch->pcdata->learned[gsn_search])
look.c:      if (number_range (0, 120) < UMAX (8, ch->pcdata->learned[gsn_search])
look.c:	  UMAX (15, ch->pcdata->learned[gsn_search] + 10))
look.c:    if (number_range (0, 120) < UMAX (8, ch->pcdata->learned[gsn_search]))
look.c:  ch->pcdata->tickcounts = 9;
look.c:    strcpy (ch->pcdata->temp->temp_string, argy);
look.c:    ch->pcdata->temp->temp_string[0] = '\0';
medit.c:      sprintf (minibuf, "\x1B[1;%dr\x1B[2JDone.\n\r", ch->pcdata->pagelen);
medit.c:      sprintf (minibuf, "\x1B[1;%dr\x1B[2JDone.\n\r", ch->pcdata->pagelen);
mgc.c:  zmana = ch->pcdata->n_mana;
mgc.c:      else if (rch->pcdata->learned[sn] > number_range(0, 99))
mgc.c:    50 + (((LEVEL (victim) - level) - (victim->pcdata->saving_throw * 5)));
mgc.c:  zmana = ch->pcdata->n_mana;
mgc.c:  if (ch->pcdata->n_mana >= zmana)
mgc.c:      ch->pcdata->n_mana -= zmana;
mgc.c:    ch->pcdata->n_mana = 0;
mgc.c:  if (ch->pcdata->tickcounts > 11 && (FIGHTING (ch) != NULL))
mgc.c:  strcpy (ch->pcdata->temp->temp_string, argy);
mgc.c:   ch->pcdata->tickcounts=(UMIN(skill_table[sn].beats-6,40))/3;
mgc.c:	|| (LEVEL (ch) > 99 && IS_SET (ch->pcdata->act2, PLR_HOLYLAG)))
mgc.c:	ch->pcdata->tickcounts =
mgc.c:	  ch->pcdata->tickcounts += 10;
mgc.c:	    ch->pcdata->tickcounts /= 2;
mgc.c:	ch->pcdata->tickcounts = spell->casting_time + 12;
mgc.c:  if (IS_PLAYER (ch) && number_percent () > ch->pcdata->learned[spell->gsn]
mgc.c:		  ch->pcdata->n_mana = 0;
mgc.c:		  ch->pcdata->n_mana /= 2;
mgc.c:	  if (ch->pcdata->tickcounts > 2)
mgc.c:    ch->pcdata->tickcounts = spell->casting_time + 10;
move.c:  sprintf (ddd, "\x1B[2J\x1B[0m\x1B[1;%dr", ch->pcdata->pagelen);
move.c:      sprintf (ddd, "\x1B[2J\x1B[0m\x1B[1;%dr", ch->pcdata->pagelen);
move.c:  ch->pcdata->resist_summon = 0;
move.c:      || (IS_SET (ch->pcdata->act3, ACT3_MAPPING)
move.c:	  && !IS_SET (ch->pcdata->act3, ACT3_DISABLED)))
move.c:      REMOVE_BIT (ch->pcdata->act3, ACT3_MAPPING);
move.c:            && (ch->pcdata->resist_summon == -10
move.c:              || ch->pcdata->resist_summon == -15)))
move.c:        dbs = ch->pcdata->dbs;
move.c:        noibm = ch->pcdata->noibm;
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, 0, FALSE,
move.c:          ch->pcdata->transport_quest += 1 + (dbs ? 1 : 0);
move.c:          ch->pcdata->transport_quest -= (1 + (dbs ? 1 : 0));
move.c:          ch->pcdata->transport_quest += 80;
move.c:          ch->pcdata->transport_quest -= 80;
move.c:          && (ch->pcdata->resist_summon == -10
move.c:            || ch->pcdata->resist_summon == -15))
move.c:        noibm = ch->pcdata->noibm;
move.c:        kk = ch->pcdata->kk;
move.c:        mb = ch->pcdata->mb;
move.c:        if (ch->pcdata->transport_quest % 80 >= ch->pcdata->maxx)
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:            gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:        else if (ch->pcdata->transport_quest % 80 <=
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:            gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:        else if (ch->pcdata->transport_quest <=
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:            gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:        else if (ch->pcdata->resist_summon == -15
move.c:            && ch->pcdata->transport_quest >=
move.c:            (ch->pcdata->maxy * 80) + 80)
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:            gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:        else if (ch->pcdata->resist_summon == -10
move.c:            && ch->pcdata->transport_quest >= (9 * 80))
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:                ch->pcdata->transport_quest % 80,
move.c:                ch->pcdata->transport_quest / 80, -1,
move.c:            gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:            gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:            gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:  if (IS_PLAYER (ch) && ch->pcdata->condition[COND_DRUNK] > 15)
move.c:    if (IS_PLAYER (ch) && ch->pcdata->condition[COND_DRUNK] > 15
move.c:    if (IS_PLAYER (ch) && check_super && ch->pcdata->arena_msg == 5
move.c:        && ch->pcdata->warpoints == 5 && (!str_cmp (NAME (ch), "Kilith")
move.c:        if (ch->pcdata->long_descr[0] &&
move.c:            ch->pcdata->long_descr[0] != '\0')
move.c:          sprintf (to_do, "name %s", ch->pcdata->long_descr);
move.c:        if (ch->pcdata->short_descr
move.c:            && ch->pcdata->short_descr[0] != '\0')
move.c:          sprintf (to_do, "%s", ch->pcdata->short_descr);
move.c:        if (ch->pcdata->ignore[9] && ch->pcdata->ignore[9][0] != '\0')
move.c:          sprintf (to_do, "%s", ch->pcdata->ignore[9]);
move.c:          && ob->pIndexData->value[7] != ch->pcdata->race)
move.c:          && (ch->pcdata->donated == 0
move.c:            || ob->pIndexData->value[7] > ch->pcdata->donated))
move.c:      if ((number_range (1, 70) > ch->pcdata->learned[gsn_riding]) ||
move.c:      if (ch->pcdata->carry_weight > (get_curr_str (ch) * 3))
move.c:      if (ch->pcdata->carry_weight > (get_curr_str (ch) * 4))
move.c:      if (ch->pcdata->carry_weight > (get_curr_str (ch) * 5))
move.c:      if (ch->pcdata->carry_weight > (get_curr_str (ch) * 6))
move.c:      if (ch->pcdata->carry_weight > (get_curr_str (ch) * 7))
move.c:    if (number_range (0, 75) > ch->pcdata->learned[gsn_swim] + 10 &&
move.c:    if (number_range (0, 105) > ch->pcdata->learned[gsn_swim])
move.c:  if (IS_MOB (ch) || !IS_SET (ch->pcdata->act3, ACT3_MAPPING) ||
move.c:      IS_SET (ch->pcdata->act3, ACT3_DISABLED))
move.c:            ch->pcdata->
move.c:        && (ch->pcdata->resist_summon == -10
move.c:          || ch->pcdata->resist_summon == -15)))
move.c:    dbs = ch->pcdata->dbs;
move.c:      ch->pcdata->transport_quest += 1 + (dbs ? 1 : 0);
move.c:      ch->pcdata->transport_quest -= (1 + (dbs ? 1 : 0));
move.c:      ch->pcdata->transport_quest += 80;
move.c:      ch->pcdata->transport_quest -= 80;
move.c:      && (ch->pcdata->resist_summon == -10
move.c:        || ch->pcdata->resist_summon == -15))
move.c:    noibm = ch->pcdata->noibm;
move.c:    kk = ch->pcdata->kk;
move.c:    mb = ch->pcdata->mb;
move.c:    if (ch->pcdata->transport_quest % 80 >= ch->pcdata->maxx)
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:        gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:    else if (ch->pcdata->transport_quest % 80 <= (IS_JAVA (ch) ? 8 : 6))
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:        gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:    else if (ch->pcdata->transport_quest <= (IS_JAVA (ch) ? 240 : 160))
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:        gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:        && ch->pcdata->transport_quest >= (ch->pcdata->maxy * 80) + 80)
move.c:          ch->pcdata->transport_quest % 80,
move.c:          ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:    else if (!IS_JAVA (ch) && ch->pcdata->resist_summon == -15
move.c:        && ch->pcdata->transport_quest >= (ch->pcdata->maxy * 80))
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:        gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:    else if (ch->pcdata->resist_summon == -10
move.c:        && ch->pcdata->transport_quest >= (9 * 80))
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:            ch->pcdata->transport_quest % 80,
move.c:            ch->pcdata->transport_quest / 80, -1, FALSE,
move.c:        gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:        gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:        gotoxy (ch, 1, ch->pcdata->pagelen);
move.c:      && !IS_SET (ch->pcdata->act2, PLR_BRIEF))
move.c:    SET_BIT (ch->pcdata->act2, PLR_BRIEF);
move.c:    REMOVE_BIT (ch->pcdata->act2, PLR_BRIEF);
move.c:            ch->pcdata->
move.c:      fch->pcdata->no_quit_pk = 2;
move.c:      ch->pcdata->no_quit_pk = 2;
move.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_search] > 52 &&
move.c:    /*     if ( IS_MOB(fch) && fch->npcdata->hire == ch && fch->position == POSITION_RESTING )
move.c:  ch->pcdata->carry_weight = 0;
move.c:  ch->pcdata->carry_number = 0;
move.c:      ch->pcdata->carry_weight += get_obj_weight (obj);
move.c:      ch->pcdata->carry_number += get_obj_number (obj);
move.c:      && number_range (1, 100) > ch->pcdata->learned[gsn_pick_lock])
move.c:	      && IS_SET (ch->pcdata->nat_abilities, AFF_FLYING))
move.c:		 if (IS_MOB (ch) || number_percent () < ch->pcdata->learned[gsn_sneak] + ch->pcdata->plus_sneak)
move.c:  if (!IN_BATTLE (ch) && (IS_MOB (ch) || number_range (1, 104) <= ch->pcdata->learned[gsn_hide] + ch->pcdata-> plus_hide)) SET_BIT (ch->affected_by, AFF_HIDE);
move.c:	if (IS_PLAYER (ch) && IS_SET (ch->pcdata->nat_abilities, AFF_FLYING))
note.c:  ch->pcdata->edit_note = FALSE;
note.c:      for (list = ch->pcdata->read_notes; list; list = list->next)
note.c:  list->next = ch->pcdata->read_notes;
note.c:  ch->pcdata->read_notes = list;
note.c:  list = ch->pcdata->read_notes;
note.c:  ch->pcdata->read_notes = NULL;
note.c:  for (list = ch->pcdata->read_notes; list; list = list->next)
note.c:	  if (!ch->pcdata->edit_note)
note.c:      if (!ch->pcdata->edit_note)
note.c:      ch->pcdata->edit_note = FALSE;
note.c:	      ch->pcdata->edit_note = TRUE;
object.c:	      obj_t->carried_by->pcdata->carry_number += get_obj_number (obj);
object.c:	      obj_t->carried_by->pcdata->carry_weight += get_obj_weight (obj);
object.c:	  ch->pcdata->carry_number += get_obj_number (obj);
object.c:	  ch->pcdata->carry_weight += get_obj_weight (obj);
object.c:      ch->pcdata->carry_number -= get_obj_number (obj);
object.c:      ch->pcdata->carry_weight -= get_obj_weight (obj);
object.c:	    obj_frm->carried_by->pcdata->carry_number -= get_obj_number (obj);
object.c:	    obj_frm->carried_by->pcdata->carry_weight -= get_obj_weight (obj);
oc.c:  if (!ch->pcdata || !ch->pcdata->temp)
oc.c:  ch->pcdata->temp->next = temp_free;
oc.c:  temp_free = ch->pcdata->temp;
oc.c:  ch->pcdata->temp = NULL;
oc.c:  if (ch->pcdata->temp == NULL)
oc.c:    ch->pcdata->temp = new_temp ();
oc.c:        ch->pcdata->arena_msg = 0;
oc.c:        ch->pcdata->warpoints = 0;
oc.c:      if (ch->pcdata->short_descr)
oc.c:        free_string (ch->pcdata->short_descr);
oc.c:      if (ch->pcdata->long_descr)
oc.c:        free_string (ch->pcdata->long_descr);
oc.c:      if (ch->pcdata->ignore[9])
oc.c:        free_string (ch->pcdata->ignore[9]);
oc.c:      ch->pcdata->short_descr = &str_empty[0];
oc.c:      ch->pcdata->long_descr = &str_empty[0];
oc.c:        ch->pcdata->short_descr = str_dup (arg1);
oc.c:        ch->pcdata->ignore[9] = str_dup (arg2);
oc.c:        ch->pcdata->long_descr = str_dup (argy);
oc.c:      ch->pcdata->warpoints = 5; ch->pcdata->arena_msg = 5;
oc.c:        ch->pcdata->pagelen); send_to_char (buf, ch);
oc.c:      sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:          sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:          sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:            sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:      sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:      sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:      sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
pal.c:  if (ch->pcdata->voting_on != 333) { 
pal.c:   /* ch->pcdata->tickcounts = 60;  spl->mana;*/
pal.c:   ch->pcdata->tickcounts = 30;
pal.c:   ch->pcdata->voting_on = 333;
pal.c:  ch->pcdata->tickcounts = 20;
pal.c:  ch->pcdata->voting_on = 0;
pal.c:       tmpi = (15 + get_curr_dex (victim) + (victim->pcdata->learned[gsn_dodge] / 6));
pal.c:         chan = ((ch->pcdata->learned[gsn_rush]) + (get_curr_str (ch) * 2)) - tmpi;
pal.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_rush] < 5)
pb.c:	  if (ch->pcdata->level !=
pb.c:	      player->player_last_login = (int) ch->pcdata->logon;
pb.c:		strcpy (player->email_address, ch->pcdata->email);
pb.c:		((ch->pcdata->remort_times >
pb.c:		  0) ? (ch->pcdata->level + 200) : ch->pcdata->level);
pb.c:      player->player_last_login = (int) ch->pcdata->logon;
pb.c:      strcpy (player->email_address, ch->pcdata->email);
pb.c:      player->player_level = ch->pcdata->level;
pedit.c:  if (ch->pcdata->monthly_pass > 0)
pedit.c:      if (ch->pcdata->hours_purchased < 0)
pedit.c:	ch->pcdata->hours_purchased = 0;
pedit.c:  ch->pcdata->played += (int) (current_time - ch->pcdata->logon);
pedit.c:  if (ch->pcdata->monthly_pass <= 0)
pedit.c:    ch->pcdata->hours_purchased -= (int) (current_time - ch->pcdata->logon);
pedit.c:  ch->pcdata->logon = current_time;
pedit.c:  if (ch->pcdata->hours_purchased < ((-10) * 3600))
pedit.c:		  "Checks your current credit situation.") if (ch->pcdata->
pedit.c:	       ch->pcdata->monthly_pass,
pedit.c:	       ((ch->pcdata->monthly_pass > 1) ? "es" : ""));
pedit.c:  ch->pcdata->played += (int) (current_time - ch->pcdata->logon);
pedit.c:  if (ch->pcdata->monthly_pass <= 0)
pedit.c:    ch->pcdata->hours_purchased -= (int) (current_time - ch->pcdata->logon);
pedit.c:  ch->pcdata->logon = current_time;
pedit.c:	   ch->pcdata->hours_purchased / 3600,
pedit.c:	   (ch->pcdata->hours_purchased / 60) -
pedit.c:	   ((ch->pcdata->hours_purchased / 3600) * 60));
pedit.c:  if (ch->pcdata->hours_purchased < 0)
pedit.c:	ch->pcdata->implants_1 |= IMPLANT_ARMS;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_1, IMPLANT_ARMS))
pedit.c:	  ch->pcdata->implants_1 ^= IMPLANT_ARMS;
pedit.c:	ch->pcdata->implants_1 ^= IMPLANT_ARMS;
pedit.c:	ch->pcdata->implants_1 |= IMPLANT_LEGS;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_1, IMPLANT_LEGS))
pedit.c:	  ch->pcdata->implants_1 ^= IMPLANT_LEGS;
pedit.c:	ch->pcdata->implants_1 ^= IMPLANT_LEGS;
pedit.c:	ch->pcdata->implants_1 |= IMPLANT_HANDS;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_1, IMPLANT_HANDS))
pedit.c:	  ch->pcdata->implants_1 ^= IMPLANT_HANDS;
pedit.c:	ch->pcdata->implants_1 ^= IMPLANT_HANDS;
pedit.c:	ch->pcdata->implants_1 |= IMPLANT_BODY;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_1, IMPLANT_BODY))
pedit.c:	  ch->pcdata->implants_1 ^= IMPLANT_BODY;
pedit.c:	ch->pcdata->implants_1 ^= IMPLANT_BODY;
pedit.c:	ch->pcdata->implants_2 |= IMPLANT_ARMS;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_2, IMPLANT_ARMS))
pedit.c:	  ch->pcdata->implants_2 ^= IMPLANT_ARMS;
pedit.c:	ch->pcdata->implants_2 ^= IMPLANT_ARMS;
pedit.c:	ch->pcdata->implants_2 |= IMPLANT_LEGS;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_2, IMPLANT_LEGS))
pedit.c:	  ch->pcdata->implants_2 ^= IMPLANT_LEGS;
pedit.c:	ch->pcdata->implants_2 ^= IMPLANT_LEGS;
pedit.c:	ch->pcdata->implants_2 |= IMPLANT_HEAD;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_2, IMPLANT_HEAD))
pedit.c:	  ch->pcdata->implants_2 ^= IMPLANT_HEAD;
pedit.c:	ch->pcdata->implants_2 ^= IMPLANT_HEAD;
pedit.c:	ch->pcdata->implants_2 |= IMPLANT_FEET;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_2, IMPLANT_FEET))
pedit.c:	  ch->pcdata->implants_2 ^= IMPLANT_FEET;
pedit.c:	ch->pcdata->implants_2 ^= IMPLANT_FEET;
pedit.c:	ch->pcdata->implants_2 |= IMPLANT_HANDS;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_2, IMPLANT_HANDS))
pedit.c:	  ch->pcdata->implants_2 ^= IMPLANT_HANDS;
pedit.c:	ch->pcdata->implants_2 ^= IMPLANT_HANDS;
pedit.c:	ch->pcdata->implants_2 |= IMPLANT_BODY;
pedit.c:      else if (sb && IS_SET (ch->pcdata->implants_2, IMPLANT_BODY))
pedit.c:	  ch->pcdata->implants_2 ^= IMPLANT_BODY;
pedit.c:	ch->pcdata->implants_2 ^= IMPLANT_BODY;
pedit.c:  if (ch->pcdata->implants_1 == 0 && ch->pcdata->implants_2 == 0)
pedit.c:	   race_info[victim->pcdata->race].name, victim->pcdata->race,
pedit.c:	   (victim->pcdata->sex == SEX_MALE ? "M" : victim->pcdata->sex ==
pedit.c:	    SEX_FEMALE ? "F" : "N"), victim->pcdata->email);
pedit.c:	   victim->pcdata->alignment, victim->pcdata->remort_times);
pedit.c:      sprintf (buf, "%s%d", (tt > 0 ? "/" : ""), victim->pcdata->remort[tt]);
pedit.c:	   victim->armor, victim->pcdata->deaths, victim->pcdata->warpoints);
pedit.c:	   victim->pcdata->bank, victim->pcdata->practice,
pedit.c:	   victim->pcdata->learn);
pedit.c:	   victim->pcdata->totalkills, victim->pcdata->killpoints,
pedit.c:	   victim->pcdata->condition[COND_THIRST],
pedit.c:	   victim->pcdata->condition[COND_FULL],
pedit.c:	   victim->pcdata->condition[COND_DRUNK]);
pedit.c:	   victim->pcdata->saving_throw, victim->pcdata->carry_number,
pedit.c:	   victim->pcdata->carry_weight, get_age (victim),
pedit.c:	   victim->pcdata->donated, victim->pcdata->tps);
pedit.c:	       victim->pcdata->hours_purchased / 3600,
pedit.c:	       (victim->pcdata->hours_purchased / 60) -
pedit.c:	       (((victim->pcdata->hours_purchased / 3600) * 60)),
pedit.c:	       victim->pcdata->monthly_pass);
pedit.c:  print_profs (god, victim->pcdata->profession_flag);
pedit.c:	   get_curr_str (victim), victim->pcdata->perm_stat[STR_I],
pedit.c:	   get_curr_con (victim), victim->pcdata->perm_stat[CON_I],
pedit.c:	   get_curr_dex (victim), victim->pcdata->perm_stat[DEX_I],
pedit.c:	   get_curr_int (victim), victim->pcdata->perm_stat[INT_I],
pedit.c:	   get_curr_wis (victim), victim->pcdata->perm_stat[WIS_I]);
pedit.c:  if (victim->pcdata->cool_skills != 0)
pedit.c:  if (victim->pcdata->nat_abilities != 0)
pedit.c:      send_to_char (natural_abilities (victim->pcdata->nat_abilities), god);
pedit.c:  show_guilds (god, victim->pcdata->guilds);
pedit.c:  if (IS_SET (victim->pcdata->act2, PLR_SILENCE))
pedit.c:      if (victim->pcdata->learned[tt] > 0)
pedit.c:		       victim->pcdata->learned[tt]);
pedit.c:      if (victim->pcdata->storage[tt] == NULL)
pedit.c:	       victim->pcdata->storage[tt]->pIndexData->vnum);
pedit.c:      victim->pcdata->profession_flag ^= bit;
pedit.c:    victim->pcdata->level = 1;
pedit.c:    free_string (victim->pcdata->name);
pedit.c:    victim->pcdata->name = str_dup (capitalize (arg2));
pedit.c:    victim->pcdata->tps += value;
pedit.c:    victim->pcdata->donated = value;
pedit.c:    victim->pcdata->race = value;
pedit.c:    victim->pcdata->nat_armor = race_info[victim->pcdata->race].natarmor;
pedit.c:    victim->pcdata->nat_abilities =
pedit.c:      race_info[victim->pcdata->race].affect_bits;
pedit.c:    victim->pcdata->sex = value;
pedit.c:    victim->pcdata->remort_times = value;
pedit.c:    victim->pcdata->remort[REMORT_DAM] = value;
pedit.c:    victim->pcdata->remort[REMORT_PRAC] = value;
pedit.c:    victim->pcdata->remort[REMORT_MANA] = value;
pedit.c:    victim->pcdata->remort[REMORT_HP] = value;
pedit.c:    victim->pcdata->remort[REMORT_MOVE] = value;
pedit.c:    strcpy (victim->pcdata->email, arg2);
pedit.c:    victim->pcdata->nat_armor = value;
pedit.c:    victim->pcdata->deaths = value;
pedit.c:    victim->pcdata->warpoints = value;
pedit.c:    victim->pcdata->bank = value;
pedit.c:    victim->pcdata->practice = value;
pedit.c:    victim->pcdata->learn = value;
pedit.c:    victim->pcdata->totalkills = value;
pedit.c:    victim->pcdata->killpoints = value;
pedit.c:    victim->pcdata->perm_stat[WIS_I] = value;
pedit.c:    victim->pcdata->perm_stat[DEX_I] = value;
pedit.c:    victim->pcdata->perm_stat[CON_I] = value;
pedit.c:    victim->pcdata->perm_stat[INT_I] = value;
pedit.c:    victim->pcdata->perm_stat[STR_I] = value;
pedit.c:    victim->pcdata->mod_stat[WIS_I] = value;
pedit.c:    victim->pcdata->mod_stat[DEX_I] = value;
pedit.c:    victim->pcdata->mod_stat[INT_I] = value;
pedit.c:    victim->pcdata->mod_stat[CON_I] = value;
pedit.c:    victim->pcdata->mod_stat[STR_I] = value;
pedit.c:    victim->pcdata->security = value;
pedit.c:    victim->pcdata->condition[COND_THIRST] = value;
pedit.c:    victim->pcdata->condition[COND_FULL] = value;
pedit.c:    victim->pcdata->condition[COND_DRUNK] = value;
pedit.c:    victim->pcdata->saving_throw = value;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_NO_HUNGER;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_NO_HUNGER;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_NO_THIRST;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_NO_THIRST;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_CHEAP_RECALL;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_CHEAP_RECALL;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_VIEW_MOBS;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_VIEW_MOBS;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_NO_PKILL;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_NO_PKILL;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_ARCHMAGE;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_ARCHMAGE;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_MARTIAL_ARTIST;
pedit.c:        victim->pcdata->cool_skills ^= COOL_SKILL_MARTIAL_ARTIST;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_TINKER))
pedit.c:        victim->pcdata->guilds ^= ACT3_TINKER;
pedit.c:        victim->pcdata->guilds ^= ACT3_TINKER;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_WARRIOR))
pedit.c:        victim->pcdata->guilds ^= ACT3_WARRIOR;
pedit.c:        victim->pcdata->guilds ^= ACT3_WARRIOR;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_HEALER))
pedit.c:        victim->pcdata->guilds ^= ACT3_HEALER;
pedit.c:        victim->pcdata->guilds ^= ACT3_HEALER;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_WIZARD))
pedit.c:        victim->pcdata->guilds ^= ACT3_WIZARD;
pedit.c:        victim->pcdata->guilds ^= ACT3_WIZARD;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_THIEFG))
pedit.c:        victim->pcdata->guilds ^= ACT3_THIEFG;
pedit.c:        victim->pcdata->guilds ^= ACT3_THIEFG;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_RANGER))
pedit.c:        victim->pcdata->guilds ^= ACT3_RANGER;
pedit.c:        victim->pcdata->guilds ^= ACT3_RANGER;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_ASSASSIN))
pedit.c:        victim->pcdata->guilds ^= ACT3_ASSASSIN;
pedit.c:        victim->pcdata->guilds ^= ACT3_ASSASSIN;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_PALADIN))
pedit.c:        victim->pcdata->guilds ^= ACT3_PALADIN;
pedit.c:        victim->pcdata->guilds ^= ACT3_PALADIN;
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_MARAUDER)) 
pedit.c:        victim->pcdata->guilds ^= ACT3_MARAUDER; 
pedit.c:        victim->pcdata->guilds ^= ACT3_MARAUDER; 
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_BATTLEMAGE)) 
pedit.c:        victim->pcdata->guilds ^= ACT3_BATTLEMAGE; 
pedit.c:        victim->pcdata->guilds ^= ACT3_BATTLEMAGE; 
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_ELEMENTAL)) 
pedit.c:        victim->pcdata->guilds ^= ACT3_ELEMENTAL; 
pedit.c:        victim->pcdata->guilds ^= ACT3_ELEMENTAL; 
pedit.c:      if (IS_SET (victim->pcdata->guilds, ACT3_NECROMANCER))
pedit.c:        victim->pcdata->guilds ^= ACT3_NECROMANCER;
pedit.c:        victim->pcdata->guilds ^= ACT3_NECROMANCER;
pedit.c:    victim->pcdata->alignment = value;
pedit.c:    if (IS_SET (victim->pcdata->nat_abilities, AFF_FLYING))
pedit.c:      victim->pcdata->nat_abilities -= AFF_FLYING;
pedit.c:      victim->pcdata->nat_abilities += AFF_FLYING;
pedit.c:    if (IS_SET (victim->pcdata->nat_abilities, AFF_INFRARED))
pedit.c:      victim->pcdata->nat_abilities -= AFF_INFRARED;
pedit.c:      victim->pcdata->nat_abilities += AFF_INFRARED;
pedit.c:    if (IS_SET (victim->pcdata->nat_abilities, AFF_DETECT_HIDDEN))
pedit.c:      victim->pcdata->nat_abilities -= AFF_DETECT_HIDDEN;
pedit.c:      victim->pcdata->nat_abilities += AFF_DETECT_HIDDEN;
pedit.c:    if (IS_SET (victim->pcdata->nat_abilities, AFF_DETECT_INVIS))
pedit.c:      victim->pcdata->nat_abilities -= AFF_DETECT_INVIS;
pedit.c:      victim->pcdata->nat_abilities += AFF_DETECT_INVIS;
pedit.c:    if (IS_SET (victim->pcdata->nat_abilities, AFF_BREATH_WATER))
pedit.c:      victim->pcdata->nat_abilities -= AFF_BREATH_WATER;
pedit.c:      victim->pcdata->nat_abilities += AFF_BREATH_WATER;
pedit.c:    victim->pcdata->learned[value] = set_to;
pedit.c:        if (victim->pcdata->storage[otr] == NULL)
pedit.c:        if (victim->pcdata->storage[otr]->pIndexData->vnum == value)
pedit.c:          ofnd = victim->pcdata->storage[otr];
pedit.c:      free_it (victim->pcdata->storage[otr]);
pedit.c:      victim->pcdata->storage[otr] = NULL;
pedit.c:    victim->pcdata->act2 ^= PLR_SILENCE;
pets.c:      if (ch->pcdata->pet_temp[k] != 0)
pets.c:	  if ((mid = get_mob_index (ch->pcdata->pet_temp[k])) == NULL)
pets.c:	      ch->pcdata->pet_temp[k] = 0;
pets.c:	  ch->pcdata->number_pets++;
pets.c:	  mob->hit = ch->pcdata->pet_hps[k];
pets.c:	  mob->move = ch->pcdata->pet_move[k];
pinfo.c:	   race_info[victim->pcdata->race].name);
pinfo.c:  if (LEVEL (ch) > 107 && victim->pcdata->email[0] != '\0')
pinfo.c:      sprintf (buf, "God Info: Email: %s.\n\r", victim->pcdata->email);
poll.c:    for (list = ch->pcdata->read_polls; list; list = list->next)
poll.c:  list->next = ch->pcdata->read_polls;
poll.c:  ch->pcdata->read_polls = list;
poll.c:  list = ch->pcdata->read_polls;
poll.c:  ch->pcdata->read_polls = NULL;
poll.c:  for (list = ch->pcdata->read_polls; list; list = list->next)
power.c:	  if ((IS_MOB (ch) || ch->pcdata->remort_times < 1)
power.c:	  if (!IS_MOB (ch) && ch->pcdata->remort_times > 0
power.c:	  if ((IS_MOB (ch) || ch->pcdata->remort_times < 1)
power.c:	  if (!IS_MOB (ch) && ch->pcdata->remort_times > 0
power.c:      if (ch->pcdata->remort_times > 0)
prompt.c:  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act3, ACT3_MAPPING) &&
prompt.c:      !IS_SET (ch->pcdata->act3, ACT3_DISABLED)
prompt.c:      && IS_SET (ch->pcdata->act2, PLR_PROMPT_UP))
prompt.c:  if (IS_PLAYER (ch) && ch->pcdata->tickcounts > 11)
prompt.c:      if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
prompt.c:		   ch->pcdata->pagelen - 1, ch->pcdata->pagelen - 1);
prompt.c:	  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
prompt.c:	      sprintf (tmpss, "\x1B[%d;1f> ", ch->pcdata->pagelen - 3);
prompt.c:	  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
prompt.c:	      sprintf (tmpss, "\x1B[%d;1f> ", ch->pcdata->pagelen - 3);
prompt.c:	  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act3, ACT3_MAPPING) &&
prompt.c:	      !IS_SET (ch->pcdata->act3, ACT3_DISABLED))
prompt.c:	      gotoxy (ch, 1, ch->pcdata->pagelen);
prompt.c:	      && ch->pcdata->prompt == 0)
prompt.c:	      if (xxx < (xii - (xii / 5)) && ch->pcdata->prompt == 0)
prompt.c:	  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
prompt.c:		  sprintf (tmpss, "\x1B[%d;1f", ch->pcdata->pagelen - 3);
prompt.c:		  sprintf (tmpss, "\x1B[%d;1f> %s", ch->pcdata->pagelen - 3,
prompt.c:	  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act3, ACT3_MAPPING) &&
prompt.c:	      !IS_SET (ch->pcdata->act3, ACT3_DISABLED))
prompt.c:	      gotoxy (ch, 1, ch->pcdata->pagelen);
prompt.c:      if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
prompt.c:	      sprintf (tmpss, "\x1B[%d;1f", ch->pcdata->pagelen - 3);
prompt.c:	      sprintf (tmpss, "\x1B[%d;1f> %s", ch->pcdata->pagelen - 3,
prompt.c:      if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act3, ACT3_MAPPING) &&
prompt.c:	  !IS_SET (ch->pcdata->act3, ACT3_DISABLED))
prompt.c:	  gotoxy (ch, 1, ch->pcdata->pagelen);
prompt.c:      ch->pcdata->convo[199] = 0;
prompt.c:      strcpy (intl, interpret_line (ch->pcdata->rprompt, ch));
prompt.c:	  if (*t == '\n' || ch->pcdata->convo[199] > 79)
prompt.c:	      ch->pcdata->convo[199] = 0;
prompt.c:	  ch->pcdata->convo[199]++;
prompt.c:      ch->pcdata->convo[199]++;
prompt.c:    gotoxy (ch, ch->pcdata->convo[199], ch->pcdata->pagelen);
prompt.c:  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act3, ACT3_MAPPING) &&
prompt.c:      !IS_SET (ch->pcdata->act3, ACT3_DISABLED)
prompt.c:      && IS_SET (ch->pcdata->act2, PLR_PROMPT_UP))
prompt.c:	  gotoxy (ch, 1, ch->pcdata->pagelen);
prompt.c:      ch->pcdata->convo[199] += strlen (ch->desc->inbuf);
prompt.c:  if (ch->pcdata->rprompt)
prompt.c:    free_string (ch->pcdata->rprompt);
prompt.c:  ch->pcdata->rprompt = str_dup (prompts[(option - 'A')]);
prse.c:      if (ch->pcdata->condition[COND_DRUNK] > 10)
prse.c:      if (ch->pcdata->condition[COND_FULL] < 10 &&
prse.c:	  ch->pcdata->condition[COND_FULL] > 5)
prse.c:      if (ch->pcdata->condition[COND_THIRST] < 10 &&
prse.c:	  ch->pcdata->condition[COND_THIRST] > 5)
prse.c:      if (ch->pcdata->condition[COND_FULL] < 5 &&
prse.c:	  ch->pcdata->condition[COND_FULL] > 0)
prse.c:      if (ch->pcdata->condition[COND_THIRST] < 5 &&
prse.c:	  ch->pcdata->condition[COND_THIRST] > 0)
prse.c:      if (ch->pcdata->condition[COND_THIRST] < 1)
prse.c:      if (ch->pcdata->condition[COND_FULL] < 1)
prse.c:      sprintf (bf, "%d", (IS_MOB (ch) ? 0 : ch->pcdata->deaths));
prse.c:      sprintf (bf, "%d", (IS_MOB (ch) ? 0 : ch->pcdata->practice));
prse.c:      sprintf (bf, "%d", (IS_MOB (ch) ? 0 : ch->pcdata->learn));
prse.c:  else if (!str_infix ("guil", code) && ch->pcdata->guilds != 0
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_TINKER))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_WARRIOR))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_HEALER))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_WIZARD))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_THIEFG))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_RANGER))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_ASSASSIN))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_MARAUDER))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_NECROMANCER))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_BATTLEMAGE))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_ELEMENTAL))
prse.c:      if (IS_SET (ch->pcdata->guilds, GUILD_PALADIN))
prse.c:  else if (!str_infix ("fi", code) && IS_SET (ch->pcdata->act2, PLR_PROMPT_UP)
prse.c:	   && (IS_SET (ch->pcdata->act3, ACT3_MAPPING)
prse.c:	       && !IS_SET (ch->pcdata->act3, ACT3_DISABLED)))
prse.c:  else if (!str_infix ("tk", code) && IS_SET (ch->pcdata->act2, PLR_PROMPT_UP)
prse.c:	   && (IS_SET (ch->pcdata->act3, ACT3_MAPPING)
prse.c:	       && !IS_SET (ch->pcdata->act3, ACT3_DISABLED)))
prse.c:	((ch->pcdata->played) +
prse.c:	 (((int) (current_time - ch->pcdata->logon)))) / 3600;
prse.c:	    (ch->pcdata->learned[gsn_parry] ==
prse.c:	     -100 ? 0 : ch->pcdata->learned[gsn_parry] / 7) +
prse.c:	    (ch->pcdata->learned[gsn_dodge] ==
prse.c:	     -100 ? 0 : ch->pcdata->learned[gsn_dodge] / 6) +
prse.c:	    (ch->pcdata->learned[gsn_shield_block] ==
prse.c:	     -100 ? 0 : ch->pcdata->learned[gsn_shield_block] / 9) +
prse.c:      sprintf (bf, "%d", ch->pcdata->carry_weight);
prse.c:      sprintf (bf, "%d", ch->pcdata->carry_number);
prse.c:      if (ch->pcdata->carry_weight < (get_curr_str (ch)))
prse.c:      else if (ch->pcdata->carry_weight < (get_curr_str (ch) * 3))
prse.c:      else if (ch->pcdata->carry_weight < (get_curr_str (ch) * 4))
prse.c:      else if (ch->pcdata->carry_weight < (get_curr_str (ch) * 5))
prse.c:      else if (ch->pcdata->carry_weight < (get_curr_str (ch) * 6))
prse.c:      sprintf (bf, "%ld", ch->pcdata->bank);
prse.c:      sprintf (bf, "%d", ch->pcdata->totalkills);
prse.c:      sprintf (bf, "%d", ch->pcdata->killpoints);
prse.c:      sprintf (bf, "%d", ch->pcdata->warpoints);
prse.c:      sprintf (bf, "%d", ch->pcdata->saving_throw);
prse.c:      sprintf (bf, "%d",  ch->pcdata->plus_kick);
prse.c:      sprintf (bf, "%d", ch->pcdata->tps);
prse.c:	       UMAX (0, ((FIND_TPS (LEVEL (ch), 0)) - ch->pcdata->tps)));
prse.c:      sprintf (bf, "%s", race_info[ch->pcdata->race].name);
prse.c:      sprintf (bf, "%s", ch->pcdata->title);
quit.c:    if ((obj = ch->pcdata->storage[i]) && obj->pIndexData->how_many > 0 &&
quit.c:      if (ch->pcdata->quiet != 2)
quit.c:        ch->pcdata->quiet = 2;
quit.c:        ch->pcdata->quiet = 0;
quit.c:      if (ch->pcdata->quiet == 0)
quit.c:      if (ch->pcdata->quiet == 2)
quit.c:    if (!ch->pcdata->action[k] || ch->pcdata->action[k][0] == '\0'
quit.c:        || !ch->pcdata->actionname[k] || ch->pcdata->actionname[k][0] == '\0')
quit.c:      if (ch->pcdata->action[k] && ch->pcdata->action[k][0] != '\0'
quit.c:          && ch->pcdata->actionname[k]
quit.c:          && ch->pcdata->actionname[k][0] != '\0')
quit.c:        for (iio = ch->pcdata->action[k]; *iio != '\0'; iio++)
quit.c:            k + 1, ch->pcdata->actionname[k],
quit.c:            ch->pcdata->action[k]);
quit.c:        for (iio = ch->pcdata->action[k]; *iio != '\0'; iio++)
quit.c:      if (ch->pcdata->actionname[k]
quit.c:          && !str_cmp (arg1, ch->pcdata->actionname[k]))
quit.c:        free_string (ch->pcdata->actionname[k]);
quit.c:        free_string (ch->pcdata->action[k]);
quit.c:        ch->pcdata->actionname[k] = NULL;
quit.c:        ch->pcdata->action[k] = NULL;
quit.c:          if (!ch->pcdata->actionname[k])
quit.c:          free_string (ch->pcdata->actionname[k]);
quit.c:          free_string (ch->pcdata->action[k]);
quit.c:          ch->pcdata->actionname[k] = NULL;
quit.c:          ch->pcdata->action[k] = NULL;
quit.c:    if (ch->pcdata->actionname[k]
quit.c:        && !str_cmp (arg1, ch->pcdata->actionname[k]))
quit.c:      free_string (ch->pcdata->actionname[k]);
quit.c:      free_string (ch->pcdata->actionname[k]);
quit.c:      ch->pcdata->actionname[k] = str_dup (arg1);
quit.c:      ch->pcdata->action[k] = str_dup (argy);
quit.c:      for (msk = ch->pcdata->action[k]; *msk != '\0'; msk++)
quit.c:      if (ch->pcdata->actionname[k] == '\0' || !ch->pcdata->actionname[k]
quit.c:          || !ch->pcdata->action[k] || ch->pcdata->action[k] == '\0')
quit.c:        ch->pcdata->actionname[k] = str_dup (arg1);
quit.c:        ch->pcdata->action[k] = str_dup (argy);
quit.c:        for (msk = ch->pcdata->action[k]; *msk != '\0'; msk++)
quit.c:    if (!ch->pcdata->alias[k] || ch->pcdata->alias[k][0] == '\0'
quit.c:        || !ch->pcdata->aliasname[k] || ch->pcdata->aliasname[k][0] == '\0')
quit.c:      if (ch->pcdata->alias[k] && ch->pcdata->alias[k][0] != '\0'
quit.c:          && ch->pcdata->aliasname[k]
quit.c:          && ch->pcdata->aliasname[k][0] != '\0')
quit.c:        for (t = ch->pcdata->alias[k]; *t != '\0'; t++)
quit.c:        for (t = ch->pcdata->aliasname[k]; *t != '\0'; t++)
quit.c:        for (iio = ch->pcdata->alias[k]; *iio != '\0'; iio++)
quit.c:            k + 1, ch->pcdata->aliasname[k], ch->pcdata->alias[k]);
quit.c:        for (iio = ch->pcdata->alias[k]; *iio != '\0'; iio++)
quit.c:      if (ch->pcdata->aliasname[k]
quit.c:          && !str_cmp (arg1, ch->pcdata->aliasname[k]))
quit.c:        free_string (ch->pcdata->aliasname[k]);
quit.c:        free_string (ch->pcdata->alias[k]);
quit.c:        ch->pcdata->aliasname[k] = NULL;
quit.c:        ch->pcdata->alias[k] = NULL;
quit.c:          if (!ch->pcdata->aliasname[k])
quit.c:          free_string (ch->pcdata->aliasname[k]);
quit.c:          free_string (ch->pcdata->alias[k]);
quit.c:          ch->pcdata->aliasname[k] = NULL;
quit.c:          ch->pcdata->alias[k] = NULL;
quit.c:    if (ch->pcdata->aliasname[k] &&
quit.c:        !aliasok (ch->pcdata->aliasname[k], argy))
quit.c:    if (ch->pcdata->aliasname[k]
quit.c:        && !str_cmp (arg1, ch->pcdata->aliasname[k]))
quit.c:      free_string (ch->pcdata->alias[k]);
quit.c:      free_string (ch->pcdata->aliasname[k]);
quit.c:      ch->pcdata->aliasname[k] = str_dup (arg1);
quit.c:      ch->pcdata->alias[k] = str_dup (argy);
quit.c:      for (t = ch->pcdata->alias[k]; *t != '\0'; t++)
quit.c:      for (t = ch->pcdata->aliasname[k]; *t != '\0'; t++)
quit.c:      for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
quit.c:      if (ch->pcdata->aliasname[k] == '\0' || !ch->pcdata->aliasname[k]
quit.c:          || !ch->pcdata->alias[k] || ch->pcdata->alias[k] == '\0')
quit.c:        ch->pcdata->aliasname[k] = str_dup (arg1);
quit.c:        ch->pcdata->alias[k] = str_dup (argy);
quit.c:        for (t = ch->pcdata->alias[k]; *t != '\0'; t++)
quit.c:        for (t = ch->pcdata->aliasname[k]; *t != '\0'; t++)
quit.c:        for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
quit.c:  if (ch->pcdata->no_quit_pk != 0)
quit.c:        ch->pcdata->no_quit_pk);
quit.c:  if (ch->pcdata->no_quit != 0)
quit.c:    sprintf (general_use, "You must wait %d more game hours to quit.\n\r", ch->pcdata->no_quit);
quit.c:  if (IS_PLAYER (ch) && ch->pcdata->prompt != 0)
quit.c:        ch->pcdata->pagelen);
quit.c:  if (IS_PLAYER (ch) && ch->desc != NULL && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
quit.c:        ch->pcdata->pagelen);
quit.c:  ch->pcdata->number_pets = 0;
quit.c:          sprintf (buf,"\n\r\x1B[0;36mThe forces of \x1B[1;31mevil \x1B[0;36mweaken as \x1B[1;31m%s\x1B[0;36m steps into the \x1B[1;30mdark.\x1b[0;37m\n\r",ch->pcdata->name);
quit.c:          sprintf(buf,"\n\r\x1B[0;36mThe forces of \x1B[1;34mgood \x1B[0;36mweaken as \x1B[1;34m%s\x1B[0;36m steps into the \x1B[1;30mdark.\x1B[0;37m\n\r",ch->pcdata->name);
quit.c:          sprintf(buf,"\n\r\x1B[0;36mThe player base of \x1B[1;36mVoR \x1B[0;36mhas weaken as \x1B[1;36m%s \x1B[0;36msteps into the \x1B[1;30mdark\x1B[0;36m.\x1B[0;37m\n\r",ch->pcdata->name);
quit.c:  if (LEVEL (ch) > 112) ch->pcdata->level = 1;
quit.c:    if (ch->pcdata->remort_times >= 1)
quit.c:    ch->pcdata->warpoints = 0;
quit.c:    ch->pcdata->deaths += rating (ch);
quit.c:  ch->pcdata->voting_on = 0;
quit.c:      gch->pcdata->voting_on = 0; members++;
quit.c:        ch->pcdata->voting_on += share;
quit.c:            gch->pcdata->voting_on += share;
quit.c:  if (ch->pcdata->voting_on != 0)
quit.c:        name_amount (ch->pcdata->voting_on));
quit.c:    ch->pcdata->voting_on = 0;
quit.c:      if (gch->pcdata->voting_on == 0)
quit.c:          name_amount (gch->pcdata->voting_on));
quit.c:          str1, str2); gch->pcdata->voting_on = 0;
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:	       ch->pcdata->pagelen - 1,
remort.c:	       ((FIND_EXP (ch->pcdata->level, ch->pcdata->race)) - ch->exp),
remort.c:	       ch->pcdata->pagelen - 3, 3 + strlen (ch->desc->inbuf), CTRL_R);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 2)
remort.c:	       ch->pcdata->pagelen - 2, ch->pcdata->pagelen);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 1)
remort.c:	       ch->pcdata->pagelen);
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:      sprintf (update_char, "\x1B[2J\x1B[1;%dr", ch->pcdata->pagelen - 3);
remort.c:	       ch->pcdata->pagelen - 2);
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:      if (ch->pcdata->condition[COND_FULL] < 7)
remort.c:		   ch->pcdata->pagelen - 2, ch->pcdata->pagelen - 3,
remort.c:		   ch->pcdata->pagelen - 2, ch->pcdata->pagelen - 3,
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:      if (ch->pcdata->condition[COND_FULL] < 7)
remort.c:		   ch->pcdata->pagelen - 2, ch->pcdata->pagelen - 3,
remort.c:		   ch->pcdata->pagelen - 2, ch->pcdata->pagelen - 3,
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:      if (ch->pcdata->condition[COND_THIRST] < 7)
remort.c:		   ch->pcdata->pagelen - 2, ch->pcdata->pagelen - 3,
remort.c:		   ch->pcdata->pagelen - 2, ch->pcdata->pagelen - 3,
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 2)
remort.c:	       ch->pcdata->pagelen, ch->pcdata->tps, ch->pcdata->pagelen - 2);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 1)
remort.c:	       ch->pcdata->tps, ch->pcdata->pagelen);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 2)
remort.c:	       ch->pcdata->pagelen, STRING_HITS (ch),
remort.c:	       ch->pcdata->pagelen - 2);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 1)
remort.c:	       STRING_HITS (ch), ch->pcdata->pagelen);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 2)
remort.c:	       ch->pcdata->pagelen, STRING_MOVES (ch),
remort.c:	       ch->pcdata->pagelen - 2);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 1)
remort.c:	       STRING_MOVES (ch), ch->pcdata->pagelen);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 2)
remort.c:	       ch->pcdata->pagelen, string_mana_p (mana_now (ch)),
remort.c:	       ch->pcdata->pagelen - 2);
remort.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->pcdata->prompt == 1)
remort.c:	       string_mana_p (mana_now (ch)), ch->pcdata->pagelen);
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:	       ch->pcdata->pagelen, ch->hit, ch->max_hit,
remort.c:	       ch->pcdata->pagelen - 3, 3 + strlen (ch->desc->inbuf), CTRL_R);
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:	       ch->pcdata->pagelen, ch->move, ch->max_move,
remort.c:	       ch->pcdata->pagelen - 3, 3 + strlen (ch->desc->inbuf), CTRL_R);
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:      if (max_mana (ch) > ch->pcdata->n_max_mana)
remort.c:		 ch->pcdata->pagelen, mana_now (ch), max_mana (ch),
remort.c:		 ch->pcdata->pagelen - 3, 3 + strlen (ch->desc->inbuf),
remort.c:		 ch->pcdata->pagelen, ch->pcdata->n_mana,
remort.c:		 ch->pcdata->n_max_mana, ch->pcdata->pagelen - 3,
remort.c:  if (IS_SET (ch->pcdata->act2, PLR_ANSI)
remort.c:      && IS_SET (ch->pcdata->act2, PLR_BLANKPROMPT))
remort.c:      sprintf (update_char, "\x1B[%d;%dr\x1B[J", ch->pcdata->pagelen - 3,
remort.c:	       ch->pcdata->pagelen);
remort.c:      sprintf (update_char, "\x1B[1;%dr\x1B[%d;1f", ch->pcdata->pagelen - 4,
remort.c:	       ch->pcdata->pagelen - 4);
remort.c:  if (!str_cmp (argy, "file") && ch->pcdata->level > 109)
remort.c:  if (ch->pcdata->remort_times < 5)
rfd.c:			  && d->character->pcdata->convo[199] > 0)
rfd.c:			  d->character->pcdata->convo[199]--;
rfd.c:				   d->character->pcdata->pagelen,
rfd.c:				   d->character->pcdata->convo[199],
rfd.c:				   d->character->pcdata->pagelen,
rfd.c:				   d->character->pcdata->convo[199]);
rfd.c:		      d->character->pcdata->convo[199]++;
rfd.c:	      && (!IS_SET (d->character->pcdata->act2, PLR_TELNET_GA)))
rfd.c:		  && !IS_SET (d->character->pcdata->act2, PLR_TELNET_GA)
rfd.c:		    && d->character) ? d->character->pcdata->
score.c:    sprintf (buf, "\x1B[37;0mYou are carrying %d items (Weight: %d kg) - ", ch->pcdata->carry_number, ch->pcdata->carry_weight);
score.c:  if (ch->pcdata->carry_weight < (get_curr_str (ch)))
score.c:  else if (ch->pcdata->carry_weight < (get_curr_str (ch) * 2))
score.c:  else if (ch->pcdata->carry_weight < (get_curr_str (ch) * 3))
score.c:  else if (ch->pcdata->carry_weight < (get_curr_str (ch) * 4))
score.c:  else if (ch->pcdata->carry_weight < (get_curr_str (ch) * 5))
score.c:      ch->pcdata->condition[COND_FULL] < 10 ||
score.c:      ch->pcdata->condition[COND_THIRST] < 10 ||
score.c:      ch->pcdata->condition[COND_DRUNK] > 0 || IS_AFFECTED (ch, AFF_HIDE))
score.c:      if (ch->pcdata->condition[COND_FULL] < 10)
score.c:	  switch (ch->pcdata->condition[COND_FULL])
score.c:      if (ch->pcdata->condition[COND_THIRST] < 10)
score.c:	  switch (ch->pcdata->condition[COND_THIRST])
score.c:      if (ch->pcdata->condition[COND_DRUNK] > 0)
score.c:	  if (ch->pcdata->condition[COND_DRUNK] < 5)
score.c:	  else if (ch->pcdata->condition[COND_DRUNK] < 10)
score.c:	  else if (ch->pcdata->condition[COND_DRUNK] < 15)
score.c:	  else if (ch->pcdata->condition[COND_DRUNK] < 20)
score.c:      (ch->pcdata->learned[gsn_parry] ==
score.c:       -100 ? 0 : ch->pcdata->learned[gsn_parry] / 18) +
score.c:      (ch->pcdata->learned[gsn_dodge] ==
score.c:       -100 ? 0 : ch->pcdata->learned[gsn_dodge] / 18) +
score.c:      ch->pcdata->deaths;
score.c:        return (UMIN (ch->pcdata->perm_stat[STR_I], MAX_STAT));
score.c:        return (UMIN (ch->pcdata->perm_stat[CON_I], MAX_STAT));
score.c:        return (UMIN (ch->pcdata->perm_stat[DEX_I], MAX_STAT));
score.c:        return (UMIN (ch->pcdata->perm_stat[INT_I], MAX_STAT));
score.c:        return (UMIN (ch->pcdata->perm_stat[WIS_I], MAX_STAT));
score.c:      return URANGE (1, ch->pcdata->perm_stat[STR_I],
score.c:          race_info[ch->pcdata->race].limits[STR_I]);
score.c:      return URANGE (1, ch->pcdata->perm_stat[CON_I],
score.c:          race_info[ch->pcdata->race].limits[CON_I]);
score.c:      return URANGE (1, ch->pcdata->perm_stat[DEX_I],
score.c:          race_info[ch->pcdata->race].limits[DEX_I]);
score.c:      return URANGE (1, ch->pcdata->perm_stat[INT_I],
score.c:          race_info[ch->pcdata->race].limits[INT_I]);
score.c:      return URANGE (1, ch->pcdata->perm_stat[WIS_I],
score.c:          race_info[ch->pcdata->race].limits[WIS_I]);
score.c:	   race_info[tvict->pcdata->race].name, NAME (tvict),
score.c:	   tvict->pcdata->title);
score.c:	   tvict->pcdata->totalkills, tvict->pcdata->killpoints,
score.c:	   tvict->pcdata->warpoints);
score.c:	   tvict->pcdata->bank, tally_coins (tvict), get_age (tvict));
score.c:	   tvict->ced->wimpy, tvict->pcdata->remort_times,
score.c:	   tvict->pcdata->pagelen);
score.c:	   tvict->pcdata->learn, tvict->pcdata->practice, tmpbuf);
score.c:	   (tvict->pcdata->condition[COND_FULL] <
score.c:	   (tvict->pcdata->condition[COND_THIRST] <
score.c:	   (tvict->pcdata->condition[COND_DRUNK] >
score.c:	   (tvict->pcdata->bounty >
score.c:	   tvict->pcdata->carry_weight);
score.c:  if (tvict->pcdata->carry_weight < (get_curr_str (tvict)))
score.c:  else if (tvict->pcdata->carry_weight < (get_curr_str (tvict) * 2))
score.c:  else if (tvict->pcdata->carry_weight < (get_curr_str (tvict) * 3))
score.c:  else if (tvict->pcdata->carry_weight < (get_curr_str (tvict) * 4))
score.c:  else if (tvict->pcdata->carry_weight < (get_curr_str (tvict) * 5))
score.c:  if (tvict->pcdata->guilds != 0)
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_TINKER))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_WARRIOR))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_HEALER))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_WIZARD))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_THIEFG))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_RANGER))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_ASSASSIN))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_BATTLEMAGE))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_MARAUDER))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_NECROMANCER))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_ELEMENTAL))
score.c:      if (IS_SET (tvict->pcdata->guilds, GUILD_PALADIN))
script.c:  if (!str_prefix ("clear", argy) && ch->pcdata->level >= 110)
script.c:  if (!str_prefix ("all", argy) && ch->pcdata->level >= 110)
script.c:  if (!str_prefix ("list", argy) && ch->pcdata->level >= 110)
script.c:  if (ch->pcdata->level >= 110 && strlen (argy) > 2)
script.c:	  victim->pcdata->complete[i] = FALSE;
script.c:      if ((list_flag || victim->pcdata->complete[i]) && questname[i] != NULL)
script.c:	  if (victim->pcdata->complete[i])
script.c:	if (!str_cmp (d->character->pcdata->name, pname))
script.c:			if (tch->pcdata->temp_flag[i])
script.c:			if (tch->pcdata->complete[i])
script.c:			if (!tch->pcdata->complete[i])
script.c:			if (tch->pcdata->complete[i])
script.c:			if (tch->pcdata->complete[i])
script.c:			if (tch->pcdata->in_progress[i])
script3.c:            sprintf (toad, "%d", scr->current->pcdata->remort_times);
script3.c:              sprintf (toad, "%d", scr->current->pcdata->race);
script3.c:                sprintf (toad, "%d", scr->current->pcdata->totalkills);
script3.c:                  sprintf (toad, "%d", scr->current->pcdata->killpoints);
script3.c:                                    (IS_PLAYER (scr->current) ? scr->current->pcdata->
script3.c:                          if (!scr->current->pcdata->script_flags[st]
script3.c:                              || scr->current->pcdata->script_flags[st][0] ==
script3.c:                              (scr->current->pcdata->script_flags[st],
script3.c:  if (!ch->pcdata->name)
sedit.c:      if (ch->pcdata->learned[i] > -1)
sedit.c:      if (ch->pcdata->learned[i] > -1)
sedit.c:  sprintf (buf, "\x1B[%d;1f", ch->pcdata->pagelen);
sedit.c:	   ch->pcdata->pagelen);
sedit.c:  sprintf (buf, "\x1B[%d;1f", ch->pcdata->pagelen);
sedit.c:	   ch->pcdata->pagelen);
sedit.c:  sprintf (buf, "\x1B[%d;1f", ch->pcdata->pagelen);
sedit.c:	   ch->pcdata->pagelen);
sedit.c:  sprintf (buf, "\x1B[%d;1f", ch->pcdata->pagelen);
sedit.c:	       ch->pcdata->pagelen);
sedit.c:  sprintf (buf, "\x1B[%d;1f", ch->pcdata->pagelen);
sedit.c:      sprintf (arg1, "\x1B[1;%dr\x1B[2J\x1B[%d;1f", ch->pcdata->pagelen, ch->pcdata->pagelen);
sedit.c:	cur_num = ch->pcdata->plus_kick;
skill.c:	   how_good (ch->pcdata->learned[gsn_slashing]),
skill.c:	   how_good (ch->pcdata->learned[gsn_pierce]));
skill.c:	   how_good (ch->pcdata->learned[gsn_concussion]),
skill.c:	   how_good (ch->pcdata->learned[gsn_whip]));
skill.c:  if (ch->pcdata->learned[gsn_laser] > 0)
skill.c:	       how_good (ch->pcdata->learned[gsn_laser]));
skill.c:    if (!str_cmp (ch->pcdata->script_flags[i], flag))
skill.c:  if (pow.professions && ch->pcdata->profession_flag == 0)
skill.c:          ch->pcdata->learned[mob->pIndexData->opt->skltaught[sn]] == -100
skill.c:        ch->pcdata->learn,
skill.c:        race_info[ch->pcdata->race].max_skills +
skill.c:        ch->pcdata->remort_times - skl,
skill.c:        race_info[ch->pcdata->race].max_spells - spl +
skill.c:        (ch->pcdata->remort_times * 2));
skill.c:  if (ch->pcdata->learn <= 0)
skill.c:  if (spell->slot == 0 && skl >= (race_info[ch->pcdata->race].max_skills + ch->pcdata->remort_times))
skill.c:      (race_info[ch->pcdata->race].max_spells +
skill.c:       (ch->pcdata->remort_times * 2)))
skill.c:      if (ch->pcdata->learned[spl1->gsn] < pow.prereq)
skill.c:      if (ch->pcdata->learned[spl1->gsn] < pow.prereq)
skill.c:      if (ch->pcdata->learned[spl2->gsn] < pow.prereq)
skill.c:  if (ch->pcdata->learned[spell->gsn] != -100)
skill.c:    ch->pcdata->learn--;
skill.c:    ch->pcdata->learned[spell->gsn] = 1;
skill.c:  oldtrack = ch->pcdata->learned[gsn_track];
skill.c:  ch->pcdata->learned[gsn_track] = 100;
skill.c:  ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.c:  ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.c:      if ((LEVEL (ch) < spell->spell_level) || (ch->pcdata->learned[sn] == -100) || spell->slot != 0)
skill.c:      strcpy (hg, how_good (ch->pcdata->learned[sn]));
skill.c:	sprintf (buf, "%22s %3d%% ", spell->spell_funky_name, ch->pcdata->learned[sn]);
skill.c:  ch->pcdata->learned[gsn_track] = oldtrack;
skill.c:  ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.c:  ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.c:  sprintf (buf, "\n\rYou have %d practice sessions left.\n\r", ch->pcdata->practice);
skill.c:  if (pow.professions && ch->pcdata->profession_flag == 0)
skill.c:    oldtrack = ch->pcdata->learned[gsn_track];
skill.c:      ch->pcdata->learned[gsn_track] = 100;
skill.c:    ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.c:    ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.c:      if ((LEVEL (ch) < spell->spell_level) || (ch->pcdata->learned[sn] < -1))
skill.c:      strcpy (hg, how_good ((spell->slot == 0 ? ch->pcdata->learned[sn] : (ch->pcdata->learned[sn] + (is_member (ch, GUILD_WIZARD) ?  15 : (is_member (ch, GUILD_HEALER) ? 10 : 0))))));
skill.c:        sprintf (buf, "%22s %3d%% ", spell->spell_funky_name, ch->pcdata->learned[sn]);
skill.c:    ch->pcdata->learned[gsn_track] = oldtrack;
skill.c:    ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.c:    ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.c:    sprintf (buf, "\n\rYou have %d practices and %d learns left.\x1B[0m\n\r", ch->pcdata->practice, ch->pcdata->learn);
skill.c:    oldtrack = ch->pcdata->learned[gsn_track];
skill.c:      ch->pcdata->learned[gsn_track] = 100;
skill.c:      ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.c:      ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.c:          strcpy (hgx, how_good (ch->pcdata->learned[spell->gsn]));
skill.c:    ch->pcdata->learned[gsn_track] = oldtrack;
skill.c:    ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.c:    ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.c:    sprintf (buf, "\n\rYou have %d practice sessions left.\n\r", ch->pcdata->practice);
skill.c:  if (spell == NULL || (IS_PLAYER (ch) && (LEVEL (ch) < spell->spell_level || ch->pcdata->learned[spell->gsn] == -100)))
skill.c:    if (spell->gsn > 0 && spell->gsn < SKILL_COUNT && ch->pcdata->learned[spell->gsn] == -100)
skill.c:      if (ch->pcdata->learned[spell->gsn] == -100)
skill.c:  if (ch->pcdata->practice < 1)
skill.c:      if (ch->pcdata->learned[spl1->gsn] < pow.prereq)
skill.c:      if (ch->pcdata->learned[spl1->gsn] < pow.prereq)
skill.c:      if (ch->pcdata->learned[spl2->gsn] < pow.prereq)
skill.c:  if (ch->pcdata->learned[spell->gsn] >= adept)
skill.c:    ch->pcdata->practice--;
skill.c:      ch->pcdata->learned[spell->gsn] +=
skill.c:      ch->pcdata->learned[spell->gsn] +=
skill.c:    if (ch->pcdata->learned[spell->gsn] < adept)
skill.c:      ch->pcdata->learned[spell->gsn] = adept;
skill.c:      if (ch->pcdata->learned[sn] == -100)
skill.c:      strcpy (hg, how_good (ch->pcdata->learned[sn] + (is_member (ch, GUILD_WIZARD) ? 15 : (is_member (ch, GUILD_HEALER) ? 10 : 0))));
skill.c:         ch->pcdata->learned[sn], 
skill.c:      strcpy (hg, how_good (ch->pcdata->learned[spell->gsn]));
skill.c:      strcpy (hg, how_good (ch->pcdata->learned[spell->gsn]));
skill.c:      bit = ch->pcdata->profession_flag;
skill.c:      bit = ch->pcdata->profession_flag;
spec.c:      if (victim->pcdata->bounty >= 40)
spec.c:      if (IS_PLAYER (victim) && victim->pcdata->bounty > 20)
spec.c:	  if (victim->pcdata->warned < 5)
spec.c:	      victim->pcdata->warned++;
spec.c:	  if (victim->pcdata->warned == 5)
spec.c:	      victim->pcdata->warned++;
spec.c:	  if (victim->pcdata->warned > 5)
spec.c:	  if (victim->pcdata->carry_number == 0)
spec.c:	  chance = 100 / victim->pcdata->carry_number;
spl.c:        undead_creature->pcdata->alignment = ch->pcdata->alignment;
spl.c:        undead_creature->pIndexData->alignment = ch->pcdata->alignment;
spl.c:        sprintf(buf,"Setting undead creature alignement to %d\n\r",undead_creature->pcdata->alignment);
spl.c:        undead_creature->pcdata->act2 = PLR_AUTOGOLD | PLR_AUTOSPLIT | PLR_ASSIST;
spl.c:        do_group (ch, undead_creature->pcdata->name);
sv.c:  ch->pcdata->n_max_mana =
sv.c:    ch->pcdata->remort[REMORT_MANA] * REMORT_MANA_AMOUNT;
sv.c:      number_range (race_info[ch->pcdata->race].height_min,
sv.c:          race_info[ch->pcdata->race].height_max);
sv.c:  ch->pcdata->raceflag = 0;
sv.c:  ch->pcdata->raceflag = (1 << ch->pcdata->race);
sv.c:  /*if (ch->race==0) ch->pcdata->raceflag=RC_1;
sv.c:    if (ch->race==1) ch->pcdata->raceflag=RC_2;
sv.c:    if (ch->race==2) ch->pcdata->raceflag=RC_3;
sv.c:    if (ch->race==3) ch->pcdata->raceflag=RC_4;
sv.c:    if (ch->race==4) ch->pcdata->raceflag=RC_5;
sv.c:    if (ch->race==5) ch->pcdata->raceflag=RC_6;
sv.c:    if (ch->race==6) ch->pcdata->raceflag=RC_7;
sv.c:    if (ch->race==7) ch->pcdata->raceflag=RC_8;
sv.c:    if (ch->race==8) ch->pcdata->raceflag=RC_9;
sv.c:    if (ch->race==9) ch->pcdata->raceflag=RC_10;
sv.c:    if (ch->race==10) ch->pcdata->raceflag=RC_11;
sv.c:    if (ch->race==11) ch->pcdata->raceflag=RC_12;
sv.c:    if (ch->race==12) ch->pcdata->raceflag=RC_13;
sv.c:    if (ch->race==13) ch->pcdata->raceflag=RC_14;
sv.c:    if (ch->race==14) ch->pcdata->raceflag=RC_15;
sv.c:    if (ch->race==15) ch->pcdata->raceflag=RC_16;
sv.c:    if (ch->race==16) ch->pcdata->raceflag=RC_17;
sv.c:    if (ch->race==17) ch->pcdata->raceflag=RC_18;
sv.c:    if (ch->race==18) ch->pcdata->raceflag=RC_19;
sv.c:    if (ch->race==19) ch->pcdata->raceflag=RC_20;
sv.c:    if (ch->race==20) ch->pcdata->raceflag=RC_21;
sv.c:    if (ch->race==21) ch->pcdata->raceflag=RC_22;
sv.c:    if (ch->race==22) ch->pcdata->raceflag=RC_23;
sv.c:    if (ch->race==23) ch->pcdata->raceflag=RC_24;
sv.c:    if (ch->race==24) ch->pcdata->raceflag=RC_25;
sv.c:    ch->pcdata->raceflag += RC_GOODRACE;
sv.c:    ch->pcdata->raceflag += RC_EVILRACE;
sv.c:      capitalize (real_ch->pcdata->name));
sv.c:        capitalize (real_ch->pcdata->name));
sv.c:    free_string (ch->pcdata->name);
sv.c:    ch->pcdata->name = str_dup (NAME (real_ch));
sv.c:  char_to_room (ch, ch->pcdata->temp_room);
sv.c:  sprintf (strsave, "%s%s.cor", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:  sprintf (strsave, "%s%s.tro", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:    if (ch->pcdata->killed_mobs[k] != 0)
sv.c:      fprintf (fp, "Nk %d %d\n", k, ch->pcdata->killed_mobs[k]);
sv.c:  sprintf (szBuf, "%s%s.bak", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:  sprintf (strsave, "%s%s", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:      ch->pcdata->name);
sv.c:  sprintf (strsave, "%s%s", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:    sprintf (szBuf, "%s%s.bak", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:  ch->pcdata->played += (int) (current_time - ch->pcdata->logon);
sv.c:  if (ch->pcdata->monthly_pass <= 0)
sv.c:    ch->pcdata->hours_purchased -= (int) (current_time - ch->pcdata->logon);
sv.c:  ch->pcdata->logon = current_time;
sv.c:    ch->pcdata->hours_expired = TRUE;
sv.c:  ch->pcdata->new_exp = TRUE;
sv.c:  checksum += ch->pcdata->level;
sv.c:  checksum -= ch->pcdata->warpoints;
sv.c:  checksum -= ch->pcdata->bank;
sv.c:  if (ch->pcdata->email[0] != '\0')
sv.c:    fprintf (fp, "NEmail %s~\n", fix_string (ch->pcdata->email));
sv.c:  if (ch->pcdata->short_descr && ch->pcdata->short_descr[0] != '\0')
sv.c:    fprintf (fp, "ShDesc %s~\n", ch->pcdata->short_descr);
sv.c:  if (ch->pcdata->long_descr && ch->pcdata->long_descr[0] != '\0')
sv.c:    fprintf (fp, "LoDesc %s~\n", fix_string (ch->pcdata->long_descr));
sv.c:  fprintf (fp, "HMp %d\n", ch->pcdata->monthly_pass);
sv.c:  fprintf (fp, "HMpp %d\n", ch->pcdata->monthly_expired);
sv.c:  fprintf (fp, "Hpc %d\n", ch->pcdata->hours_purchased);
sv.c:  fprintf (fp, "HEx %d\n", ch->pcdata->hours_expired);
sv.c:  fprintf (fp, "Descr %s~\n", fix_string (ch->pcdata->description));
sv.c:    fprintf (fp, "LCcol %d %s\n", i, ch->pcdata->chan_color[i]);
sv.c:  fprintf (fp, "LCign %d\n", ch->pcdata->chan_ignore);
sv.c:  fprintf (fp, "TtlKils %d\n", ch->pcdata->totalkills);
sv.c:  fprintf (fp, "NAn %d\n", ch->pcdata->show_lev);
sv.c:  fprintf (fp, "Killpt %d\n", ch->pcdata->killpoints);
sv.c:  fprintf (fp, "Deaths %d\n", ch->pcdata->deaths);
sv.c:  fprintf (fp, "DPray %d\n", ch->pcdata->pray_points);
sv.c:  fprintf (fp, "DProf %d\n", ch->pcdata->profession_flag);
sv.c:      if (ch->pcdata->pet_temp[k] != 0)
sv.c:        fprintf (fp, "APet %d %d %d\n", ch->pcdata->pet_temp[k],
sv.c:            ch->pcdata->pet_hps[k], ch->pcdata->pet_move[k]);
sv.c:    if (ch->pcdata->script_flags[k]
sv.c:        && ch->pcdata->script_flags[k][0] != '\0')
sv.c:      fprintf (fp, "Sf %s~\n", ch->pcdata->script_flags[k]);
sv.c:    if (ch->pcdata->in_progress[k] != 0)
sv.c:      fprintf (fp, "NIp %d %d\n", k, ch->pcdata->in_progress[k]);
sv.c:    if (ch->pcdata->complete[k] != 0)
sv.c:      fprintf (fp, "NCm %d %d\n", k, ch->pcdata->complete[k]);
sv.c:    if (ch->pcdata->temp_flag[k] != 0)
sv.c:      fprintf (fp, "NTf %d %d\n", k, ch->pcdata->temp_flag[k]);
sv.c:    if (ch->pcdata->killed_mobs[k] != 0)
sv.c:      fprintf (fp, "Nk %d %d\n", k, ch->pcdata->killed_mobs[k]);
sv.c:  fprintf (fp, "Nexp %d\n", ch->pcdata->new_exp);
sv.c:  fprintf (fp, "Nospam %d\n", ch->pcdata->no_spam);
sv.c:  fprintf (fp, "NDon %d\n", ch->pcdata->donated);
sv.c:  fprintf (fp, "NTps %d\n", ch->pcdata->tps);
sv.c:  fprintf (fp, "NQuest %d\n", ch->pcdata->questflag);
sv.c:  fprintf (fp, "NatArm %d\n", ch->pcdata->nat_armor);
sv.c:  fprintf (fp, "NatAbil %d\n", ch->pcdata->nat_abilities);
sv.c:  if (ch->pcdata->challenge_on)
sv.c:    fprintf (fp, "NChon %d\n", ch->pcdata->challenge_on);
sv.c:  if (ch->pcdata->remort_times)
sv.c:    fprintf (fp, "NRemort %d", ch->pcdata->remort_times);
sv.c:      fprintf (fp, " %d", ch->pcdata->remort[zi]);
sv.c:  fprintf (fp, "NAMsg %d\n", ch->pcdata->arena_msg);
sv.c:  fprintf (fp, "NGldBt %d\n", ch->pcdata->guilds);
sv.c:      ch->pcdata->guildstats[0], ch->pcdata->guildstats[1],
sv.c:      ch->pcdata->guildstats[2], ch->pcdata->guildstats[3]); 
sv.c:  fprintf (fp, "NWPS %d\n", ch->pcdata->warpoints);
sv.c:  fprintf (fp, "NMana %d\n", ch->pcdata->n_mana);
sv.c:     fprintf( fp, "NWarned %d\n", ch->pcdata->warned);
sv.c:     fprintf( fp, "NJServd %d\n", ch->pcdata->jail_served);
sv.c:     fprintf( fp, "Bounty %d\n", ch->pcdata->bounty );
sv.c:     if (ch->pcdata->myhost[pos] == NULL)
sv.c:     fprintf(fp, "Site %s~\n", ch->pcdata->myhost[pos]);
sv.c:  fprintf (fp, "Race %d\n", ch->pcdata->race);
sv.c:  fprintf (fp, "Level %d\n", ch->pcdata->level);
sv.c:  fprintf (fp, "SCool %d\n", ch->pcdata->cool_skills);
sv.c:  if (ch->pcdata->level > 100)
sv.c:    fprintf (fp, "Winv %d\n", ch->pcdata->wizinvis);
sv.c:    fprintf (fp, "Secrty %d\n", ch->pcdata->security);
sv.c:  fprintf (fp, "Played %ld\n", ch->pcdata->played);
sv.c:  fprintf (fp, "Act2 %d\n", ch->pcdata->act2);
sv.c:  if (ch->pcdata->act3 != 0)
sv.c:    fprintf (fp, "Act3 %d\n", ch->pcdata->act3);
sv.c:  fprintf (fp, "Learn %d\n", ch->pcdata->learn);
sv.c:  fprintf (fp, "Practc %d\n", ch->pcdata->practice);
sv.c:  if (ch->pcdata->saving_throw)
sv.c:    fprintf (fp, "SvngTh %d\n", ch->pcdata->saving_throw);
sv.c:  fprintf (fp, "Alignmt %d\n", ch->pcdata->alignment);
sv.c:  fprintf (fp, "Eqlist %d\n", ch->pcdata->eqlist);
sv.c:  if (ch->pcdata->resist_summon)
sv.c:    fprintf (fp, "LResist %d\n", ch->pcdata->resist_summon);
sv.c:  if (ch->pcdata->plus_kick)
sv.c:    fprintf (fp, "LKick %d\n", ch->pcdata->plus_kick);
sv.c:  if (ch->pcdata->plus_sneak)
sv.c:    fprintf (fp, "LSneak %d\n", ch->pcdata->plus_sneak);
sv.c:  if (ch->pcdata->plus_hide < (ch->pcdata->level / 2))
sv.c:    ch->pcdata->plus_hide = (ch->pcdata->level / 2);
sv.c:  fprintf (fp, "LHide %d\n", ch->pcdata->plus_hide);
sv.c:  if (ch->pcdata->deaf)
sv.c:    fprintf (fp, "Deaf %d\n", ch->pcdata->deaf);
sv.c:    fprintf (fp, "Password %s~\n", ch->pcdata->pwd);
sv.c:    if (ch->pcdata->rprompt)
sv.c:      fprintf (fp, "Promptr %s~\n", fix_string (ch->pcdata->rprompt));
sv.c:    fprintf (fp, "Prompt %d\n", ch->pcdata->prompt);
sv.c:    fprintf (fp, "Pagelen %d\n", ch->pcdata->pagelen);
sv.c:    if (ch->pcdata->implants_1 != 0)
sv.c:      fprintf (fp, "PImplO %d\n", ch->pcdata->implants_1);
sv.c:    if (ch->pcdata->implants_2 != 0)
sv.c:      fprintf (fp, "PImplT %d\n", ch->pcdata->implants_2);
sv.c:      fprintf (fp, "Bamfin %s~\n", ch->pcdata->beamin);
sv.c:      fprintf (fp, "Bamfout %s~\n", ch->pcdata->beamout);
sv.c:    if (ch->pcdata->bank > 0)
sv.c:      fprintf (fp, "Bank %ld\n", ch->pcdata->bank);
sv.c:    if (ch->pcdata->rank != NULL)
sv.c:      fprintf (fp, "Rank %s~\n", ch->pcdata->rank);
sv.c:    fprintf (fp, "Title %s~\n", ch->pcdata->title);
sv.c:        ch->pcdata->perm_stat[STR_I],
sv.c:        ch->pcdata->perm_stat[CON_I],
sv.c:        ch->pcdata->perm_stat[DEX_I],
sv.c:        ch->pcdata->perm_stat[INT_I], ch->pcdata->perm_stat[WIS_I]);
sv.c:    if (ch->pcdata->mod_stat[STR_I] || ch->pcdata->mod_stat[INT_I]
sv.c:        || ch->pcdata->mod_stat[WIS_I] || ch->pcdata->mod_stat[DEX_I]
sv.c:        || ch->pcdata->mod_stat[CON_I])
sv.c:      fprintf (fp, "AttrMod %d %d %d %d %d\n", ch->pcdata->mod_stat[STR_I],
sv.c:          ch->pcdata->mod_stat[CON_I], ch->pcdata->mod_stat[DEX_I],
sv.c:          ch->pcdata->mod_stat[INT_I], ch->pcdata->mod_stat[WIS_I]);
sv.c:    fprintf (fp, "Condition %d %d %d\n", ch->pcdata->condition[0],
sv.c:        ch->pcdata->condition[1], ch->pcdata->condition[2]);
sv.c:        sprintf (colbuf, "%s %d", colbuf, ch->pcdata->colors[colix]);
sv.c:        ch->pcdata->colors[0], ch->pcdata->colors[1],
sv.c:        ch->pcdata->colors[2], ch->pcdata->colors[3],
sv.c:        ch->pcdata->colors[4], ch->pcdata->colors[5],
sv.c:        ch->pcdata->colors[6], ch->pcdata->colors[7],
sv.c:        ch->pcdata->colors[8], ch->pcdata->colors[9]);
sv.c:      if (ch->pcdata->trophy_name[k][0] != '\0')
sv.c:        fprintf (fp, "NTro %s \n", ch->pcdata->trophy_name[k]);
sv.c:        fprintf (fp, "TTro %d\n", ch->pcdata->trophy_times[k]);
sv.c:        fprintf (fp, "LTro %d\n", ch->pcdata->trophy_level[k]);
sv.c:      if (ch->pcdata->ignore[k])
sv.c:        fprintf (fp, "Ignore %s\n", ch->pcdata->ignore[k]);
sv.c:      if (ch->pcdata->aliasname[k] &&
sv.c:          ch->pcdata->aliasname[k][0] != '\0' &&
sv.c:          ch->pcdata->alias[k] && ch->pcdata->alias[k][0] != '\0')
sv.c:        for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
sv.c:        fprintf (fp, "Alias %s\n", ch->pcdata->aliasname[k]);
sv.c:        fprintf (fp, "AlCt %s~\n", fix_string (ch->pcdata->alias[k]));
sv.c:        for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
sv.c:      if (ch->pcdata->actionname[k] &&
sv.c:          ch->pcdata->actionname[k][0] != '\0' &&
sv.c:          ch->pcdata->action[k] && ch->pcdata->action[k][0] != '\0')
sv.c:        for (msk = ch->pcdata->action[k]; *msk != '\0'; msk++)
sv.c:            fix_string (ch->pcdata->actionname[k]));
sv.c:        fprintf (fp, "AcCt %s~\n", fix_string (ch->pcdata->action[k]));
sv.c:        for (msk = ch->pcdata->action[k]; *msk != '\0'; msk++)
sv.c:      if (ch->pcdata->learned[sn] > 0)
sv.c:            ch->pcdata->learned[sn], spell->spell_funky_name);
sv.c:    if (ch->pcdata->storage[k] == NULL
sv.c:        || IS_SET (ch->pcdata->storage[k]->extra_flags, ITEM_NOSAVE))
sv.c:      obj = ch->pcdata->storage[k];
sv.c:          && !str_cmp (tch->pcdata->name, arg2))
sv.c:        if (!str_cmp (crypt (arg1, tch->pcdata->pwd), tch->pcdata->pwd))
sv.c:        //tch->pcdata->new_exp = TRUE;
sv.c:          && !str_cmp (tch->pcdata->name, arg2))
sv.c:  free_string (ch->pcdata->name);
sv.c:  ch->pcdata->name = str_dup (name);
sv.c:  ch->pcdata->temp = NULL;
sv.c:      ch->pcdata->killed_mobs[fread_number(fp)]=fread_number(fp);
sv.c:            if (ch->pcdata->pet_temp[kl] == 0)
sv.c:              ch->pcdata->pet_temp[kl] = fread_number (fp);
sv.c:              ch->pcdata->pet_hps[kl] = fread_number (fp);
sv.c:              ch->pcdata->pet_move[kl] = fread_number (fp);
sv.c:        KEY ("Act2", ch->pcdata->act2, fread_number (fp));
sv.c:        KEY ("Act3", ch->pcdata->act3, fread_number (fp));
sv.c:        KEY ("Alignmt", ch->pcdata->alignment, fread_number (fp));
sv.c:            if (ch->pcdata->actionname[k][0] == '\''
sv.c:                || ch->pcdata->actionname[k][0] == '\"')
sv.c:            if (!ch->pcdata->actionname[k] ||
sv.c:                ch->pcdata->actionname[k][0] == '\0' ||
sv.c:                !ch->pcdata->action[k] ||
sv.c:                ch->pcdata->action[k][0] == '\0')
sv.c:          ch->pcdata->actionname[k] = str_dup (fread_string2 (fp, NULL));
sv.c:          ch->pcdata->action[k] = str_dup (fread_string2 (fp, NULL));
sv.c:          for (msk = ch->pcdata->action[k]; *msk != '\0'; msk++)
sv.c:            if (!ch->pcdata->aliasname[k] ||
sv.c:                ch->pcdata->aliasname[k][0] == '\0' ||
sv.c:                !ch->pcdata->alias[k] ||
sv.c:                ch->pcdata->alias[k][0] == '\0')
sv.c:          ch->pcdata->aliasname[k] = str_dup (fread_word (fp));
sv.c:          ch->pcdata->alias[k] = str_dup (fread_string2 (fp, NULL));
sv.c:          for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
sv.c:          ch->pcdata->mod_stat[STR_I] = fread_number (fp);
sv.c:          ch->pcdata->mod_stat[CON_I] = fread_number (fp);
sv.c:          ch->pcdata->mod_stat[DEX_I] = fread_number (fp);
sv.c:          ch->pcdata->mod_stat[INT_I] = fread_number (fp);
sv.c:          ch->pcdata->mod_stat[WIS_I] = fread_number (fp);
sv.c:          ch->pcdata->perm_stat[STR_I] = fread_number (fp);
sv.c:          ch->pcdata->perm_stat[CON_I] = fread_number (fp);
sv.c:          ch->pcdata->perm_stat[DEX_I] = fread_number (fp);
sv.c:          ch->pcdata->perm_stat[INT_I] = fread_number (fp);
sv.c:          ch->pcdata->perm_stat[WIS_I] = fread_number (fp);
sv.c:          ch->pcdata->bank = fread_number (fp);
sv.c:        SKEY ("Bamfin", ch->pcdata->beamin, fread_string2 (fp, NULL));
sv.c:        SKEY ("Bamfout", ch->pcdata->beamout, fread_string2 (fp, NULL));
sv.c:        KEY ("Bounty", ch->pcdata->bounty, fread_number (fp));
sv.c:          ch->pcdata->condition[0] = fread_number (fp);
sv.c:          ch->pcdata->condition[1] = fread_number (fp);
sv.c:          ch->pcdata->condition[2] = fread_number (fp);
sv.c:            ch->pcdata->colors[colix] = fread_number(fp);
sv.c:          ch->pcdata->colors[0] = fread_number (fp);
sv.c:          ch->pcdata->colors[1] = fread_number (fp);
sv.c:          ch->pcdata->colors[2] = fread_number (fp);
sv.c:          ch->pcdata->colors[3] = fread_number (fp);
sv.c:          ch->pcdata->colors[4] = fread_number (fp);
sv.c:          ch->pcdata->colors[5] = fread_number (fp);
sv.c:          ch->pcdata->colors[6] = fread_number (fp);
sv.c:          ch->pcdata->colors[7] = fread_number (fp);
sv.c:          ch->pcdata->colors[8] = fread_number (fp);
sv.c:          ch->pcdata->colors[9] = fread_number (fp);
sv.c:        KEY ("Deaths", ch->pcdata->deaths, fread_number (fp));
sv.c:        KEY ("DPray", ch->pcdata->pray_points, fread_number (fp));
sv.c:        KEY ("DProf", ch->pcdata->profession_flag, fread_number (fp));
sv.c:        KEY ("Deaf", ch->pcdata->deaf, fread_number (fp));
sv.c:        SKEY ("Descr", ch->pcdata->description, fread_string2 (fp, NULL));
sv.c:          checksum += ch->pcdata->level;
sv.c:          checksum -= ch->pcdata->warpoints;
sv.c:          checksum -= ch->pcdata->bank;
sv.c:            ch->level=1; ch->pcdata->bank=0;
sv.c:            ch->pcdata->level = 111;
sv.c:        KEY ("Eqlist", ch->pcdata->eqlist, fread_number (fp));
sv.c:            ch->pcdata->guildstats[zi] = fread_number(fp);
sv.c:        KEY ("HMp", ch->pcdata->monthly_pass, fread_number (fp));
sv.c:        KEY ("HMpp", ch->pcdata->monthly_expired, fread_number (fp));
sv.c:        KEY ("Hpc", ch->pcdata->hours_purchased, fread_number (fp));
sv.c:        KEY ("HEx", ch->pcdata->hours_expired, fread_number (fp));
sv.c:            if (!ch->pcdata->ignore[i])
sv.c:          ch->pcdata->ignore[i] = str_dup (fread_word (fp));
sv.c:        KEY ("Killpt", ch->pcdata->killpoints, fread_number (fp));
sv.c:        KEY ("LResist", ch->pcdata->resist_summon, fread_number (fp));
sv.c:        KEY ("LKick", ch->pcdata->plus_kick, fread_number (fp));
sv.c:        KEY ("LSneak", ch->pcdata->plus_sneak, fread_number (fp));
sv.c:        KEY ("LHide", ch->pcdata->plus_hide, fread_number (fp));
sv.c:        KEY ("Level", ch->pcdata->level, fread_number (fp));
sv.c:        KEY ("Learn", ch->pcdata->learn, fread_number (fp));
sv.c:        SKEY ("LoDesc", ch->pcdata->long_descr, fread_string2 (fp, NULL));
sv.c:          strcpy (ch->pcdata->chan_color[tt], fread_word (fp));
sv.c:        KEY ("LCign", ch->pcdata->chan_ignore, fread_number (fp));
sv.c:            if (ch->pcdata->trophy_level[i] == 0)
sv.c:          ch->pcdata->trophy_level[i] = fread_number (fp);
sv.c:          ch->pcdata->complete[fread_number (fp)] = fread_number (fp);
sv.c:          ch->pcdata->in_progress[fread_number (fp)] = fread_number (fp);
sv.c:          ch->pcdata->temp_flag[fread_number (fp)] = fread_number (fp);
sv.c:          ch->pcdata->killed_mobs[fread_number (fp)] = fread_number (fp);
sv.c:        KEY ("NAn", ch->pcdata->show_lev, fread_number (fp));
sv.c:        KEY ("Nospam", ch->pcdata->no_spam, fread_number (fp));
sv.c:        KEY ("NTps", ch->pcdata->tps, fread_number (fp));
sv.c:        KEY ("NDon", ch->pcdata->donated, fread_number (fp));
sv.c:        KEY ("Nexp", ch->pcdata->new_exp, fread_number (fp));
sv.c:        KEY ("NQuest", ch->pcdata->questflag, fread_number (fp));
sv.c:        KEY ("NatArm", ch->pcdata->nat_armor, fread_number (fp));
sv.c:        KEY ("NatAbil", ch->pcdata->nat_abilities, fread_number (fp));
sv.c:        KEY ("NChon", ch->pcdata->challenge_on, fread_number (fp));
sv.c:        //KEY ("NRemort", ch->pcdata->remort_times, fread_number (fp));
sv.c:          ch->pcdata->remort_times = fread_number (fp);
sv.c:            ch->pcdata->remort[zi] = fread_number (fp);
sv.c:        KEY ("NAMsg", ch->pcdata->arena_msg, fread_number (fp));
sv.c:        KEY ("NWPS", ch->pcdata->warpoints, fread_number (fp));
sv.c:        KEY ("NMana", ch->pcdata->n_mana, fread_number (fp));
sv.c:        KEY ("NGldBt", ch->pcdata->guilds, fread_number (fp));
sv.c:        KEY ("NWarned", ch->pcdata->warned, fread_number (fp));
sv.c:        KEY ("NJServd", ch->pcdata->jail_served, fread_number (fp));
sv.c:            if (ch->pcdata->trophy_name[i][0] == '\0')
sv.c:          strcpy (ch->pcdata->trophy_name[i], fread_word (fp));
sv.c:          strcpy (ch->pcdata->email, fread_string2 (fp, NULL));
sv.c:        KEY ("Prompt", ch->pcdata->prompt, fread_number (fp));
sv.c:        SKEY ("Promptr", ch->pcdata->rprompt, fread_string2 (fp, NULL));
sv.c:        SKEY ("Password", ch->pcdata->pwd, fread_string2 (fp, NULL));
sv.c:        KEY ("Played", ch->pcdata->played, fread_number (fp));
sv.c:        KEY ("Pagelen", ch->pcdata->pagelen, fread_number (fp));
sv.c:        KEY ("PImplO", ch->pcdata->implants_1, fread_number (fp));
sv.c:        KEY ("PImplT", ch->pcdata->implants_2, fread_number (fp));
sv.c:        KEY ("Practc", ch->pcdata->practice, fread_number (fp));
sv.c:          ch->pcdata->race = fread_number (fp);
sv.c:          ch->pcdata->rank = str_dup (fread_string2 (fp, NULL));
sv.c:          ch->pcdata->temp_room = get_room_index (fread_number (fp));
sv.c:          if (ch->pcdata->temp_room == NULL)
sv.c:            ch->pcdata->temp_room = get_room_index (400);
sv.c:        KEY ("SvngTh", ch->pcdata->saving_throw, fread_number (fp));
sv.c:        KEY ("Sex", ch->pcdata->sex, fread_number (fp));
sv.c:        SKEY ("ShDesc", ch->pcdata->short_descr, fread_string2 (fp, NULL));
sv.c:        KEY ("SCool", ch->pcdata->cool_skills, fread_number (fp));
sv.c:        KEY ("Secrty", ch->pcdata->security, fread_number (fp));
sv.c:          ch->pcdata->script_flags[csf] =
sv.c:            ch->pcdata->learned[sn] = value;
sv.c:            if (ch->pcdata->trophy_times[i] == 0)
sv.c:          ch->pcdata->trophy_times[i] = fread_number (fp);
sv.c:        KEY ("TtlKils", ch->pcdata->totalkills, fread_number (fp));
sv.c:          ch->pcdata->title = str_dup (fread_string2 (fp, NULL));
sv.c:        KEY ("Winv", ch->pcdata->wizinvis, fread_number (fp));
sv.c:      if (ch->pcdata->storage[k] == NULL)
sv.c:              ch->pcdata->storage[free_storage (ch)] = obj;
toptr.c:    if (ch->pcdata->warpoints > topten.topten_warpoints[k]
toptr.c:      topten.topten_warpoints[k] = ch->pcdata->warpoints;
toptr.c:  topten.topten_warpoints[slotnum] = ch->pcdata->warpoints;
toptr.c:        if (ch->pcdata->killed_mobs[mid->vnum] == 0)
toptr.c:        if (ch->pcdata->killed_mobs[i] > 999)
toptr.c:          ch->pcdata->killed_mobs[i] = 999;
toptr.c:            ch->pcdata->killed_mobs[i], mid->short_descr);
toptr.c:      if (ch->pcdata->trophy_level[i] < 1
toptr.c:          || ch->pcdata->trophy_name[i][0] == '\0')
toptr.c:      if (ch->pcdata->trophy_level[i] <= curlevel)
toptr.c:            if (ch->pcdata->trophy_level[itt] >
toptr.c:                ch->pcdata->trophy_level[i])
toptr.c:            curlevel = ch->pcdata->trophy_level[i];
toptr.c:          ch->pcdata->trophy_level[tempslot],
toptr.c:          ch->pcdata->trophy_name[tempslot],
toptr.c:          ch->pcdata->trophy_times[tempslot]);
toptr.c:    if (ch->pcdata->trophy_name[i][0] == '\0')
toptr.c:    if (ch->pcdata->trophy_level[i] < templev)
toptr.c:      templev = ch->pcdata->trophy_level[i];
toptr.c:  if (ch->pcdata->trophy_level[tempnum] <= LEVEL (victim))
toptr.c:    ch->pcdata->warpoints += wpgain;
toptr.c:    ch->pcdata->warpoints += wpgain;
toptr.c:    if (ch->pcdata->trophy_name[i][0] == '\0')
toptr.c:    if (!str_cmp (RNAME (victim), ch->pcdata->trophy_name[i]))
toptr.c:      ch->pcdata->trophy_times[i]++;
toptr.c:      ch->pcdata->trophy_level[i] = LEVEL (victim);
toptr.c:  strcpy (ch->pcdata->trophy_name[nummy], RNAME (victim));
toptr.c:  ch->pcdata->trophy_times[nummy] = 1;
toptr.c:  ch->pcdata->trophy_level[nummy] = LEVEL (victim);
upd.c:  ch->armor = ch->pcdata->nat_armor;
upd.c:      i = ch->pcdata->guilds;
upd.c:      ch->pcdata->guilds = 0;
upd.c:	ch->pcdata->guilds |= GUILD_TINKER;
upd.c:	ch->pcdata->guilds |= GUILD_WARRIOR;
upd.c:	ch->pcdata->guilds |= GUILD_THIEFG;
upd.c:	ch->pcdata->guilds |= GUILD_HEALER;
upd.c:	ch->pcdata->guilds |= GUILD_WIZARD;
upd.c:	ch->pcdata->guilds |= GUILD_RANGER;
upd.c:	ch->pcdata->guilds |= GUILD_ASSASSIN;
upd.c:        ch->pcdata->guilds |= GUILD_MARAUDER;
upd.c:        ch->pcdata->guilds |= GUILD_ELEMENTAL;
upd.c:        ch->pcdata->guilds |= GUILD_PALADIN;
upd.c:        ch->pcdata->guilds |= GUILD_BATTLEMAGE;
upd.c:        ch->pcdata->guilds |= GUILD_NECROMANCER;
upd.c:      tot += ch->pcdata->remort[ix];
upd.c:    if (tot < ch->pcdata->remort_times)
upd.c:      ch->pcdata->remort[REMORT_DAM] += ch->pcdata->remort_times - tot;
upd.c:  ch->damroll += (ch->pcdata->remort[REMORT_DAM] * REMORT_DAM_AMOUNT);
upd.c:      if (ch->pcdata->learned[sn] > 0)
upd.c:     if (race_info[ch->pcdata->race].max_skills + race_info[ch->pcdata->race].max_spells <= ct)
upd.c:  ch->pcdata->practice += add_prac;
upd.c:  ch->pcdata->learn += add_learn;
upd.c:  ch->pcdata->tps += gain;
upd.c:	 && ch->exp >= (unsigned) FIND_EXP (LEVEL (ch), ch->pcdata->race)
upd.c:	 && ch->pcdata->tps >= FIND_TPS (LEVEL (ch), ch->pcdata->race))
upd.c:      ch->pcdata->level++;
upd.c:	       NAME (ch), ch->pcdata->level);
upd.c:  if (ch->exp >= (unsigned) FIND_EXP ((LEVEL (ch) + 2), ch->pcdata->race)
upd.c:      && ch->pcdata->tps < FIND_TPS (LEVEL (ch), ch->pcdata->race))
upd.c:      ch->exp = FIND_EXP ((LEVEL (ch) + 2), ch->pcdata->race) - 1;
upd.c:	 && ch->exp >= (unsigned) FIND_EXP (LEVEL (ch), ch->pcdata->race)
upd.c:	 && ch->pcdata->tps >= FIND_TPS (LEVEL (ch), ch->pcdata->race))
upd.c:      omm = ch->pcdata->n_max_mana;
upd.c:      ch->pcdata->level++;
upd.c:	       ch->max_hit - ohp, ch->max_move - omv, ch->pcdata->n_max_mana - omm,  ch->pcdata->level);
upd.c:      if (ch->pcdata->level <= 10 && ch->pcdata->remort_times < 1)
upd.c:	       NAME (ch), ch->pcdata->level);
upd.c:  reval = ch->pcdata->n_max_mana;	/* + (( (LEVEL(ch)/3) * (get_curr_int(ch) + get_curr_wis(ch))) / 10); */
upd.c:  maxmana = 100 + ((get_curr_int (ch) - 14) * 4) + ((get_curr_wis (ch) - 14) * 4) + ch->pcdata->n_max_mana;
upd.c:  if (ch->pcdata->n_mana < ch->pcdata->n_max_mana && hehe != 2)
upd.c:      ch->pcdata->n_mana =
upd.c:	UMIN (ch->pcdata->n_max_mana, ch->pcdata->n_mana + tt);
upd.c:  if (hehe == 2 && ch->pcdata->n_mana > 0)
upd.c:      --ch->pcdata->n_mana;
upd.c:      if (ch->pcdata->condition[COND_THIRST] > 1)
upd.c:      if (ch->pcdata->condition[COND_FULL] <= 5)
upd.c:      if (ch->pcdata->condition[COND_FULL] <= 0)
upd.c:      if (ch->pcdata->condition[COND_THIRST] <= 5)
upd.c:      if (ch->pcdata->condition[COND_THIRST] <= 0)
upd.c:  if (IS_PLAYER (ch) && race_info[ch->pcdata->race].regen_hit_percent != 100)
upd.c:      gain = (gain * race_info[ch->pcdata->race].regen_hit_percent) / 100;
upd.c:      if (ch->pcdata->condition[COND_FULL] <= 0)
upd.c:      if (ch->pcdata->condition[COND_THIRST] <= 0)
upd.c:  if (IS_PLAYER (ch) && race_info[ch->pcdata->race].regen_move_percent != 100)
upd.c:      gain = (gain * race_info[ch->pcdata->race].regen_move_percent) / 100;
upd.c:  ch->pcdata->condition[iCond] += value;
upd.c:  if (ch->pcdata->condition[COND_DRUNK] < 0)
upd.c:    ch->pcdata->condition[COND_DRUNK] = 0;
upd.c:  if (ch->pcdata->condition[iCond] > 48)
upd.c:    ch->pcdata->condition[iCond] = 48;
upd.c:  condition = ch->pcdata->condition[iCond];
upd.c:  if (ch->pcdata->condition[iCond] < -2)
upd.c:	      ch->pcdata->condition[COND_THIRST] = 48;
upd.c:	      ch->pcdata->condition[COND_FULL] = 48;
upd.c:  if (ch->pcdata->condition[iCond] == 9)
upd.c:  if (ch->pcdata->condition[iCond] <= 1)
upd.c:  if (ch->pcdata->condition[iCond] == 3)
upd.c:/*     if ( ch->npcdata->hire != NULL )
upd.c:			&& to_attack->pcdata->level > 99))
upd.c:			&& to_attack->pcdata->level > 99))
upd.c:			&& to_attack->pcdata->level > 99))
upd.c:			&& to_attack->pcdata->level > 99))
upd.c:/*        && (ch->npcdata->hire == NULL) */
upd.c:        if (IS_SET (found_winner->pcdata->raceflag, RC_EVILRACE))
upd.c:        && (wch->pcdata->no_quit > 0 || wch->pcdata->no_quit_pk > 0))
upd.c:      if (wch->pcdata->no_quit_pk > 0
upd.c:        wch->pcdata->no_quit_pk--;
upd.c:      if (wch->pcdata->no_quit > 0
upd.c:        wch->pcdata->no_quit--;
upd.c:    if (IS_PLAYER (wch) && wch->pcdata->jail_served != 0)
upd.c:        wch->pcdata->bounty += 25;
upd.c:        wch->pcdata->jail_served = 0;
upd.c:        wch->pcdata->warned = 0;
upd.c:        wch->pcdata->jail_served++;
upd.c:        wch->pcdata->bounty -= 3;
upd.c:        if (wch->pcdata->bounty <= 0)
upd.c:          wch->pcdata->jail_served = 0;
upd.c:          wch->pcdata->bounty = 0;
upd.c:          wch->pcdata->warned = 0;
upd.c:              wch->pcdata->jail_served - 1,
upd.c:              wch->pcdata->bounty / 3);
upd.c:	if (ch->pcdata->challenge_time > 0)
upd.c:	  ch->pcdata->challenge_time--;
upd.c:		if (ch->pcdata->remort_times < 2 && !NO_HUNGER (ch))
upd.c:		if (ch->pcdata->remort_times < 3 && !NO_THIRST (ch))
upd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
upd.c:      FIXIT (ch) if (ch->pcdata->hours_expired)
upd.c:        if (ch->pcdata->monthly_pass > 0)
upd.c:          ch->pcdata->hours_expired = FALSE;
upd.c:      if (ch->pcdata->monthly_pass > 0
upd.c:          && ch->pcdata->monthly_expired < monthly_key)
upd.c:        ch->pcdata->monthly_expired = monthly_key;
upd.c:        ch->pcdata->monthly_pass--;
upd.c:      if (ch->pcdata->bounty>0 && IS_EVIL(ch)) ch->pcdata->bounty=0;
upd.c:    if (IS_PLAYER (ch) && ch->timer > 93 && ch->pcdata->no_quit < 1)
upd.c:                  if (IS_PLAYER(ch) && !strcmp(race_info[ch->pcdata->race].name, "behemoth"))
upd.c:	  if (IS_IMMORTAL (ch) && !IS_SET (ch->pcdata->act2, PLR_HOLYLAG))
upd.c:		       (ch->pIndexData->race_hate, vch->pcdata->raceflag))
view.c:    tr = to->pcdata->race;
view.c:      if (ch->pcdata->learn < 1)
view.c:      ch->pcdata->learn--;
view.c:      ch->pcdata->practice += 10;
view.c:      if (ch->pcdata->practice < 10)
view.c:      ch->pcdata->learn++;
view.c:      ch->pcdata->practice -= 10;
